
keyboard_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c78c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800c93c  0800c93c  0001c93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca84  0800ca84  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca84  0800ca84  0001ca84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca8c  0800ca8c  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca8c  0800ca8c  0001ca8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca90  0800ca90  0001ca90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800ca94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202f8  2**0
                  CONTENTS
 10 .bss          00005290  200002f8  200002f8  000202f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005588  20005588  000202f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026279  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d15  00000000  00000000  000465a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb8  00000000  00000000  0004c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c60  00000000  00000000  0004e170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf7d  00000000  00000000  0004fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026634  00000000  00000000  0007cd4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f97a0  00000000  00000000  000a3381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019cb21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008274  00000000  00000000  0019cb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002f8 	.word	0x200002f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c924 	.word	0x0800c924

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	0800c924 	.word	0x0800c924

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LEDsToggleCaps>:

#include "config.h"
#include "ws2812b.h"
#include "LED_effects.h"

void LEDsToggleCaps(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(CAPS_STATUS_PORT, CAPS_STATUS_PIN);
 80004f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <LEDsToggleCaps+0x14>)
 80004fe:	f002 faca 	bl	8002a96 <HAL_GPIO_TogglePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40020800 	.word	0x40020800

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000314 	.word	0x20000314
 800053c:	200003c8 	.word	0x200003c8

08000540 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <vApplicationGetTimerTaskMemory+0x2c>)
 8000550:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <vApplicationGetTimerTaskMemory+0x30>)
 8000556:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800055e:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000560:	bf00      	nop
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	200005c8 	.word	0x200005c8
 8000570:	2000067c 	.word	0x2000067c

08000574 <keyboardCapsDebounceCallback>:
keyboard_device_t kb = { .row_ports = { ROW_PORT_0, ROW_PORT_1,
ROW_PORT_2, ROW_PORT_3, ROW_PORT_4 }, .row_pins = { ROW_PIN_0,
ROW_PIN_1, ROW_PIN_2, ROW_PIN_3, ROW_PIN_4 }, .keyboard_report_ID = 1,
		.media_report_ID = 2, };

void keyboardCapsDebounceCallback(TimerHandle_t timer) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	xSemaphoreGive(kb.caps_lock);
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <keyboardCapsDebounceCallback+0x20>)
 800057e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8000580:	2300      	movs	r3, #0
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	f008 fee5 	bl	8009354 <xQueueGenericSend>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000000 	.word	0x20000000

08000598 <keyboardReadRow>:

static unsigned char keyboardReadRow(unsigned char row) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(kb.row_ports[row], kb.row_pins[row]);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <keyboardReadRow+0x30>)
 80005a6:	3302      	adds	r3, #2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	685a      	ldr	r2, [r3, #4]
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	4905      	ldr	r1, [pc, #20]	; (80005c8 <keyboardReadRow+0x30>)
 80005b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005b6:	4619      	mov	r1, r3
 80005b8:	4610      	mov	r0, r2
 80005ba:	f002 fa3b 	bl	8002a34 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000000 	.word	0x20000000

080005cc <keyboardScanBufferAdd>:

static void keyboardScanBufferAdd(unsigned char key_code) {
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	kb.scan_buff.buff[kb.scan_buff.count] = key_code;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <keyboardScanBufferAdd+0x38>)
 80005d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80005dc:	461a      	mov	r2, r3
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <keyboardScanBufferAdd+0x38>)
 80005e0:	4413      	add	r3, r2
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	kb.scan_buff.count++;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <keyboardScanBufferAdd+0x38>)
 80005ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80005ee:	3301      	adds	r3, #1
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <keyboardScanBufferAdd+0x38>)
 80005f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	20000000 	.word	0x20000000

08000608 <keyboardScanMatrix>:

signed char keyboardScanMatrix(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

	static unsigned short row_mask = { 0 };

	if ( xSemaphoreTake(kb.buff_lock, (TickType_t) 0) == pdFALSE)
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <keyboardScanMatrix+0xc4>)
 8000610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f009 f917 	bl	8009848 <xQueueSemaphoreTake>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d101      	bne.n	8000624 <keyboardScanMatrix+0x1c>
		return 1;
 8000620:	2301      	movs	r3, #1
 8000622:	e04f      	b.n	80006c4 <keyboardScanMatrix+0xbc>

	for (unsigned char col = 0; col < KEYBOARD_COLS; col++) { /* Set each col high and test rows*/
 8000624:	2300      	movs	r3, #0
 8000626:	71fb      	strb	r3, [r7, #7]
 8000628:	e030      	b.n	800068c <keyboardScanMatrix+0x84>
		row_mask = (1 << col);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2201      	movs	r2, #1
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <keyboardScanMatrix+0xc8>)
 8000636:	801a      	strh	r2, [r3, #0]

		if (SN54HC595_out_bytes((unsigned char*) &row_mask, SHIFT_DEVICES))
 8000638:	2102      	movs	r1, #2
 800063a:	4825      	ldr	r0, [pc, #148]	; (80006d0 <keyboardScanMatrix+0xc8>)
 800063c:	f000 ff24 	bl	8001488 <SN54HC595_out_bytes>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d135      	bne.n	80006b2 <keyboardScanMatrix+0xaa>
			goto error;
		vTaskDelay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f009 fdb8 	bl	800a1bc <vTaskDelay>

		for (unsigned char row = 0; row < KEYBOARD_ROWS; row++) /* test each row */
 800064c:	2300      	movs	r3, #0
 800064e:	71bb      	strb	r3, [r7, #6]
 8000650:	e016      	b.n	8000680 <keyboardScanMatrix+0x78>
			if (keyboardReadRow(row)) /*key is pressed */
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff9f 	bl	8000598 <keyboardReadRow>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00c      	beq.n	800067a <keyboardScanMatrix+0x72>
				keyboardScanBufferAdd(
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f1c3 030e 	rsb	r3, r3, #14
 8000666:	b2db      	uxtb	r3, r3
 8000668:	79ba      	ldrb	r2, [r7, #6]
 800066a:	4611      	mov	r1, r2
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fa83 	bl	8000b78 <keymapGetKeyCode>
 8000672:	4603      	mov	r3, r0
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffa9 	bl	80005cc <keyboardScanBufferAdd>
		for (unsigned char row = 0; row < KEYBOARD_ROWS; row++) /* test each row */
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	3301      	adds	r3, #1
 800067e:	71bb      	strb	r3, [r7, #6]
 8000680:	79bb      	ldrb	r3, [r7, #6]
 8000682:	2b04      	cmp	r3, #4
 8000684:	d9e5      	bls.n	8000652 <keyboardScanMatrix+0x4a>
	for (unsigned char col = 0; col < KEYBOARD_COLS; col++) { /* Set each col high and test rows*/
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	3301      	adds	r3, #1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b0e      	cmp	r3, #14
 8000690:	d9cb      	bls.n	800062a <keyboardScanMatrix+0x22>
						keymapGetKeyCode(KEYBOARD_COLS - col - 1, row)); //TODO remove - requirement
	}

	xSemaphoreGive(kb.buff_lock);
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <keyboardScanMatrix+0xc4>)
 8000694:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000696:	2300      	movs	r3, #0
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	f008 fe5a 	bl	8009354 <xQueueGenericSend>

	if (kb.scan_buff.count)
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <keyboardScanMatrix+0xc4>)
 80006a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <keyboardScanMatrix+0xa6>
		return 0; // Buffer needs processing
 80006aa:	2300      	movs	r3, #0
 80006ac:	e00a      	b.n	80006c4 <keyboardScanMatrix+0xbc>
	else
		return 1; // Nothing to do
 80006ae:	2301      	movs	r3, #1
 80006b0:	e008      	b.n	80006c4 <keyboardScanMatrix+0xbc>
			goto error;
 80006b2:	bf00      	nop

	error:
	xSemaphoreGive(kb.buff_lock);
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <keyboardScanMatrix+0xc4>)
 80006b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80006b8:	2300      	movs	r3, #0
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	f008 fe49 	bl	8009354 <xQueueGenericSend>
	return 1;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000a80 	.word	0x20000a80

080006d4 <keyboardFillSendBuffer>:

// sort all standard keys: normal, mod and media into buffer
//returns -1 if 6 normals keys have been processed
static void keyboardFillSendBuffer(unsigned char key) {
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	if (key >= 0xE8 && key <= 0xEF) /* media */
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2be7      	cmp	r3, #231	; 0xe7
 80006e2:	d907      	bls.n	80006f4 <keyboardFillSendBuffer+0x20>
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2bef      	cmp	r3, #239	; 0xef
 80006e8:	d804      	bhi.n	80006f4 <keyboardFillSendBuffer+0x20>
	{
		kb.send_buff.med_buff = key;
 80006ea:	4a19      	ldr	r2, [pc, #100]	; (8000750 <keyboardFillSendBuffer+0x7c>)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	f882 3053 	strb.w	r3, [r2, #83]	; 0x53
		return;
 80006f2:	e027      	b.n	8000744 <keyboardFillSendBuffer+0x70>
	}

	if (key >= 0xE0 && key <= 0xE7) /* modifier */
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2bdf      	cmp	r3, #223	; 0xdf
 80006f8:	d913      	bls.n	8000722 <keyboardFillSendBuffer+0x4e>
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2be7      	cmp	r3, #231	; 0xe7
 80006fe:	d810      	bhi.n	8000722 <keyboardFillSendBuffer+0x4e>
	{
		kb.send_buff.mod_buff |= (1 << (key - 0xE0));
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <keyboardFillSendBuffer+0x7c>)
 8000702:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000706:	b25a      	sxtb	r2, r3
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	3be0      	subs	r3, #224	; 0xe0
 800070c:	2101      	movs	r1, #1
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	b25b      	sxtb	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b25b      	sxtb	r3, r3
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <keyboardFillSendBuffer+0x7c>)
 800071c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		return;
 8000720:	e010      	b.n	8000744 <keyboardFillSendBuffer+0x70>
	}

	SEND_BUFF_SET_END(key);
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <keyboardFillSendBuffer+0x7c>)
 8000724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000728:	3b01      	subs	r3, #1
 800072a:	4a09      	ldr	r2, [pc, #36]	; (8000750 <keyboardFillSendBuffer+0x7c>)
 800072c:	4413      	add	r3, r2
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <keyboardFillSendBuffer+0x7c>)
 8000736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <keyboardFillSendBuffer+0x7c>)
 8000740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	//sort key into send buffer or new keys buff
//	if (keyboardInPrevBuffer(key))
//		send_buf->key_buf.keys[send_buf->key_buf.count++] = key;
//	else
//		buf_new->buff[buf_new->count++] = key;
}
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000

08000754 <keyboardCapsToggle>:

void keyboardCapsToggle(void) {
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
	kb.toggles.caps ^= 1;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <keyboardCapsToggle+0x20>)
 800075a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800075e:	f083 0301 	eor.w	r3, r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <keyboardCapsToggle+0x20>)
 8000766:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	20000000 	.word	0x20000000

08000778 <keyboardCheckCaps>:

void keyboardFuncToggle(void) {
	kb.toggles.func ^= 1;
}

void keyboardCheckCaps() {
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b083      	sub	sp, #12
 800077c:	af02      	add	r7, sp, #8
	if (lookupCaps(SCAN_BUFF_END)) {
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <keyboardCheckCaps+0x70>)
 8000780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000784:	3b01      	subs	r3, #1
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <keyboardCheckCaps+0x70>)
 8000788:	4413      	add	r3, r2
 800078a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fa2c 	bl	8000bec <lookupCaps>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d022      	beq.n	80007e0 <keyboardCheckCaps+0x68>
		if (xSemaphoreTake(kb.caps_lock, 0)) {
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <keyboardCheckCaps+0x70>)
 800079c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f009 f851 	bl	8009848 <xQueueSemaphoreTake>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d019      	beq.n	80007e0 <keyboardCheckCaps+0x68>
			xTimerReset(kb.caps_debounce_timer,
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <keyboardCheckCaps+0x70>)
 80007ae:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 80007b0:	f009 fe52 	bl	800a458 <xTaskGetTickCount>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2300      	movs	r3, #0
 80007be:	2102      	movs	r1, #2
 80007c0:	4620      	mov	r0, r4
 80007c2:	f00a fc49 	bl	800b058 <xTimerGenericCommand>
			portMAX_DELAY);
			keyboardCapsToggle();
 80007c6:	f7ff ffc5 	bl	8000754 <keyboardCapsToggle>
			LEDsToggleCaps();
 80007ca:	f7ff fe93 	bl	80004f4 <LEDsToggleCaps>
			kb.send_buff.mod_buff |= HID_KEYBOARD_LED_CAPSLOCK;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <keyboardCheckCaps+0x70>)
 80007d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <keyboardCheckCaps+0x70>)
 80007dc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		}
	}
}
 80007e0:	bf00      	nop
 80007e2:	3704      	adds	r7, #4
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd90      	pop	{r4, r7, pc}
 80007e8:	20000000 	.word	0x20000000

080007ec <keyboardProcessScanBuff>:
 *
 * @param data global keyboard HID data
 * @param layer_list layer list used to convert key_codes
 * @return 0 on success
 */
signed char keyboardProcessScanBuff(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

	if (xSemaphoreTake(kb.buff_lock, (TickType_t) 0) == pdTRUE) {
 80007f0:	4b34      	ldr	r3, [pc, #208]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 80007f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f009 f826 	bl	8009848 <xQueueSemaphoreTake>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d152      	bne.n	80008a8 <keyboardProcessScanBuff+0xbc>
		// Clear send buffer
		memset(&kb.send_buff, 0, sizeof(send_buffer_t));
 8000802:	2217      	movs	r2, #23
 8000804:	2100      	movs	r1, #0
 8000806:	4830      	ldr	r0, [pc, #192]	; (80008c8 <keyboardProcessScanBuff+0xdc>)
 8000808:	f00b ffc2 	bl	800c790 <memset>

		for (; kb.scan_buff.count; kb.scan_buff.count--) {
 800080c:	e028      	b.n	8000860 <keyboardProcessScanBuff+0x74>

			// State change
			if (lookupCheckStateChange(SCAN_BUFF_END)) { /* if state change key */
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 8000810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000814:	3b01      	subs	r3, #1
 8000816:	4a2b      	ldr	r2, [pc, #172]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 8000818:	4413      	add	r3, r2
 800081a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f9c6 	bl	8000bb0 <lookupCheckStateChange>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d005      	beq.n	8000836 <keyboardProcessScanBuff+0x4a>
				kb.scan_buff.count = 0; /* clear buffer */
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				return 0;
 8000832:	2300      	movs	r3, #0
 8000834:	e043      	b.n	80008be <keyboardProcessScanBuff+0xd2>
			}

			// Caps
			keyboardCheckCaps();
 8000836:	f7ff ff9f 	bl	8000778 <keyboardCheckCaps>

			// Process other key presses into send buffer
			keyboardFillSendBuffer(SCAN_BUFF_END);
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 800083c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000840:	3b01      	subs	r3, #1
 8000842:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 8000844:	4413      	add	r3, r2
 8000846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff42 	bl	80006d4 <keyboardFillSendBuffer>
		for (; kb.scan_buff.count; kb.scan_buff.count--) {
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 8000852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000856:	3b01      	subs	r3, #1
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 800085c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 8000862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1d1      	bne.n	800080e <keyboardProcessScanBuff+0x22>
		}

		if (!keyboard_send_buffer_queue) /* check queue has been created */
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <keyboardProcessScanBuff+0xe0>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d01c      	beq.n	80008ac <keyboardProcessScanBuff+0xc0>
			goto queue_no_init;

		if (kb.send_buff.key_buff.count || kb.send_buff.med_buff)
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 8000874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000878:	2b00      	cmp	r3, #0
 800087a:	d104      	bne.n	8000886 <keyboardProcessScanBuff+0x9a>
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 800087e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000882:	2b00      	cmp	r3, #0
 8000884:	d007      	beq.n	8000896 <keyboardProcessScanBuff+0xaa>
			xQueueSendToFront(keyboard_send_buffer_queue, &kb.send_buff,
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <keyboardProcessScanBuff+0xe0>)
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000890:	490d      	ldr	r1, [pc, #52]	; (80008c8 <keyboardProcessScanBuff+0xdc>)
 8000892:	f008 fd5f 	bl	8009354 <xQueueGenericSend>
					portMAX_DELAY);

		xSemaphoreGive(kb.buff_lock);
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 8000898:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800089a:	2300      	movs	r3, #0
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	f008 fd58 	bl	8009354 <xQueueGenericSend>
		return 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	e00a      	b.n	80008be <keyboardProcessScanBuff+0xd2>
	}
	return 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e008      	b.n	80008be <keyboardProcessScanBuff+0xd2>
			goto queue_no_init;
 80008ac:	bf00      	nop
	queue_no_init:
	xSemaphoreGive(kb.buff_lock);
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <keyboardProcessScanBuff+0xd8>)
 80008b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80008b2:	2300      	movs	r3, #0
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	f008 fd4c 	bl	8009354 <xQueueGenericSend>
	return 1;
 80008bc:	2301      	movs	r3, #1
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000000 	.word	0x20000000
 80008c8:	2000003d 	.word	0x2000003d
 80008cc:	20000a7c 	.word	0x20000a7c

080008d0 <keyboardScanTask>:

void keyboardScanTask(void *args) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80008d8:	f009 fdbe 	bl	800a458 <xTaskGetTickCount>
 80008dc:	4603      	mov	r3, r0
 80008de:	60bb      	str	r3, [r7, #8]
	TickType_t xPeriod = 10;
 80008e0:	230a      	movs	r3, #10
 80008e2:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {
		//HID TEST
		if (keyboardScanMatrix() == 0) /* if keys were pressed */
 80008e4:	f7ff fe90 	bl	8000608 <keyboardScanMatrix>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d101      	bne.n	80008f2 <keyboardScanTask+0x22>
			keyboardProcessScanBuff(); /* convert row-col to actual keys */
 80008ee:	f7ff ff7d 	bl	80007ec <keyboardProcessScanBuff>

		xPeriod = SCAN_PERIOD - (xLastWakeTime - xTaskGetTickCount());
 80008f2:	f009 fdb1 	bl	800a458 <xTaskGetTickCount>
 80008f6:	4602      	mov	r2, r0
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	3314      	adds	r3, #20
 80008fe:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	68f9      	ldr	r1, [r7, #12]
 8000906:	4618      	mov	r0, r3
 8000908:	f009 fbda 	bl	800a0c0 <vTaskDelayUntil>
		if (keyboardScanMatrix() == 0) /* if keys were pressed */
 800090c:	e7ea      	b.n	80008e4 <keyboardScanTask+0x14>
	...

08000910 <keyboardInitLEDGPIOs>:
	}
}

static inline void keyboardInitLEDGPIOs(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = CAPS_STATUS_PIN;
 8000916:	f44f 7300 	mov.w	r3, #512	; 0x200
 800091a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(CAPS_STATUS_PORT, &GPIO_InitStruct);
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	4619      	mov	r1, r3
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <keyboardInitLEDGPIOs+0x64>)
 800092e:	f001 fed5 	bl	80026dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = CLI_STATUS_PIN;
 8000932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000936:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(CLI_STATUS_PORT, &GPIO_InitStruct);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	4619      	mov	r1, r3
 8000948:	480a      	ldr	r0, [pc, #40]	; (8000974 <keyboardInitLEDGPIOs+0x64>)
 800094a:	f001 fec7 	bl	80026dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = FUNC_STATUS_PIN;
 800094e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000952:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(FUNC_STATUS_PORT, &GPIO_InitStruct);
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <keyboardInitLEDGPIOs+0x64>)
 8000966:	f001 feb9 	bl	80026dc <HAL_GPIO_Init>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40020800 	.word	0x40020800

08000978 <keyboardInitRowGPIOs>:

static inline void keyboardInitRowGPIOs(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	//INIT ROWS - input
	for (unsigned char i = 0; i < KEYBOARD_ROWS; i++) {
 800097e:	2300      	movs	r3, #0
 8000980:	75fb      	strb	r3, [r7, #23]
 8000982:	e017      	b.n	80009b4 <keyboardInitRowGPIOs+0x3c>
		GPIO_InitStruct.Pin = kb.row_pins[i];
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <keyboardInitRowGPIOs+0x4c>)
 8000988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098c:	603b      	str	r3, [r7, #0]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000992:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000994:	2302      	movs	r3, #2
 8000996:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(kb.row_ports[i], &GPIO_InitStruct);
 8000998:	7dfb      	ldrb	r3, [r7, #23]
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <keyboardInitRowGPIOs+0x4c>)
 800099c:	3302      	adds	r3, #2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	463a      	mov	r2, r7
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fe97 	bl	80026dc <HAL_GPIO_Init>
	for (unsigned char i = 0; i < KEYBOARD_ROWS; i++) {
 80009ae:	7dfb      	ldrb	r3, [r7, #23]
 80009b0:	3301      	adds	r3, #1
 80009b2:	75fb      	strb	r3, [r7, #23]
 80009b4:	7dfb      	ldrb	r3, [r7, #23]
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	d9e4      	bls.n	8000984 <keyboardInitRowGPIOs+0xc>
	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000

080009c8 <keyboardInitBuffers>:

static inline void keyboardInitBuffers(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	keyboard_send_buffer_queue = xQueueCreate(20, sizeof(send_buffer_t));
 80009cc:	2200      	movs	r2, #0
 80009ce:	2117      	movs	r1, #23
 80009d0:	2014      	movs	r0, #20
 80009d2:	f008 fc33 	bl	800923c <xQueueGenericCreate>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <keyboardInitBuffers+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
	kb.buff_lock = xSemaphoreCreateMutex();
 80009dc:	2001      	movs	r0, #1
 80009de:	f008 fca0 	bl	8009322 <xQueueCreateMutex>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a02      	ldr	r2, [pc, #8]	; (80009f0 <keyboardInitBuffers+0x28>)
 80009e6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000a7c 	.word	0x20000a7c
 80009f0:	20000000 	.word	0x20000000

080009f4 <keyboardInitCaps>:

static inline void keyboardInitCaps(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af02      	add	r7, sp, #8
	kb.caps_debounce_timer = xTimerCreate("Cursor Timer",
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <keyboardInitCaps+0x40>)
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	2200      	movs	r2, #0
 8000a02:	21c8      	movs	r1, #200	; 0xc8
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <keyboardInitCaps+0x44>)
 8000a06:	f00a facb 	bl	800afa0 <xTimerCreate>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <keyboardInitCaps+0x48>)
 8000a0e:	6593      	str	r3, [r2, #88]	; 0x58
	TOGGLE_DELAY, 0, NULL, keyboardCapsDebounceCallback);

	kb.caps_lock = xSemaphoreCreateBinary();
 8000a10:	2203      	movs	r2, #3
 8000a12:	2100      	movs	r1, #0
 8000a14:	2001      	movs	r0, #1
 8000a16:	f008 fc11 	bl	800923c <xQueueGenericCreate>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <keyboardInitCaps+0x48>)
 8000a1e:	65d3      	str	r3, [r2, #92]	; 0x5c
	xSemaphoreGive(kb.caps_lock);
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <keyboardInitCaps+0x48>)
 8000a22:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8000a24:	2300      	movs	r3, #0
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	f008 fc93 	bl	8009354 <xQueueGenericSend>
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	08000575 	.word	0x08000575
 8000a38:	0800c93c 	.word	0x0800c93c
 8000a3c:	20000000 	.word	0x20000000

08000a40 <keyboardInit>:

signed char keyboardInit(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af02      	add	r7, sp, #8

	// LED Output GPIOs
	keyboardInitLEDGPIOs();
 8000a46:	f7ff ff63 	bl	8000910 <keyboardInitLEDGPIOs>
	// Input row GPIOs
	keyboardInitRowGPIOs();
 8000a4a:	f7ff ff95 	bl	8000978 <keyboardInitRowGPIOs>

	keyboardInitBuffers();
 8000a4e:	f7ff ffbb 	bl	80009c8 <keyboardInitBuffers>
	// Input timer and semaphore for caps lock
	keyboardInitCaps();
 8000a52:	f7ff ffcf 	bl	80009f4 <keyboardInitCaps>

	// Scan task
	xTaskCreate(keyboardScanTask, "keyboard_scan_task", 128, NULL, 1,
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <keyboardInit+0x34>)
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	4905      	ldr	r1, [pc, #20]	; (8000a78 <keyboardInit+0x38>)
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <keyboardInit+0x3c>)
 8000a66:	f009 f9de 	bl	8009e26 <xTaskCreate>
			&kb.scan_task_handle);

	return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000060 	.word	0x20000060
 8000a78:	0800c94c 	.word	0x0800c94c
 8000a7c:	080008d1 	.word	0x080008d1

08000a80 <__ll_add>:
	list->next = list;
	list->prev = list;
}

static inline void __ll_add(struct list_item *new_item, struct list_item *prev,
		struct list_item *next) {
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]

	new_item->next = next;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
	new_item->prev = prev;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	605a      	str	r2, [r3, #4]
	prev->next = new_item;
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	601a      	str	r2, [r3, #0]
	next->prev = new_item;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	605a      	str	r2, [r3, #4]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <ll_add>:

// Add new_item after prev
static inline void ll_add(struct list_item *new_item, struct list_item *prev) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
	__ll_add(new_item, prev, prev->next);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	6839      	ldr	r1, [r7, #0]
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffdc 	bl	8000a80 <__ll_add>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <keymapAddLayer>:

	unsigned char layer_count;
	keymap_layer_t *current_layer;
} keymap_layer_list = { 0 };

static inline void keymapAddLayer(keymap_layer_t layer) {
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	f107 0c08 	add.w	ip, r7, #8
 8000ada:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ll_add(&layer.list, &keymap_layer_list.list);
 8000ade:	4909      	ldr	r1, [pc, #36]	; (8000b04 <keymapAddLayer+0x34>)
 8000ae0:	f107 0008 	add.w	r0, r7, #8
 8000ae4:	f7ff ffe4 	bl	8000ab0 <ll_add>

	if (keymap_layer_list.current_layer == NULL)
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <keymapAddLayer+0x34>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d103      	bne.n	8000af8 <keymapAddLayer+0x28>
		keymap_layer_list.current_layer = &layer;
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <keymapAddLayer+0x34>)
 8000af2:	f107 0208 	add.w	r2, r7, #8
 8000af6:	60da      	str	r2, [r3, #12]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr
 8000b04:	20000a84 	.word	0x20000a84

08000b08 <keymapAddLayers>:

static inline void keymapAddLayers(void) {
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b097      	sub	sp, #92	; 0x5c
 8000b0c:	af14      	add	r7, sp, #80	; 0x50
	for (int i = 0; i < no_default_keymap_layers; i++) {
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	e019      	b.n	8000b48 <keymapAddLayers+0x40>
		keymapAddLayer(default_keymap_layers[i]);
 8000b14:	4a12      	ldr	r2, [pc, #72]	; (8000b60 <keymapAddLayers+0x58>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	215c      	movs	r1, #92	; 0x5c
 8000b1a:	fb01 f303 	mul.w	r3, r1, r3
 8000b1e:	18d4      	adds	r4, r2, r3
 8000b20:	4668      	mov	r0, sp
 8000b22:	f104 0310 	add.w	r3, r4, #16
 8000b26:	224c      	movs	r2, #76	; 0x4c
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f00b fe23 	bl	800c774 <memcpy>
 8000b2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b32:	f7ff ffcd 	bl	8000ad0 <keymapAddLayer>
		keymap_layer_list.layer_count++;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <keymapAddLayers+0x5c>)
 8000b38:	7a1b      	ldrb	r3, [r3, #8]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <keymapAddLayers+0x5c>)
 8000b40:	721a      	strb	r2, [r3, #8]
	for (int i = 0; i < no_default_keymap_layers; i++) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3301      	adds	r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <keymapAddLayers+0x60>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4293      	cmp	r3, r2
 8000b52:	dbdf      	blt.n	8000b14 <keymapAddLayers+0xc>
	}
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000068 	.word	0x20000068
 8000b64:	20000a84 	.word	0x20000a84
 8000b68:	20000064 	.word	0x20000064

08000b6c <keymapInit>:

void keymapInit(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	keymapAddLayers();
 8000b70:	f7ff ffca 	bl	8000b08 <keymapAddLayers>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <keymapGetKeyCode>:

void keymapSetKeyCode(unsigned char row, unsigned char col, unsigned char val) {
	keymap_layer_list.current_layer->grid[row][col] = val;
}

unsigned char keymapGetKeyCode(unsigned char row, unsigned char col) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
	return keymap_layer_list.current_layer->grid[row][col];
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <keymapGetKeyCode+0x34>)
 8000b8a:	68d8      	ldr	r0, [r3, #12]
 8000b8c:	79fa      	ldrb	r2, [r7, #7]
 8000b8e:	79b9      	ldrb	r1, [r7, #6]
 8000b90:	4613      	mov	r3, r2
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	1a9b      	subs	r3, r3, r2
 8000b96:	4403      	add	r3, r0
 8000b98:	440b      	add	r3, r1
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	781b      	ldrb	r3, [r3, #0]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000a84 	.word	0x20000a84

08000bb0 <lookupCheckStateChange>:

unsigned char lookup_get_mod(unsigned char character) {
	return lookup_sc[character].mod;
}

unsigned char lookupCheckStateChange(unsigned char sc) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	//TODO
	switch (sc) {
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	3bfb      	subs	r3, #251	; 0xfb
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d80c      	bhi.n	8000bdc <lookupCheckStateChange+0x2c>
 8000bc2:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <lookupCheckStateChange+0x18>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	08000bdd 	.word	0x08000bdd
 8000bcc:	08000bdd 	.word	0x08000bdd
 8000bd0:	08000bdd 	.word	0x08000bdd
 8000bd4:	08000bdd 	.word	0x08000bdd
 8000bd8:	08000bdd 	.word	0x08000bdd
	case SC(MACRO_SET_FUNCTION):
		break;
	case SC(CLI_FUNCTION):
		break;
	default:
		break;
 8000bdc:	bf00      	nop
	}
	return 0;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <lookupCaps>:

//look if the key is a key like caps lock
unsigned char lookupCaps(unsigned char sc) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
	switch (sc) {
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b82      	cmp	r3, #130	; 0x82
 8000bfa:	d101      	bne.n	8000c00 <lookupCaps+0x14>
	case SC(LOCKING_CAPS_LOCK):
		return 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e001      	b.n	8000c04 <lookupCaps+0x18>
	default:
		break;
 8000c00:	bf00      	nop
	}
	return 0;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <XferHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void XferHalfCpltCallback(struct __DMA_HandleTypeDef *hdma) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <XferCpltCallback>:
void XferCpltCallback(struct __DMA_HandleTypeDef *hdma) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fe55 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f839 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f000 f9c7 	bl	8000fd8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000c4a:	f000 f8f1 	bl	8000e30 <MX_I2C2_Init>
  MX_DMA_Init();
 8000c4e:	f000 f9a3 	bl	8000f98 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c52:	f000 f92d 	bl	8000eb0 <MX_TIM2_Init>
  MX_ADC3_Init();
 8000c56:	f000 f899 	bl	8000d8c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

	// Register DMA callbacks
	HAL_DMA_RegisterCallback(&hdma_tim2_ch2_ch4, HAL_DMA_XFER_CPLT_CB_ID,
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <main+0x6c>)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <main+0x70>)
 8000c60:	f001 fc36 	bl	80024d0 <HAL_DMA_RegisterCallback>
			XferCpltCallback);
	HAL_DMA_RegisterCallback(&hdma_tim2_ch2_ch4, HAL_DMA_XFER_HALFCPLT_CB_ID,
 8000c64:	4a11      	ldr	r2, [pc, #68]	; (8000cac <main+0x74>)
 8000c66:	2101      	movs	r1, #1
 8000c68:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <main+0x70>)
 8000c6a:	f001 fc31 	bl	80024d0 <HAL_DMA_RegisterCallback>
			XferHalfCpltCallback);

	keyboardInit();
 8000c6e:	f7ff fee7 	bl	8000a40 <keyboardInit>
	sendInit();
 8000c72:	f000 fbeb 	bl	800144c <sendInit>
	keymapInit();
 8000c76:	f7ff ff79 	bl	8000b6c <keymapInit>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <main+0x78>)
 8000c7c:	1d3c      	adds	r4, r7, #4
 8000c7e:	461d      	mov	r5, r3
 8000c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f008 f8df 	bl	8008e54 <osThreadCreate>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <main+0x7c>)
 8000c9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c9c:	f008 f8d3 	bl	8008e46 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000ca0:	e7fe      	b.n	8000ca0 <main+0x68>
 8000ca2:	bf00      	nop
 8000ca4:	08000c25 	.word	0x08000c25
 8000ca8:	20000b78 	.word	0x20000b78
 8000cac:	08000c11 	.word	0x08000c11
 8000cb0:	0800c980 	.word	0x0800c980
 8000cb4:	20000bd8 	.word	0x20000bd8

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b094      	sub	sp, #80	; 0x50
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	2230      	movs	r2, #48	; 0x30
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f00b fd62 	bl	800c790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <SystemClock_Config+0xcc>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <SystemClock_Config+0xcc>)
 8000ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cea:	6413      	str	r3, [r2, #64]	; 0x40
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <SystemClock_Config+0xcc>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <SystemClock_Config+0xd0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <SystemClock_Config+0xd0>)
 8000d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <SystemClock_Config+0xd0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d14:	2301      	movs	r3, #1
 8000d16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d2c:	23a8      	movs	r3, #168	; 0xa8
 8000d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d30:	2302      	movs	r3, #2
 8000d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d34:	2307      	movs	r3, #7
 8000d36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d38:	f107 0320 	add.w	r3, r7, #32
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 fae9 	bl	8004314 <HAL_RCC_OscConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d48:	f000 faca 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d50:	2302      	movs	r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2105      	movs	r1, #5
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fd4a 	bl	8004804 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d76:	f000 fab3 	bl	80012e0 <Error_Handler>
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	3750      	adds	r7, #80	; 0x50
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000da0:	4a21      	ldr	r2, [pc, #132]	; (8000e28 <MX_ADC3_Init+0x9c>)
 8000da2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000da6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000daa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <MX_ADC3_Init+0xa0>)
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000dee:	f000 fde3 	bl	80019b8 <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 fa72 	bl	80012e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_ADC3_Init+0x98>)
 8000e0e:	f000 fe17 	bl	8001a40 <HAL_ADC_ConfigChannel>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e18:	f000 fa62 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000a94 	.word	0x20000a94
 8000e28:	40012200 	.word	0x40012200
 8000e2c:	0f000001 	.word	0x0f000001

08000e30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e36:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <MX_I2C2_Init+0x78>)
 8000e38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <MX_I2C2_Init+0x7c>)
 8000e3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e6e:	f001 fe2d 	bl	8002acc <HAL_I2C_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e78:	f000 fa32 	bl	80012e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e80:	f001 ff68 	bl	8002d54 <HAL_I2CEx_ConfigAnalogFilter>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000e8a:	f000 fa29 	bl	80012e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_I2C2_Init+0x74>)
 8000e92:	f001 ff9b 	bl	8002dcc <HAL_I2CEx_ConfigDigitalFilter>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000e9c:	f000 fa20 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000adc 	.word	0x20000adc
 8000ea8:	40005800 	.word	0x40005800
 8000eac:	000186a0 	.word	0x000186a0

08000eb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08e      	sub	sp, #56	; 0x38
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eee:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 204;
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000ef6:	22cc      	movs	r2, #204	; 0xcc
 8000ef8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f06:	4823      	ldr	r0, [pc, #140]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000f08:	f003 feba 	bl	8004c80 <HAL_TIM_Base_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000f12:	f000 f9e5 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f20:	4619      	mov	r1, r3
 8000f22:	481c      	ldr	r0, [pc, #112]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000f24:	f004 f990 	bl	8005248 <HAL_TIM_ConfigClockSource>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000f2e:	f000 f9d7 	bl	80012e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f32:	4818      	ldr	r0, [pc, #96]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000f34:	f003 ff64 	bl	8004e00 <HAL_TIM_PWM_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000f3e:	f000 f9cf 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4810      	ldr	r0, [pc, #64]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000f52:	f004 fd53 	bl	80059fc <HAL_TIMEx_MasterConfigSynchronization>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000f5c:	f000 f9c0 	bl	80012e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f60:	2360      	movs	r3, #96	; 0x60
 8000f62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	220c      	movs	r2, #12
 8000f74:	4619      	mov	r1, r3
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000f78:	f004 f8a4 	bl	80050c4 <HAL_TIM_PWM_ConfigChannel>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000f82:	f000 f9ad 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <MX_TIM2_Init+0xe4>)
 8000f88:	f000 fbb0 	bl	80016ec <HAL_TIM_MspPostInit>

}
 8000f8c:	bf00      	nop
 8000f8e:	3738      	adds	r7, #56	; 0x38
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000b30 	.word	0x20000b30

08000f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_DMA_Init+0x3c>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <MX_DMA_Init+0x3c>)
 8000fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_DMA_Init+0x3c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	2011      	movs	r0, #17
 8000fc0:	f001 f824 	bl	800200c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fc4:	2011      	movs	r0, #17
 8000fc6:	f001 f83d 	bl	8002044 <HAL_NVIC_EnableIRQ>

}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	; 0x38
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
 8000ff2:	4ba5      	ldr	r3, [pc, #660]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4aa4      	ldr	r2, [pc, #656]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4ba2      	ldr	r3, [pc, #648]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	623b      	str	r3, [r7, #32]
 8001008:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	4b9e      	ldr	r3, [pc, #632]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a9d      	ldr	r2, [pc, #628]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b9b      	ldr	r3, [pc, #620]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	4b97      	ldr	r3, [pc, #604]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a96      	ldr	r2, [pc, #600]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b94      	ldr	r3, [pc, #592]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	4b90      	ldr	r3, [pc, #576]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a8f      	ldr	r2, [pc, #572]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b8d      	ldr	r3, [pc, #564]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b89      	ldr	r3, [pc, #548]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a88      	ldr	r2, [pc, #544]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b86      	ldr	r3, [pc, #536]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b82      	ldr	r3, [pc, #520]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a81      	ldr	r2, [pc, #516]	; (8001288 <MX_GPIO_Init+0x2b0>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b7b      	ldr	r3, [pc, #492]	; (8001288 <MX_GPIO_Init+0x2b0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a7a      	ldr	r2, [pc, #488]	; (8001288 <MX_GPIO_Init+0x2b0>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b78      	ldr	r3, [pc, #480]	; (8001288 <MX_GPIO_Init+0x2b0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b74      	ldr	r3, [pc, #464]	; (8001288 <MX_GPIO_Init+0x2b0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a73      	ldr	r2, [pc, #460]	; (8001288 <MX_GPIO_Init+0x2b0>)
 80010bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b71      	ldr	r3, [pc, #452]	; (8001288 <MX_GPIO_Init+0x2b0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL0_Pin|ROW0_Pin|ROW1_Pin|ROW2_Pin
 80010ce:	2200      	movs	r2, #0
 80010d0:	f24d 4108 	movw	r1, #54280	; 0xd408
 80010d4:	486d      	ldr	r0, [pc, #436]	; (800128c <MX_GPIO_Init+0x2b4>)
 80010d6:	f001 fcc5 	bl	8002a64 <HAL_GPIO_WritePin>
                          |ROW3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|LD3_Pin|GPIO_PIN_15|LD2_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f24d 0180 	movw	r1, #53376	; 0xd080
 80010e0:	486b      	ldr	r0, [pc, #428]	; (8001290 <MX_GPIO_Init+0x2b8>)
 80010e2:	f001 fcbf 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2140      	movs	r1, #64	; 0x40
 80010ea:	486a      	ldr	r0, [pc, #424]	; (8001294 <MX_GPIO_Init+0x2bc>)
 80010ec:	f001 fcba 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f6:	4868      	ldr	r0, [pc, #416]	; (8001298 <MX_GPIO_Init+0x2c0>)
 80010f8:	f001 fcb4 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL0_Pin ROW0_Pin ROW1_Pin ROW2_Pin
                           ROW3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|ROW0_Pin|ROW1_Pin|ROW2_Pin
 80010fc:	f24d 4308 	movw	r3, #54280	; 0xd408
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	485d      	ldr	r0, [pc, #372]	; (800128c <MX_GPIO_Init+0x2b4>)
 8001116:	f001 fae1 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin;
 800111a:	2370      	movs	r3, #112	; 0x70
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001122:	2302      	movs	r3, #2
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112a:	4619      	mov	r1, r3
 800112c:	4857      	ldr	r0, [pc, #348]	; (800128c <MX_GPIO_Init+0x2b4>)
 800112e:	f001 fad5 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001138:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001146:	4619      	mov	r1, r3
 8001148:	4854      	ldr	r0, [pc, #336]	; (800129c <MX_GPIO_Init+0x2c4>)
 800114a:	f001 fac7 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_SWITCH_Pin */
  GPIO_InitStruct.Pin = BOOT_SWITCH_Pin;
 800114e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4619      	mov	r1, r3
 8001162:	484f      	ldr	r0, [pc, #316]	; (80012a0 <MX_GPIO_Init+0x2c8>)
 8001164:	f001 faba 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001168:	2332      	movs	r3, #50	; 0x32
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001178:	230b      	movs	r3, #11
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001180:	4619      	mov	r1, r3
 8001182:	4846      	ldr	r0, [pc, #280]	; (800129c <MX_GPIO_Init+0x2c4>)
 8001184:	f001 faaa 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 8001188:	2386      	movs	r3, #134	; 0x86
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001198:	230b      	movs	r3, #11
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	483d      	ldr	r0, [pc, #244]	; (8001298 <MX_GPIO_Init+0x2c0>)
 80011a4:	f001 fa9a 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 LD3_Pin PB15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|LD3_Pin|GPIO_PIN_15|LD2_Pin;
 80011a8:	f24d 0380 	movw	r3, #53376	; 0xd080
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4833      	ldr	r0, [pc, #204]	; (8001290 <MX_GPIO_Init+0x2b8>)
 80011c2:	f001 fa8b 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80011c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011d8:	230b      	movs	r3, #11
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	482b      	ldr	r0, [pc, #172]	; (8001290 <MX_GPIO_Init+0x2b8>)
 80011e4:	f001 fa7a 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011fa:	2307      	movs	r3, #7
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	4827      	ldr	r0, [pc, #156]	; (80012a4 <MX_GPIO_Init+0x2cc>)
 8001206:	f001 fa69 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800120a:	2340      	movs	r3, #64	; 0x40
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120e:	2301      	movs	r3, #1
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121e:	4619      	mov	r1, r3
 8001220:	481c      	ldr	r0, [pc, #112]	; (8001294 <MX_GPIO_Init+0x2bc>)
 8001222:	f001 fa5b 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	4816      	ldr	r0, [pc, #88]	; (8001294 <MX_GPIO_Init+0x2bc>)
 800123a:	f001 fa4f 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800123e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	4810      	ldr	r0, [pc, #64]	; (8001298 <MX_GPIO_Init+0x2c0>)
 8001258:	f001 fa40 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800125c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800126e:	230b      	movs	r3, #11
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001276:	4619      	mov	r1, r3
 8001278:	4806      	ldr	r0, [pc, #24]	; (8001294 <MX_GPIO_Init+0x2bc>)
 800127a:	f001 fa2f 	bl	80026dc <HAL_GPIO_Init>

}
 800127e:	bf00      	nop
 8001280:	3738      	adds	r7, #56	; 0x38
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40021000 	.word	0x40021000
 8001290:	40020400 	.word	0x40020400
 8001294:	40021800 	.word	0x40021800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020800 	.word	0x40020800
 80012a0:	40021400 	.word	0x40021400
 80012a4:	40020c00 	.word	0x40020c00

080012a8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80012b0:	f00a fdf4 	bl	800be9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f007 fe19 	bl	8008eec <osDelay>
 80012ba:	e7fb      	b.n	80012b4 <StartDefaultTask+0xc>

080012bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ce:	f000 fb2f 	bl	8001930 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
//
  /* USER CODE END Callback 1 */
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40000800 	.word	0x40000800

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <sendGetNewBuffer>:

TaskHandle_t send_task_handle;
SemaphoreHandle_t send_buffer_lock;
send_buffer_t send_buffer;

unsigned char sendGetNewBuffer() {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	return xQueueReceive(keyboard_send_buffer_queue,
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <sendGetNewBuffer+0x1c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2200      	movs	r2, #0
 80012f6:	4904      	ldr	r1, [pc, #16]	; (8001308 <sendGetNewBuffer+0x1c>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f008 f9c5 	bl	8009688 <xQueueReceive>
 80012fe:	4603      	mov	r3, r0
 8001300:	b2db      	uxtb	r3, r3
			&keyboard_send_buffer_queue, (TickType_t) 0);
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000a7c 	.word	0x20000a7c

0800130c <sendPrepareSixKeyBuffer>:

keyboardHID_t sendPrepareSixKeyBuffer() {
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	keyboardHID_t hid_buff = { .id = 1 };
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	2301      	movs	r3, #1
 8001320:	733b      	strb	r3, [r7, #12]
	unsigned char *key_buff = &hid_buff.key1;
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	3302      	adds	r3, #2
 8001328:	617b      	str	r3, [r7, #20]

	hid_buff.modifiers = send_buffer.mod_buff;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <sendPrepareSixKeyBuffer+0x74>)
 800132c:	7d5b      	ldrb	r3, [r3, #21]
 800132e:	737b      	strb	r3, [r7, #13]

	//TODO check this
	// While send_buff has keys and key_buff is still pointing to one of the 6 output keys
	for (; send_buffer.key_buff.count && key_buff <= &(hid_buff.key6);
 8001330:	e00f      	b.n	8001352 <sendPrepareSixKeyBuffer+0x46>
			send_buffer.key_buff.count--) {
		*key_buff = BUFFER_GET_END(send_buffer.key_buff);
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <sendPrepareSixKeyBuffer+0x74>)
 8001334:	7d1b      	ldrb	r3, [r3, #20]
 8001336:	3b01      	subs	r3, #1
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <sendPrepareSixKeyBuffer+0x74>)
 800133a:	5cd2      	ldrb	r2, [r2, r3]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	701a      	strb	r2, [r3, #0]
		key_buff += sizeof(unsigned char);
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
			send_buffer.key_buff.count--) {
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <sendPrepareSixKeyBuffer+0x74>)
 8001348:	7d1b      	ldrb	r3, [r3, #20]
 800134a:	3b01      	subs	r3, #1
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <sendPrepareSixKeyBuffer+0x74>)
 8001350:	751a      	strb	r2, [r3, #20]
	for (; send_buffer.key_buff.count && key_buff <= &(hid_buff.key6);
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <sendPrepareSixKeyBuffer+0x74>)
 8001354:	7d1b      	ldrb	r3, [r3, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <sendPrepareSixKeyBuffer+0x5a>
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	3307      	adds	r3, #7
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	429a      	cmp	r2, r3
 8001364:	d9e5      	bls.n	8001332 <sendPrepareSixKeyBuffer+0x26>
	}

	return hid_buff;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	461a      	mov	r2, r3
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	cb03      	ldmia	r3!, {r0, r1}
 8001370:	6010      	str	r0, [r2, #0]
 8001372:	6051      	str	r1, [r2, #4]
}
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	371c      	adds	r7, #28
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20000be4 	.word	0x20000be4

08001384 <sendSendSixKeyBuffer>:

void sendSendSixKeyBuffer(keyboardHID_t hid_buff) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	463b      	mov	r3, r7
 800138c:	e883 0003 	stmia.w	r3, {r0, r1}
	while (USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &hid_buff,
 8001390:	e002      	b.n	8001398 <sendSendSixKeyBuffer+0x14>
			sizeof(keyboardHID_t)) == USBD_FAIL)
		vTaskDelay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f008 ff12 	bl	800a1bc <vTaskDelay>
	while (USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &hid_buff,
 8001398:	463b      	mov	r3, r7
 800139a:	2208      	movs	r2, #8
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <sendSendSixKeyBuffer+0x30>)
 80013a0:	f006 f9c0 	bl	8007724 <USBD_HID_SendReport>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d0f3      	beq.n	8001392 <sendSendSixKeyBuffer+0xe>
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20004b84 	.word	0x20004b84

080013b8 <sendTask>:

void sendTask(void *arguments) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

	six_key_buffer_t tmp_buff = { 0 };
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	f8c3 2003 	str.w	r2, [r3, #3]

	while (1) {
		if (keyboard_send_buffer_queue)
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <sendTask+0x88>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0fb      	beq.n	80013cc <sendTask+0x14>
			if (xSemaphoreTake(send_buffer_lock, (TickType_t) 0) == pdTRUE) {
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <sendTask+0x8c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f008 fa34 	bl	8009848 <xQueueSemaphoreTake>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d1f2      	bne.n	80013cc <sendTask+0x14>
				if (sendGetNewBuffer()) // If we have a buffer
 80013e6:	f7ff ff81 	bl	80012ec <sendGetNewBuffer>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01e      	beq.n	800142e <sendTask+0x76>
					while (send_buffer.key_buff.count || send_buffer.med_buff
 80013f0:	e011      	b.n	8001416 <sendTask+0x5e>
							|| send_buffer.mod_buff) {
						sendSendSixKeyBuffer(sendPrepareSixKeyBuffer());
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff88 	bl	800130c <sendPrepareSixKeyBuffer>
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001404:	f7ff ffbe 	bl	8001384 <sendSendSixKeyBuffer>

						// Clear buffer for next itteration
						memset(&tmp_buff, 0, sizeof(six_key_buffer_t));
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	2207      	movs	r2, #7
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f00b f9bd 	bl	800c790 <memset>
					while (send_buffer.key_buff.count || send_buffer.med_buff
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <sendTask+0x90>)
 8001418:	7d1b      	ldrb	r3, [r3, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1e9      	bne.n	80013f2 <sendTask+0x3a>
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <sendTask+0x90>)
 8001420:	7d9b      	ldrb	r3, [r3, #22]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1e5      	bne.n	80013f2 <sendTask+0x3a>
							|| send_buffer.mod_buff) {
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <sendTask+0x90>)
 8001428:	7d5b      	ldrb	r3, [r3, #21]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1e1      	bne.n	80013f2 <sendTask+0x3a>
					}

				xSemaphoreGive(send_buffer_lock);
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <sendTask+0x8c>)
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	2300      	movs	r3, #0
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	f007 ff8c 	bl	8009354 <xQueueGenericSend>
		if (keyboard_send_buffer_queue)
 800143c:	e7c6      	b.n	80013cc <sendTask+0x14>
 800143e:	bf00      	nop
 8001440:	20000a7c 	.word	0x20000a7c
 8001444:	20000be0 	.word	0x20000be0
 8001448:	20000be4 	.word	0x20000be4

0800144c <sendInit>:
			}
	}
}

void sendInit() {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af02      	add	r7, sp, #8
	send_buffer_lock = xSemaphoreCreateMutex();
 8001452:	2001      	movs	r0, #1
 8001454:	f007 ff65 	bl	8009322 <xQueueCreateMutex>
 8001458:	4603      	mov	r3, r0
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <sendInit+0x2c>)
 800145c:	6013      	str	r3, [r2, #0]

	xTaskCreate(sendTask, "send_task", 128, NULL, 1, &send_task_handle);
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <sendInit+0x30>)
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	2301      	movs	r3, #1
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	4905      	ldr	r1, [pc, #20]	; (8001480 <sendInit+0x34>)
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <sendInit+0x38>)
 800146e:	f008 fcda 	bl	8009e26 <xTaskCreate>

}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000be0 	.word	0x20000be0
 800147c:	20000bdc 	.word	0x20000bdc
 8001480:	0800c99c 	.word	0x0800c99c
 8001484:	080013b9 	.word	0x080013b9

08001488 <SN54HC595_out_bytes>:

unsigned char SN54HC595_get_dev_count(void) {
	return shift_dev.dev_count;
}

unsigned char SN54HC595_out_bytes(unsigned char *data, unsigned char byte_count) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
	if (byte_count != shift_dev.dev_count)
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <SN54HC595_out_bytes+0x3c>)
 8001496:	791b      	ldrb	r3, [r3, #4]
 8001498:	78fa      	ldrb	r2, [r7, #3]
 800149a:	429a      	cmp	r2, r3
 800149c:	d001      	beq.n	80014a2 <SN54HC595_out_bytes+0x1a>
		return 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	e00b      	b.n	80014ba <SN54HC595_out_bytes+0x32>
	shift_dev.set_data(&shift_dev, data);
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <SN54HC595_out_bytes+0x3c>)
 80014a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <SN54HC595_out_bytes+0x3c>)
 80014aa:	4798      	blx	r3
	shift_dev.output(&shift_dev, byte_count);
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SN54HC595_out_bytes+0x3c>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4803      	ldr	r0, [pc, #12]	; (80014c4 <SN54HC595_out_bytes+0x3c>)
 80014b6:	4798      	blx	r3

	return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000120 	.word	0x20000120

080014c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_MspInit+0x54>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_MspInit+0x54>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	; 0x44
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_MspInit+0x54>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <HAL_MspInit+0x54>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_MspInit+0x54>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_MspInit+0x54>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	210f      	movs	r1, #15
 800150a:	f06f 0001 	mvn.w	r0, #1
 800150e:	f000 fd7d 	bl	800200c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_ADC_MspInit+0x7c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d127      	bne.n	8001592 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_ADC_MspInit+0x80>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <HAL_ADC_MspInit+0x80>)
 800154c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_ADC_MspInit+0x80>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_ADC_MspInit+0x80>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_ADC_MspInit+0x80>)
 8001568:	f043 0320 	orr.w	r3, r3, #32
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_ADC_MspInit+0x80>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    PF7     ------> ADC3_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157e:	2303      	movs	r3, #3
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_ADC_MspInit+0x84>)
 800158e:	f001 f8a5 	bl	80026dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40012200 	.word	0x40012200
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40021400 	.word	0x40021400

080015a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_I2C_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12b      	bne.n	8001622 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015d4:	f043 0320 	orr.w	r3, r3, #32
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0320 	and.w	r3, r3, #32
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e6:	2303      	movs	r3, #3
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ea:	2312      	movs	r3, #18
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015f6:	2304      	movs	r3, #4
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <HAL_I2C_MspInit+0x8c>)
 8001602:	f001 f86b 	bl	80026dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_I2C_MspInit+0x88>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_I2C_MspInit+0x88>)
 8001610:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_I2C_MspInit+0x88>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40005800 	.word	0x40005800
 8001630:	40023800 	.word	0x40023800
 8001634:	40021400 	.word	0x40021400

08001638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001648:	d145      	bne.n	80016d6 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <HAL_TIM_Base_MspInit+0xa8>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_TIM_Base_MspInit+0xa8>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 8001668:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <HAL_TIM_Base_MspInit+0xb0>)
 800166a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 800166e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001672:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 8001676:	2240      	movs	r2, #64	; 0x40
 8001678:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 8001682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001686:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 800168a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800168e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 8001692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001696:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 800169a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 80016a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016a6:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 80016b0:	f000 fcd6 	bl	8002060 <HAL_DMA_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80016ba:	f7ff fe11 	bl	80012e0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 80016ce:	631a      	str	r2, [r3, #48]	; 0x30
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_TIM_Base_MspInit+0xac>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	20000b78 	.word	0x20000b78
 80016e8:	400260a0 	.word	0x400260a0

080016ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170c:	d11d      	bne.n	800174a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_TIM_MspPostInit+0x68>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <HAL_TIM_MspPostInit+0x68>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_TIM_MspPostInit+0x68>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800172a:	2308      	movs	r3, #8
 800172c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800173a:	2301      	movs	r3, #1
 800173c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4619      	mov	r1, r3
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <HAL_TIM_MspPostInit+0x6c>)
 8001746:	f000 ffc9 	bl	80026dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000

0800175c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800176c:	2200      	movs	r2, #0
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	201e      	movs	r0, #30
 8001772:	f000 fc4b 	bl	800200c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001776:	201e      	movs	r0, #30
 8001778:	f000 fc64 	bl	8002044 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_InitTick+0xa4>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <HAL_InitTick+0xa4>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_InitTick+0xa4>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001798:	f107 0210 	add.w	r2, r7, #16
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fa3a 	bl	8004c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017a8:	f003 fa24 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 80017ac:	4603      	mov	r3, r0
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	4a13      	ldr	r2, [pc, #76]	; (8001804 <HAL_InitTick+0xa8>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0c9b      	lsrs	r3, r3, #18
 80017bc:	3b01      	subs	r3, #1
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_InitTick+0xac>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <HAL_InitTick+0xb0>)
 80017c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_InitTick+0xac>)
 80017c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017cc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80017ce:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_InitTick+0xac>)
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_InitTick+0xac>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_InitTick+0xac>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80017e0:	4809      	ldr	r0, [pc, #36]	; (8001808 <HAL_InitTick+0xac>)
 80017e2:	f003 fa4d 	bl	8004c80 <HAL_TIM_Base_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80017ec:	4806      	ldr	r0, [pc, #24]	; (8001808 <HAL_InitTick+0xac>)
 80017ee:	f003 fa97 	bl	8004d20 <HAL_TIM_Base_Start_IT>
 80017f2:	4603      	mov	r3, r0
 80017f4:	e000      	b.n	80017f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3730      	adds	r7, #48	; 0x30
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800
 8001804:	431bde83 	.word	0x431bde83
 8001808:	20000bfc 	.word	0x20000bfc
 800180c:	40000800 	.word	0x40000800

08001810 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <DMA1_Stream6_IRQHandler+0x10>)
 8001816:	f000 fcd1 	bl	80021bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000b78 	.word	0x20000b78

08001824 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM4_IRQHandler+0x10>)
 800182a:	f003 fb42 	bl	8004eb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000bfc 	.word	0x20000bfc

08001838 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <OTG_FS_IRQHandler+0x10>)
 800183e:	f001 fc54 	bl	80030ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20005060 	.word	0x20005060

0800184c <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <DMA2_Stream2_IRQHandler>:
#if defined(LED_ORANGE_PORT)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
#endif
}

void DMA2_Stream2_IRQHandler(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
#if defined(LED_BLUE_PORT)
	LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
#endif

	// Check the interrupt and clear flag
	HAL_DMA_IRQHandler(&dmaCC2);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <DMA2_Stream2_IRQHandler+0x10>)
 8001876:	f000 fca1 	bl	80021bc <HAL_DMA_IRQHandler>

#if defined(LED_BLUE_PORT)
	LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
#endif
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000c44 	.word	0x20000c44

08001884 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
#if defined(LED_ORANGE_PORT)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800188a:	f003 fb12 	bl	8004eb2 <HAL_TIM_IRQHandler>

#if defined(LED_ORANGE_PORT)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
#endif
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000ca4 	.word	0x20000ca4

08001898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800189e:	490e      	ldr	r1, [pc, #56]	; (80018d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b4:	4c0b      	ldr	r4, [pc, #44]	; (80018e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c2:	f7ff ffc3 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c6:	f00a ff2f 	bl	800c728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ca:	f7ff f9b5 	bl	8000c38 <main>
  bx  lr    
 80018ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 80018dc:	0800ca94 	.word	0x0800ca94
  ldr r2, =_sbss
 80018e0:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 80018e4:	20005588 	.word	0x20005588

080018e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_Init+0x40>)
 80018f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_Init+0x40>)
 8001902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_Init+0x40>)
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 fb6e 	bl	8001ff6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff ff1e 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001920:	f7ff fdd2 	bl	80014c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00

08001930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x20>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x24>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_IncTick+0x24>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	2000017c 	.word	0x2000017c
 8001954:	20000cec 	.word	0x20000cec

08001958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_GetTick+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000cec 	.word	0x20000cec

08001970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff ffee 	bl	8001958 <HAL_GetTick>
 800197c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001988:	d005      	beq.n	8001996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_Delay+0x44>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4413      	add	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001996:	bf00      	nop
 8001998:	f7ff ffde 	bl	8001958 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d8f7      	bhi.n	8001998 <HAL_Delay+0x28>
  {
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000017c 	.word	0x2000017c

080019b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e033      	b.n	8001a36 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fda2 	bl	8001520 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d118      	bne.n	8001a28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019fe:	f023 0302 	bic.w	r3, r3, #2
 8001a02:	f043 0202 	orr.w	r2, r3, #2
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f94a 	bl	8001ca4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f023 0303 	bic.w	r3, r3, #3
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
 8001a26:	e001      	b.n	8001a2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1c>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e113      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x244>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	d925      	bls.n	8001ab8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68d9      	ldr	r1, [r3, #12]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b1e      	subs	r3, #30
 8001a82:	2207      	movs	r2, #7
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	400a      	ands	r2, r1
 8001a90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68d9      	ldr	r1, [r3, #12]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4403      	add	r3, r0
 8001aaa:	3b1e      	subs	r3, #30
 8001aac:	409a      	lsls	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	e022      	b.n	8001afe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6919      	ldr	r1, [r3, #16]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	2207      	movs	r2, #7
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	400a      	ands	r2, r1
 8001ada:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6919      	ldr	r1, [r3, #16]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	4618      	mov	r0, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4403      	add	r3, r0
 8001af4:	409a      	lsls	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d824      	bhi.n	8001b50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	3b05      	subs	r3, #5
 8001b18:	221f      	movs	r2, #31
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	400a      	ands	r2, r1
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	4618      	mov	r0, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	3b05      	subs	r3, #5
 8001b42:	fa00 f203 	lsl.w	r2, r0, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b4e:	e04c      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d824      	bhi.n	8001ba2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	3b23      	subs	r3, #35	; 0x23
 8001b6a:	221f      	movs	r2, #31
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43da      	mvns	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	400a      	ands	r2, r1
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	3b23      	subs	r3, #35	; 0x23
 8001b94:	fa00 f203 	lsl.w	r2, r0, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba0:	e023      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b41      	subs	r3, #65	; 0x41
 8001bb4:	221f      	movs	r2, #31
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	3b41      	subs	r3, #65	; 0x41
 8001bde:	fa00 f203 	lsl.w	r2, r0, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bea:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_ADC_ConfigChannel+0x250>)
 8001bec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a28      	ldr	r2, [pc, #160]	; (8001c94 <HAL_ADC_ConfigChannel+0x254>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d10f      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x1d8>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b12      	cmp	r3, #18
 8001bfe:	d10b      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <HAL_ADC_ConfigChannel+0x254>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d12b      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x23a>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <HAL_ADC_ConfigChannel+0x258>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d003      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0x1f4>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b11      	cmp	r3, #17
 8001c32:	d122      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_ADC_ConfigChannel+0x258>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d111      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_ADC_ConfigChannel+0x25c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <HAL_ADC_ConfigChannel+0x260>)
 8001c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c60:	0c9a      	lsrs	r2, r3, #18
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f9      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40012300 	.word	0x40012300
 8001c94:	40012000 	.word	0x40012000
 8001c98:	10000012 	.word	0x10000012
 8001c9c:	20000174 	.word	0x20000174
 8001ca0:	431bde83 	.word	0x431bde83

08001ca4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cac:	4b79      	ldr	r3, [pc, #484]	; (8001e94 <ADC_Init+0x1f0>)
 8001cae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6859      	ldr	r1, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	021a      	lsls	r2, r3, #8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d36:	4a58      	ldr	r2, [pc, #352]	; (8001e98 <ADC_Init+0x1f4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d022      	beq.n	8001d82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6899      	ldr	r1, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	e00f      	b.n	8001da2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001da0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0202 	bic.w	r2, r2, #2
 8001db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6899      	ldr	r1, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7e1b      	ldrb	r3, [r3, #24]
 8001dbc:	005a      	lsls	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01b      	beq.n	8001e08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6859      	ldr	r1, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	035a      	lsls	r2, r3, #13
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	e007      	b.n	8001e18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	051a      	lsls	r2, r3, #20
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e5a:	025a      	lsls	r2, r3, #9
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	029a      	lsls	r2, r3, #10
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40012300 	.word	0x40012300
 8001e98:	0f000001 	.word	0x0f000001

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <__NVIC_EnableIRQ+0x38>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db0a      	blt.n	8001f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	490c      	ldr	r1, [pc, #48]	; (8001f88 <__NVIC_SetPriority+0x4c>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f64:	e00a      	b.n	8001f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4908      	ldr	r1, [pc, #32]	; (8001f8c <__NVIC_SetPriority+0x50>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3b04      	subs	r3, #4
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	440b      	add	r3, r1
 8001f7a:	761a      	strb	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f1c3 0307 	rsb	r3, r3, #7
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	bf28      	it	cs
 8001fae:	2304      	movcs	r3, #4
 8001fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d902      	bls.n	8001fc0 <NVIC_EncodePriority+0x30>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3b03      	subs	r3, #3
 8001fbe:	e000      	b.n	8001fc2 <NVIC_EncodePriority+0x32>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	43d9      	mvns	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	4313      	orrs	r3, r2
         );
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ff4c 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201e:	f7ff ff61 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002022:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	6978      	ldr	r0, [r7, #20]
 800202a:	f7ff ffb1 	bl	8001f90 <NVIC_EncodePriority>
 800202e:	4602      	mov	r2, r0
 8002030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff80 	bl	8001f3c <__NVIC_SetPriority>
}
 800203c:	bf00      	nop
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff54 	bl	8001f00 <__NVIC_EnableIRQ>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff fc74 	bl	8001958 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e099      	b.n	80021b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209c:	e00f      	b.n	80020be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209e:	f7ff fc5b 	bl	8001958 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d908      	bls.n	80020be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2203      	movs	r2, #3
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e078      	b.n	80021b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e8      	bne.n	800209e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <HAL_DMA_Init+0x158>)
 80020d8:	4013      	ands	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	2b04      	cmp	r3, #4
 8002116:	d107      	bne.n	8002128 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4313      	orrs	r3, r2
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0307 	bic.w	r3, r3, #7
 800213e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	2b04      	cmp	r3, #4
 8002150:	d117      	bne.n	8002182 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fa3d 	bl	80025e4 <DMA_CheckFifoParam>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2240      	movs	r2, #64	; 0x40
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800217e:	2301      	movs	r3, #1
 8002180:	e016      	b.n	80021b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f9f4 	bl	8002578 <DMA_CalcBaseAndBitshift>
 8002190:	4603      	mov	r3, r0
 8002192:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	223f      	movs	r2, #63	; 0x3f
 800219a:	409a      	lsls	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	f010803f 	.word	0xf010803f

080021bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021c8:	4b8e      	ldr	r3, [pc, #568]	; (8002404 <HAL_DMA_IRQHandler+0x248>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a8e      	ldr	r2, [pc, #568]	; (8002408 <HAL_DMA_IRQHandler+0x24c>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0a9b      	lsrs	r3, r3, #10
 80021d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	2208      	movs	r2, #8
 80021e8:	409a      	lsls	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01a      	beq.n	8002228 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0204 	bic.w	r2, r2, #4
 800220e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	2208      	movs	r2, #8
 8002216:	409a      	lsls	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002220:	f043 0201 	orr.w	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	2201      	movs	r2, #1
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d012      	beq.n	800225e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2201      	movs	r2, #1
 800224c:	409a      	lsls	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f043 0202 	orr.w	r2, r3, #2
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	2204      	movs	r2, #4
 8002264:	409a      	lsls	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d012      	beq.n	8002294 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00b      	beq.n	8002294 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	2204      	movs	r2, #4
 8002282:	409a      	lsls	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f043 0204 	orr.w	r2, r3, #4
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002298:	2210      	movs	r2, #16
 800229a:	409a      	lsls	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d043      	beq.n	800232c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d03c      	beq.n	800232c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b6:	2210      	movs	r2, #16
 80022b8:	409a      	lsls	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d018      	beq.n	80022fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d108      	bne.n	80022ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d024      	beq.n	800232c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	4798      	blx	r3
 80022ea:	e01f      	b.n	800232c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01b      	beq.n	800232c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
 80022fc:	e016      	b.n	800232c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d107      	bne.n	800231c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0208 	bic.w	r2, r2, #8
 800231a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	2220      	movs	r2, #32
 8002332:	409a      	lsls	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 808f 	beq.w	800245c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8087 	beq.w	800245c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2220      	movs	r2, #32
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b05      	cmp	r3, #5
 8002364:	d136      	bne.n	80023d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0216 	bic.w	r2, r2, #22
 8002374:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002384:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <HAL_DMA_IRQHandler+0x1da>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0208 	bic.w	r2, r2, #8
 80023a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023aa:	223f      	movs	r2, #63	; 0x3f
 80023ac:	409a      	lsls	r2, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d07e      	beq.n	80024c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	4798      	blx	r3
        }
        return;
 80023d2:	e079      	b.n	80024c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01d      	beq.n	800241e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10d      	bne.n	800240c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d031      	beq.n	800245c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4798      	blx	r3
 8002400:	e02c      	b.n	800245c <HAL_DMA_IRQHandler+0x2a0>
 8002402:	bf00      	nop
 8002404:	20000174 	.word	0x20000174
 8002408:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d023      	beq.n	800245c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
 800241c:	e01e      	b.n	800245c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10f      	bne.n	800244c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0210 	bic.w	r2, r2, #16
 800243a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	2b00      	cmp	r3, #0
 8002462:	d032      	beq.n	80024ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d022      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2205      	movs	r2, #5
 8002474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	3301      	adds	r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	429a      	cmp	r2, r3
 8002492:	d307      	bcc.n	80024a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f2      	bne.n	8002488 <HAL_DMA_IRQHandler+0x2cc>
 80024a2:	e000      	b.n	80024a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
 80024c6:	e000      	b.n	80024ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80024c8:	bf00      	nop
    }
  }
}
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	460b      	mov	r3, r1
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_DMA_RegisterCallback+0x20>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e03d      	b.n	800256c <HAL_DMA_RegisterCallback+0x9c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d12c      	bne.n	800255e <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002504:	7afb      	ldrb	r3, [r7, #11]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d826      	bhi.n	8002558 <HAL_DMA_RegisterCallback+0x88>
 800250a:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <HAL_DMA_RegisterCallback+0x40>)
 800250c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002510:	08002529 	.word	0x08002529
 8002514:	08002531 	.word	0x08002531
 8002518:	08002539 	.word	0x08002539
 800251c:	08002541 	.word	0x08002541
 8002520:	08002549 	.word	0x08002549
 8002524:	08002551 	.word	0x08002551
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800252e:	e018      	b.n	8002562 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002536:	e014      	b.n	8002562 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800253e:	e010      	b.n	8002562 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002546:	e00c      	b.n	8002562 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800254e:	e008      	b.n	8002562 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002556:	e004      	b.n	8002562 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	75fb      	strb	r3, [r7, #23]
      break;
 800255c:	e001      	b.n	8002562 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800256a:	7dfb      	ldrb	r3, [r7, #23]
}
 800256c:	4618      	mov	r0, r3
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3b10      	subs	r3, #16
 8002588:	4a14      	ldr	r2, [pc, #80]	; (80025dc <DMA_CalcBaseAndBitshift+0x64>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002592:	4a13      	ldr	r2, [pc, #76]	; (80025e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d909      	bls.n	80025ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	1d1a      	adds	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	659a      	str	r2, [r3, #88]	; 0x58
 80025b8:	e007      	b.n	80025ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	aaaaaaab 	.word	0xaaaaaaab
 80025e0:	0800ca1c 	.word	0x0800ca1c

080025e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11f      	bne.n	800263e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d856      	bhi.n	80026b2 <DMA_CheckFifoParam+0xce>
 8002604:	a201      	add	r2, pc, #4	; (adr r2, 800260c <DMA_CheckFifoParam+0x28>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	0800261d 	.word	0x0800261d
 8002610:	0800262f 	.word	0x0800262f
 8002614:	0800261d 	.word	0x0800261d
 8002618:	080026b3 	.word	0x080026b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d046      	beq.n	80026b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262c:	e043      	b.n	80026b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002636:	d140      	bne.n	80026ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263c:	e03d      	b.n	80026ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002646:	d121      	bne.n	800268c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d837      	bhi.n	80026be <DMA_CheckFifoParam+0xda>
 800264e:	a201      	add	r2, pc, #4	; (adr r2, 8002654 <DMA_CheckFifoParam+0x70>)
 8002650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002654:	08002665 	.word	0x08002665
 8002658:	0800266b 	.word	0x0800266b
 800265c:	08002665 	.word	0x08002665
 8002660:	0800267d 	.word	0x0800267d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e030      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d025      	beq.n	80026c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800267a:	e022      	b.n	80026c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002684:	d11f      	bne.n	80026c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800268a:	e01c      	b.n	80026c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d903      	bls.n	800269a <DMA_CheckFifoParam+0xb6>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d003      	beq.n	80026a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002698:	e018      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	73fb      	strb	r3, [r7, #15]
      break;
 800269e:	e015      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
      break;
 80026b0:	e00b      	b.n	80026ca <DMA_CheckFifoParam+0xe6>
      break;
 80026b2:	bf00      	nop
 80026b4:	e00a      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026b6:	bf00      	nop
 80026b8:	e008      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026ba:	bf00      	nop
 80026bc:	e006      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026be:	bf00      	nop
 80026c0:	e004      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026c2:	bf00      	nop
 80026c4:	e002      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;   
 80026c6:	bf00      	nop
 80026c8:	e000      	b.n	80026cc <DMA_CheckFifoParam+0xe8>
      break;
 80026ca:	bf00      	nop
    }
  } 
  
  return status; 
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop

080026dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	e177      	b.n	80029e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026f8:	2201      	movs	r2, #1
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	429a      	cmp	r2, r3
 8002712:	f040 8166 	bne.w	80029e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d005      	beq.n	800272e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272a:	2b02      	cmp	r3, #2
 800272c:	d130      	bne.n	8002790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	2203      	movs	r2, #3
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 0201 	and.w	r2, r3, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b03      	cmp	r3, #3
 800279a:	d017      	beq.n	80027cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d123      	bne.n	8002820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	220f      	movs	r2, #15
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	08da      	lsrs	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3208      	adds	r2, #8
 800281a:	69b9      	ldr	r1, [r7, #24]
 800281c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80c0 	beq.w	80029e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b66      	ldr	r3, [pc, #408]	; (8002a00 <HAL_GPIO_Init+0x324>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	4a65      	ldr	r2, [pc, #404]	; (8002a00 <HAL_GPIO_Init+0x324>)
 800286c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002870:	6453      	str	r3, [r2, #68]	; 0x44
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_GPIO_Init+0x324>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800287e:	4a61      	ldr	r2, [pc, #388]	; (8002a04 <HAL_GPIO_Init+0x328>)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	3302      	adds	r3, #2
 8002886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	220f      	movs	r2, #15
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <HAL_GPIO_Init+0x32c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d037      	beq.n	800291a <HAL_GPIO_Init+0x23e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_GPIO_Init+0x330>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d031      	beq.n	8002916 <HAL_GPIO_Init+0x23a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a56      	ldr	r2, [pc, #344]	; (8002a10 <HAL_GPIO_Init+0x334>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d02b      	beq.n	8002912 <HAL_GPIO_Init+0x236>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a55      	ldr	r2, [pc, #340]	; (8002a14 <HAL_GPIO_Init+0x338>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d025      	beq.n	800290e <HAL_GPIO_Init+0x232>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a54      	ldr	r2, [pc, #336]	; (8002a18 <HAL_GPIO_Init+0x33c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01f      	beq.n	800290a <HAL_GPIO_Init+0x22e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a53      	ldr	r2, [pc, #332]	; (8002a1c <HAL_GPIO_Init+0x340>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_Init+0x22a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_GPIO_Init+0x344>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_Init+0x226>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a51      	ldr	r2, [pc, #324]	; (8002a24 <HAL_GPIO_Init+0x348>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_GPIO_Init+0x222>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a50      	ldr	r2, [pc, #320]	; (8002a28 <HAL_GPIO_Init+0x34c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x21e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4f      	ldr	r2, [pc, #316]	; (8002a2c <HAL_GPIO_Init+0x350>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_GPIO_Init+0x21a>
 80028f2:	2309      	movs	r3, #9
 80028f4:	e012      	b.n	800291c <HAL_GPIO_Init+0x240>
 80028f6:	230a      	movs	r3, #10
 80028f8:	e010      	b.n	800291c <HAL_GPIO_Init+0x240>
 80028fa:	2308      	movs	r3, #8
 80028fc:	e00e      	b.n	800291c <HAL_GPIO_Init+0x240>
 80028fe:	2307      	movs	r3, #7
 8002900:	e00c      	b.n	800291c <HAL_GPIO_Init+0x240>
 8002902:	2306      	movs	r3, #6
 8002904:	e00a      	b.n	800291c <HAL_GPIO_Init+0x240>
 8002906:	2305      	movs	r3, #5
 8002908:	e008      	b.n	800291c <HAL_GPIO_Init+0x240>
 800290a:	2304      	movs	r3, #4
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x240>
 800290e:	2303      	movs	r3, #3
 8002910:	e004      	b.n	800291c <HAL_GPIO_Init+0x240>
 8002912:	2302      	movs	r3, #2
 8002914:	e002      	b.n	800291c <HAL_GPIO_Init+0x240>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_GPIO_Init+0x240>
 800291a:	2300      	movs	r3, #0
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	f002 0203 	and.w	r2, r2, #3
 8002922:	0092      	lsls	r2, r2, #2
 8002924:	4093      	lsls	r3, r2
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800292c:	4935      	ldr	r1, [pc, #212]	; (8002a04 <HAL_GPIO_Init+0x328>)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800293a:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_GPIO_Init+0x354>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <HAL_GPIO_Init+0x354>)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <HAL_GPIO_Init+0x354>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002988:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <HAL_GPIO_Init+0x354>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800298e:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HAL_GPIO_Init+0x354>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b2:	4a1f      	ldr	r2, [pc, #124]	; (8002a30 <HAL_GPIO_Init+0x354>)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_GPIO_Init+0x354>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029dc:	4a14      	ldr	r2, [pc, #80]	; (8002a30 <HAL_GPIO_Init+0x354>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3301      	adds	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	f67f ae84 	bls.w	80026f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40013800 	.word	0x40013800
 8002a08:	40020000 	.word	0x40020000
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40020800 	.word	0x40020800
 8002a14:	40020c00 	.word	0x40020c00
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40021400 	.word	0x40021400
 8002a20:	40021800 	.word	0x40021800
 8002a24:	40021c00 	.word	0x40021c00
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40022400 	.word	0x40022400
 8002a30:	40013c00 	.word	0x40013c00

08002a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	887b      	ldrh	r3, [r7, #2]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
 8002a50:	e001      	b.n	8002a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
 8002a70:	4613      	mov	r3, r2
 8002a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a80:	e003      	b.n	8002a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	041a      	lsls	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	619a      	str	r2, [r3, #24]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	041a      	lsls	r2, r3, #16
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e12b      	b.n	8002d36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe fd58 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b30:	f002 f860 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8002b34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4a81      	ldr	r2, [pc, #516]	; (8002d40 <HAL_I2C_Init+0x274>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d807      	bhi.n	8002b50 <HAL_I2C_Init+0x84>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a80      	ldr	r2, [pc, #512]	; (8002d44 <HAL_I2C_Init+0x278>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	bf94      	ite	ls
 8002b48:	2301      	movls	r3, #1
 8002b4a:	2300      	movhi	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e006      	b.n	8002b5e <HAL_I2C_Init+0x92>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a7d      	ldr	r2, [pc, #500]	; (8002d48 <HAL_I2C_Init+0x27c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bf94      	ite	ls
 8002b58:	2301      	movls	r3, #1
 8002b5a:	2300      	movhi	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0e7      	b.n	8002d36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a78      	ldr	r2, [pc, #480]	; (8002d4c <HAL_I2C_Init+0x280>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0c9b      	lsrs	r3, r3, #18
 8002b70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a6a      	ldr	r2, [pc, #424]	; (8002d40 <HAL_I2C_Init+0x274>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d802      	bhi.n	8002ba0 <HAL_I2C_Init+0xd4>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	e009      	b.n	8002bb4 <HAL_I2C_Init+0xe8>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	4a69      	ldr	r2, [pc, #420]	; (8002d50 <HAL_I2C_Init+0x284>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	495c      	ldr	r1, [pc, #368]	; (8002d40 <HAL_I2C_Init+0x274>)
 8002bd0:	428b      	cmp	r3, r1
 8002bd2:	d819      	bhi.n	8002c08 <HAL_I2C_Init+0x13c>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e59      	subs	r1, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be2:	1c59      	adds	r1, r3, #1
 8002be4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002be8:	400b      	ands	r3, r1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_I2C_Init+0x138>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1e59      	subs	r1, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c02:	e051      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c04:	2304      	movs	r3, #4
 8002c06:	e04f      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d111      	bne.n	8002c34 <HAL_I2C_Init+0x168>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1e58      	subs	r0, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e012      	b.n	8002c5a <HAL_I2C_Init+0x18e>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e58      	subs	r0, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	0099      	lsls	r1, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Init+0x196>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e022      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10e      	bne.n	8002c88 <HAL_I2C_Init+0x1bc>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1e58      	subs	r0, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	440b      	add	r3, r1
 8002c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c86:	e00f      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	0099      	lsls	r1, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	6809      	ldr	r1, [r1, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6911      	ldr	r1, [r2, #16]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68d2      	ldr	r2, [r2, #12]
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	000186a0 	.word	0x000186a0
 8002d44:	001e847f 	.word	0x001e847f
 8002d48:	003d08ff 	.word	0x003d08ff
 8002d4c:	431bde83 	.word	0x431bde83
 8002d50:	10624dd3 	.word	0x10624dd3

08002d54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d129      	bne.n	8002dbe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2224      	movs	r2, #36	; 0x24
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0210 	bic.w	r2, r2, #16
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e000      	b.n	8002dc0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002dbe:	2302      	movs	r3, #2
  }
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d12a      	bne.n	8002e3c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2224      	movs	r2, #36	; 0x24
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002e06:	89fb      	ldrh	r3, [r7, #14]
 8002e08:	f023 030f 	bic.w	r3, r3, #15
 8002e0c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	89fb      	ldrh	r3, [r7, #14]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	89fa      	ldrh	r2, [r7, #14]
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4c:	b08f      	sub	sp, #60	; 0x3c
 8002e4e:	af0a      	add	r7, sp, #40	; 0x28
 8002e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e10f      	b.n	800307c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f009 f946 	bl	800c108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2203      	movs	r2, #3
 8002e80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f002 ff53 	bl	8005d46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	687e      	ldr	r6, [r7, #4]
 8002ea8:	466d      	mov	r5, sp
 8002eaa:	f106 0410 	add.w	r4, r6, #16
 8002eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eba:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ebe:	1d33      	adds	r3, r6, #4
 8002ec0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec2:	6838      	ldr	r0, [r7, #0]
 8002ec4:	f002 fe2a 	bl	8005b1c <USB_CoreInit>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0d0      	b.n	800307c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f002 ff41 	bl	8005d68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	e04a      	b.n	8002f82 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	333d      	adds	r3, #61	; 0x3d
 8002efc:	2201      	movs	r2, #1
 8002efe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	333c      	adds	r3, #60	; 0x3c
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	b298      	uxth	r0, r3
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3344      	adds	r3, #68	; 0x44
 8002f28:	4602      	mov	r2, r0
 8002f2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3340      	adds	r3, #64	; 0x40
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3348      	adds	r3, #72	; 0x48
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	334c      	adds	r3, #76	; 0x4c
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3354      	adds	r3, #84	; 0x54
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	7bfa      	ldrb	r2, [r7, #15]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d3af      	bcc.n	8002eec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e044      	b.n	800301c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	3301      	adds	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	d3b5      	bcc.n	8002f92 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	687e      	ldr	r6, [r7, #4]
 800302e:	466d      	mov	r5, sp
 8003030:	f106 0410 	add.w	r4, r6, #16
 8003034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800303a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003040:	e885 0003 	stmia.w	r5, {r0, r1}
 8003044:	1d33      	adds	r3, r6, #4
 8003046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003048:	6838      	ldr	r0, [r7, #0]
 800304a:	f002 fed9 	bl	8005e00 <USB_DevInit>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e00d      	b.n	800307c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f004 f828 	bl	80070ca <USB_DevDisconnect>

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003084 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_PCD_Start+0x1c>
 800309c:	2302      	movs	r3, #2
 800309e:	e020      	b.n	80030e2 <HAL_PCD_Start+0x5e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d109      	bne.n	80030c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d005      	beq.n	80030c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f002 fe2b 	bl	8005d24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 ffd8 	bl	8007088 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030ea:	b590      	push	{r4, r7, lr}
 80030ec:	b08d      	sub	sp, #52	; 0x34
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f004 f896 	bl	8007232 <USB_GetMode>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	f040 848a 	bne.w	8003a22 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f003 fffa 	bl	800710c <USB_ReadInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8480 	beq.w	8003a20 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f003 ffe7 	bl	800710c <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b02      	cmp	r3, #2
 8003146:	d107      	bne.n	8003158 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f002 0202 	and.w	r2, r2, #2
 8003156:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f003 ffd5 	bl	800710c <USB_ReadInterrupts>
 8003162:	4603      	mov	r3, r0
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b10      	cmp	r3, #16
 800316a:	d161      	bne.n	8003230 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0210 	bic.w	r2, r2, #16
 800317a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	3304      	adds	r3, #4
 800319a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	0c5b      	lsrs	r3, r3, #17
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d124      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d035      	beq.n	8003220 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	6a38      	ldr	r0, [r7, #32]
 80031c8:	f003 fe0c 	bl	8006de4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d8:	441a      	add	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ea:	441a      	add	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	621a      	str	r2, [r3, #32]
 80031f0:	e016      	b.n	8003220 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	0c5b      	lsrs	r3, r3, #17
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d110      	bne.n	8003220 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003204:	2208      	movs	r2, #8
 8003206:	4619      	mov	r1, r3
 8003208:	6a38      	ldr	r0, [r7, #32]
 800320a:	f003 fdeb 	bl	8006de4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	6a1a      	ldr	r2, [r3, #32]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800321a:	441a      	add	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0210 	orr.w	r2, r2, #16
 800322e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f003 ff69 	bl	800710c <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003240:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003244:	f040 80a7 	bne.w	8003396 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f003 ff6e 	bl	8007132 <USB_ReadDevAllOutEpInterrupt>
 8003256:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003258:	e099      	b.n	800338e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 808e 	beq.w	8003382 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f003 ff92 	bl	800719a <USB_ReadDevOutEPInterrupt>
 8003276:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00c      	beq.n	800329c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	461a      	mov	r2, r3
 8003290:	2301      	movs	r3, #1
 8003292:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 feaa 	bl	8003ff0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b2:	461a      	mov	r2, r3
 80032b4:	2308      	movs	r3, #8
 80032b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 ff80 	bl	80041c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d6:	461a      	mov	r2, r3
 80032d8:	2310      	movs	r3, #16
 80032da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d030      	beq.n	8003348 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ee:	2b80      	cmp	r3, #128	; 0x80
 80032f0:	d109      	bne.n	8003306 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003304:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	3304      	adds	r3, #4
 800331a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	78db      	ldrb	r3, [r3, #3]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d108      	bne.n	8003336 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2200      	movs	r2, #0
 8003328:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	b2db      	uxtb	r3, r3
 800332e:	4619      	mov	r1, r3
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f008 fffd 	bl	800c330 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003342:	461a      	mov	r2, r3
 8003344:	2302      	movs	r3, #2
 8003346:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335e:	461a      	mov	r2, r3
 8003360:	2320      	movs	r3, #32
 8003362:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800337a:	461a      	mov	r2, r3
 800337c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003380:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	3301      	adds	r3, #1
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	f47f af62 	bne.w	800325a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f003 feb6 	bl	800710c <USB_ReadInterrupts>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033aa:	f040 80db 	bne.w	8003564 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 fed7 	bl	8007166 <USB_ReadDevAllInEpInterrupt>
 80033b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80033be:	e0cd      	b.n	800355c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 80c2 	beq.w	8003550 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f003 fefd 	bl	80071d6 <USB_ReadDevInEPInterrupt>
 80033dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d057      	beq.n	8003498 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	2201      	movs	r2, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	43db      	mvns	r3, r3
 8003402:	69f9      	ldr	r1, [r7, #28]
 8003404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003408:	4013      	ands	r3, r2
 800340a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003418:	461a      	mov	r2, r3
 800341a:	2301      	movs	r3, #1
 800341c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d132      	bne.n	800348c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	334c      	adds	r3, #76	; 0x4c
 8003436:	6819      	ldr	r1, [r3, #0]
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4403      	add	r3, r0
 8003446:	3348      	adds	r3, #72	; 0x48
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4419      	add	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4403      	add	r3, r0
 800345a:	334c      	adds	r3, #76	; 0x4c
 800345c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	2b00      	cmp	r3, #0
 8003462:	d113      	bne.n	800348c <HAL_PCD_IRQHandler+0x3a2>
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3354      	adds	r3, #84	; 0x54
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d108      	bne.n	800348c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003484:	461a      	mov	r2, r3
 8003486:	2101      	movs	r1, #1
 8003488:	f003 ff04 	bl	8007294 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	b2db      	uxtb	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f008 fec7 	bl	800c226 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80034a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ae:	461a      	mov	r2, r3
 80034b0:	2308      	movs	r3, #8
 80034b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d008      	beq.n	80034d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ca:	461a      	mov	r2, r3
 80034cc:	2310      	movs	r3, #16
 80034ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e6:	461a      	mov	r2, r3
 80034e8:	2340      	movs	r3, #64	; 0x40
 80034ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d023      	beq.n	800353e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80034f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f8:	6a38      	ldr	r0, [r7, #32]
 80034fa:	f002 fde5 	bl	80060c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	3338      	adds	r3, #56	; 0x38
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	3304      	adds	r3, #4
 8003510:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	78db      	ldrb	r3, [r3, #3]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d108      	bne.n	800352c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2200      	movs	r2, #0
 800351e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	b2db      	uxtb	r3, r3
 8003524:	4619      	mov	r1, r3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f008 ff14 	bl	800c354 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	461a      	mov	r2, r3
 800353a:	2302      	movs	r3, #2
 800353c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fcc3 	bl	8003ed6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	3301      	adds	r3, #1
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	2b00      	cmp	r3, #0
 8003560:	f47f af2e 	bne.w	80033c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f003 fdcf 	bl	800710c <USB_ReadInterrupts>
 800356e:	4603      	mov	r3, r0
 8003570:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003578:	d122      	bne.n	80035c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003594:	2b01      	cmp	r3, #1
 8003596:	d108      	bne.n	80035aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035a0:	2100      	movs	r1, #0
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 feaa 	bl	80042fc <HAL_PCDEx_LPM_Callback>
 80035a8:	e002      	b.n	80035b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f008 feb2 	bl	800c314 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f003 fda1 	bl	800710c <USB_ReadInterrupts>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d4:	d112      	bne.n	80035fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d102      	bne.n	80035ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f008 fe6e 	bl	800c2c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f003 fd83 	bl	800710c <USB_ReadInterrupts>
 8003606:	4603      	mov	r3, r0
 8003608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003610:	f040 80b7 	bne.w	8003782 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2110      	movs	r1, #16
 800362e:	4618      	mov	r0, r3
 8003630:	f002 fd4a 	bl	80060c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003634:	2300      	movs	r3, #0
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003638:	e046      	b.n	80036c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003646:	461a      	mov	r2, r3
 8003648:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800364c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800365e:	0151      	lsls	r1, r2, #5
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	440a      	add	r2, r1
 8003664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800366c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	4413      	add	r3, r2
 8003676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367a:	461a      	mov	r2, r3
 800367c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003680:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003692:	0151      	lsls	r1, r2, #5
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	440a      	add	r2, r1
 8003698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800369c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	0151      	lsls	r1, r2, #5
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	440a      	add	r2, r1
 80036b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c4:	3301      	adds	r3, #1
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d3b3      	bcc.n	800363a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036fe:	f043 030b 	orr.w	r3, r3, #11
 8003702:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003714:	f043 030b 	orr.w	r3, r3, #11
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	e015      	b.n	8003748 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800372e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003732:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003742:	f043 030b 	orr.w	r3, r3, #11
 8003746:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003756:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800375a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800376c:	461a      	mov	r2, r3
 800376e:	f003 fd91 	bl	8007294 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f003 fcc0 	bl	800710c <USB_ReadInterrupts>
 800378c:	4603      	mov	r3, r0
 800378e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003796:	d124      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fd56 	bl	800724e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f002 fd0b 	bl	80061c2 <USB_GetDevSpeed>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681c      	ldr	r4, [r3, #0]
 80037b8:	f001 fa10 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 80037bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	4620      	mov	r0, r4
 80037c8:	f002 fa0a 	bl	8005be0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f008 fd52 	bl	800c276 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695a      	ldr	r2, [r3, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f003 fc90 	bl	800710c <USB_ReadInterrupts>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d10a      	bne.n	800380c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f008 fd2f 	bl	800c25a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695a      	ldr	r2, [r3, #20]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f002 0208 	and.w	r2, r2, #8
 800380a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f003 fc7b 	bl	800710c <USB_ReadInterrupts>
 8003816:	4603      	mov	r3, r0
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b80      	cmp	r3, #128	; 0x80
 800381e:	d122      	bne.n	8003866 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800382c:	2301      	movs	r3, #1
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
 8003830:	e014      	b.n	800385c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d105      	bne.n	8003856 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	b2db      	uxtb	r3, r3
 800384e:	4619      	mov	r1, r3
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fb0f 	bl	8003e74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	3301      	adds	r3, #1
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	429a      	cmp	r2, r3
 8003864:	d3e5      	bcc.n	8003832 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f003 fc4e 	bl	800710c <USB_ReadInterrupts>
 8003870:	4603      	mov	r3, r0
 8003872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800387a:	d13b      	bne.n	80038f4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800387c:	2301      	movs	r3, #1
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
 8003880:	e02b      	b.n	80038da <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003896:	4613      	mov	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	3340      	adds	r3, #64	; 0x40
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d115      	bne.n	80038d4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80038a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da12      	bge.n	80038d4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	333f      	adds	r3, #63	; 0x3f
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fad0 	bl	8003e74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	3301      	adds	r3, #1
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3ce      	bcc.n	8003882 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fc07 	bl	800710c <USB_ReadInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003908:	d155      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800390a:	2301      	movs	r3, #1
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
 800390e:	e045      	b.n	800399c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d12e      	bne.n	8003996 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003938:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800393a:	2b00      	cmp	r3, #0
 800393c:	da2b      	bge.n	8003996 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800394a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800394e:	429a      	cmp	r2, r3
 8003950:	d121      	bne.n	8003996 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800398e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003992:	6053      	str	r3, [r2, #4]
            break;
 8003994:	e007      	b.n	80039a6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	3301      	adds	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d3b4      	bcc.n	8003910 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f003 fba6 	bl	800710c <USB_ReadInterrupts>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d10a      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f008 fcd3 	bl	800c378 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 fb90 	bl	800710c <USB_ReadInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d115      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f008 fcc3 	bl	800c394 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	e000      	b.n	8003a22 <HAL_PCD_IRQHandler+0x938>
      return;
 8003a20:	bf00      	nop
    }
  }
}
 8003a22:	3734      	adds	r7, #52	; 0x34
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd90      	pop	{r4, r7, pc}

08003a28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d101      	bne.n	8003a42 <HAL_PCD_SetAddress+0x1a>
 8003a3e:	2302      	movs	r3, #2
 8003a40:	e013      	b.n	8003a6a <HAL_PCD_SetAddress+0x42>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	4611      	mov	r1, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f003 faee 	bl	800703c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	4608      	mov	r0, r1
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4603      	mov	r3, r0
 8003a82:	70fb      	strb	r3, [r7, #3]
 8003a84:	460b      	mov	r3, r1
 8003a86:	803b      	strh	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	da0f      	bge.n	8003ab8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f003 020f 	and.w	r2, r3, #15
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	3338      	adds	r3, #56	; 0x38
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	3304      	adds	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	705a      	strb	r2, [r3, #1]
 8003ab6:	e00f      	b.n	8003ad8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	f003 020f 	and.w	r2, r3, #15
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	3304      	adds	r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ae4:	883a      	ldrh	r2, [r7, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	78ba      	ldrb	r2, [r7, #2]
 8003aee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b02:	78bb      	ldrb	r3, [r7, #2]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d102      	bne.n	8003b0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_PCD_EP_Open+0xaa>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e00e      	b.n	8003b3a <HAL_PCD_EP_Open+0xc8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68f9      	ldr	r1, [r7, #12]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 fb6e 	bl	800620c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003b38:	7afb      	ldrb	r3, [r7, #11]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	da0f      	bge.n	8003b76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	3338      	adds	r3, #56	; 0x38
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	4413      	add	r3, r2
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	705a      	strb	r2, [r3, #1]
 8003b74:	e00f      	b.n	8003b96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	f003 020f 	and.w	r2, r3, #15
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_PCD_EP_Close+0x6e>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e00e      	b.n	8003bce <HAL_PCD_EP_Close+0x8c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68f9      	ldr	r1, [r7, #12]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f002 fbac 	bl	800631c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b086      	sub	sp, #24
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	460b      	mov	r3, r1
 8003be4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be6:	7afb      	ldrb	r3, [r7, #11]
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c18:	7afb      	ldrb	r3, [r7, #11]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d102      	bne.n	8003c32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c32:	7afb      	ldrb	r3, [r7, #11]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d109      	bne.n	8003c50 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	6979      	ldr	r1, [r7, #20]
 8003c4a:	f002 fe8b 	bl	8006964 <USB_EP0StartXfer>
 8003c4e:	e008      	b.n	8003c62 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6979      	ldr	r1, [r7, #20]
 8003c5e:	f002 fc39 	bl	80064d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c7c:	7afb      	ldrb	r3, [r7, #11]
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	3338      	adds	r3, #56	; 0x38
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	3304      	adds	r3, #4
 8003c92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cac:	7afb      	ldrb	r3, [r7, #11]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cc6:	7afb      	ldrb	r3, [r7, #11]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6979      	ldr	r1, [r7, #20]
 8003cde:	f002 fe41 	bl	8006964 <USB_EP0StartXfer>
 8003ce2:	e008      	b.n	8003cf6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	f002 fbef 	bl	80064d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	f003 020f 	and.w	r2, r3, #15
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d901      	bls.n	8003d1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e050      	b.n	8003dc0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	da0f      	bge.n	8003d46 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 020f 	and.w	r2, r3, #15
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	3338      	adds	r3, #56	; 0x38
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	705a      	strb	r2, [r3, #1]
 8003d44:	e00d      	b.n	8003d62 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	3304      	adds	r3, #4
 8003d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_PCD_EP_SetStall+0x82>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e01e      	b.n	8003dc0 <HAL_PCD_EP_SetStall+0xc0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f003 f87f 	bl	8006e94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	b2d9      	uxtb	r1, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003db0:	461a      	mov	r2, r3
 8003db2:	f003 fa6f 	bl	8007294 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 020f 	and.w	r2, r3, #15
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d901      	bls.n	8003de6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e042      	b.n	8003e6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	da0f      	bge.n	8003e0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	f003 020f 	and.w	r2, r3, #15
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	3338      	adds	r3, #56	; 0x38
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	3304      	adds	r3, #4
 8003e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	705a      	strb	r2, [r3, #1]
 8003e0c:	e00f      	b.n	8003e2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	f003 020f 	and.w	r2, r3, #15
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4413      	add	r3, r2
 8003e24:	3304      	adds	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_PCD_EP_ClrStall+0x86>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e00e      	b.n	8003e6c <HAL_PCD_EP_ClrStall+0xa4>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f003 f887 	bl	8006f70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	da0c      	bge.n	8003ea2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f003 020f 	and.w	r2, r3, #15
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	3338      	adds	r3, #56	; 0x38
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e00c      	b.n	8003ebc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	f003 020f 	and.w	r2, r3, #15
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3304      	adds	r3, #4
 8003eba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f002 fea6 	bl	8006c14 <USB_EPStopXfer>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b08a      	sub	sp, #40	; 0x28
 8003eda:	af02      	add	r7, sp, #8
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	3338      	adds	r3, #56	; 0x38
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	3304      	adds	r3, #4
 8003efc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d901      	bls.n	8003f0e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e06c      	b.n	8003fe8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d902      	bls.n	8003f2a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3303      	adds	r3, #3
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f32:	e02b      	b.n	8003f8c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d902      	bls.n	8003f50 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3303      	adds	r3, #3
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6919      	ldr	r1, [r3, #16]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	6978      	ldr	r0, [r7, #20]
 8003f70:	f002 fefa 	bl	8006d68 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	441a      	add	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a1a      	ldr	r2, [r3, #32]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	441a      	add	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d809      	bhi.n	8003fb6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1a      	ldr	r2, [r3, #32]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d203      	bcs.n	8003fb6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1be      	bne.n	8003f34 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d811      	bhi.n	8003fe6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	2201      	movs	r2, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	6939      	ldr	r1, [r7, #16]
 8003fde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3720      	adds	r7, #32
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	333c      	adds	r3, #60	; 0x3c
 8004008:	3304      	adds	r3, #4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d17b      	bne.n	800411e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4a61      	ldr	r2, [pc, #388]	; (80041b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	f240 80b9 	bls.w	80041ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80b3 	beq.w	80041ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004052:	461a      	mov	r2, r3
 8004054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004058:	6093      	str	r3, [r2, #8]
 800405a:	e0a7      	b.n	80041ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	4413      	add	r3, r2
 800406e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004072:	461a      	mov	r2, r3
 8004074:	2320      	movs	r3, #32
 8004076:	6093      	str	r3, [r2, #8]
 8004078:	e098      	b.n	80041ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 8093 	bne.w	80041ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	4a4b      	ldr	r2, [pc, #300]	; (80041b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d90f      	bls.n	80040ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a4:	461a      	mov	r2, r3
 80040a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040aa:	6093      	str	r3, [r2, #8]
 80040ac:	e07e      	b.n	80041ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4413      	add	r3, r2
 80040c0:	3304      	adds	r3, #4
 80040c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	0159      	lsls	r1, r3, #5
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	440b      	add	r3, r1
 80040d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040da:	1ad2      	subs	r2, r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d114      	bne.n	8004110 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040f8:	461a      	mov	r2, r3
 80040fa:	2101      	movs	r1, #1
 80040fc:	f003 f8ca 	bl	8007294 <USB_EP0_OutStart>
 8004100:	e006      	b.n	8004110 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	441a      	add	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2db      	uxtb	r3, r3
 8004114:	4619      	mov	r1, r3
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f008 f86a 	bl	800c1f0 <HAL_PCD_DataOutStageCallback>
 800411c:	e046      	b.n	80041ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	4a26      	ldr	r2, [pc, #152]	; (80041bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d124      	bne.n	8004170 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413c:	461a      	mov	r2, r3
 800413e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004142:	6093      	str	r3, [r2, #8]
 8004144:	e032      	b.n	80041ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	461a      	mov	r2, r3
 800415e:	2320      	movs	r3, #32
 8004160:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	4619      	mov	r1, r3
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f008 f841 	bl	800c1f0 <HAL_PCD_DataOutStageCallback>
 800416e:	e01d      	b.n	80041ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d114      	bne.n	80041a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d108      	bne.n	80041a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004198:	461a      	mov	r2, r3
 800419a:	2100      	movs	r1, #0
 800419c:	f003 f87a 	bl	8007294 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f008 f822 	bl	800c1f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	4f54300a 	.word	0x4f54300a
 80041bc:	4f54310a 	.word	0x4f54310a

080041c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	333c      	adds	r3, #60	; 0x3c
 80041d8:	3304      	adds	r3, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4a15      	ldr	r2, [pc, #84]	; (8004248 <PCD_EP_OutSetupPacket_int+0x88>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d90e      	bls.n	8004214 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d009      	beq.n	8004214 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	461a      	mov	r2, r3
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f007 ffd9 	bl	800c1cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <PCD_EP_OutSetupPacket_int+0x88>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d90c      	bls.n	800423c <PCD_EP_OutSetupPacket_int+0x7c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d108      	bne.n	800423c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004234:	461a      	mov	r2, r3
 8004236:	2101      	movs	r1, #1
 8004238:	f003 f82c 	bl	8007294 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	4f54300a 	.word	0x4f54300a

0800424c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	70fb      	strb	r3, [r7, #3]
 8004258:	4613      	mov	r3, r2
 800425a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d107      	bne.n	800427a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800426a:	883b      	ldrh	r3, [r7, #0]
 800426c:	0419      	lsls	r1, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	430a      	orrs	r2, r1
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
 8004278:	e028      	b.n	80042cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	0c1b      	lsrs	r3, r3, #16
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	4413      	add	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]
 800428c:	e00d      	b.n	80042aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	3340      	adds	r3, #64	; 0x40
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	0c1b      	lsrs	r3, r3, #16
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	4413      	add	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	3301      	adds	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d3ec      	bcc.n	800428e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042b4:	883b      	ldrh	r3, [r7, #0]
 80042b6:	0418      	lsls	r0, r3, #16
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6819      	ldr	r1, [r3, #0]
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	3b01      	subs	r3, #1
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	4302      	orrs	r2, r0
 80042c4:	3340      	adds	r3, #64	; 0x40
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	887a      	ldrh	r2, [r7, #2]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e267      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d075      	beq.n	800441e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004332:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b04      	cmp	r3, #4
 800433c:	d00c      	beq.n	8004358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433e:	4b85      	ldr	r3, [pc, #532]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004346:	2b08      	cmp	r3, #8
 8004348:	d112      	bne.n	8004370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434a:	4b82      	ldr	r3, [pc, #520]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004356:	d10b      	bne.n	8004370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	4b7e      	ldr	r3, [pc, #504]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d05b      	beq.n	800441c <HAL_RCC_OscConfig+0x108>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d157      	bne.n	800441c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e242      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004378:	d106      	bne.n	8004388 <HAL_RCC_OscConfig+0x74>
 800437a:	4b76      	ldr	r3, [pc, #472]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a75      	ldr	r2, [pc, #468]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e01d      	b.n	80043c4 <HAL_RCC_OscConfig+0xb0>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x98>
 8004392:	4b70      	ldr	r3, [pc, #448]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6f      	ldr	r2, [pc, #444]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b6d      	ldr	r3, [pc, #436]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6c      	ldr	r2, [pc, #432]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0xb0>
 80043ac:	4b69      	ldr	r3, [pc, #420]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a68      	ldr	r2, [pc, #416]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80043b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	4b66      	ldr	r3, [pc, #408]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a65      	ldr	r2, [pc, #404]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80043be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d013      	beq.n	80043f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fd fac4 	bl	8001958 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fd fac0 	bl	8001958 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e207      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	4b5b      	ldr	r3, [pc, #364]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0xc0>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd fab0 	bl	8001958 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fd faac 	bl	8001958 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e1f3      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	4b51      	ldr	r3, [pc, #324]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0xe8>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d063      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800442a:	4b4a      	ldr	r3, [pc, #296]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004436:	4b47      	ldr	r3, [pc, #284]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800443e:	2b08      	cmp	r3, #8
 8004440:	d11c      	bne.n	800447c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004442:	4b44      	ldr	r3, [pc, #272]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d116      	bne.n	800447c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444e:	4b41      	ldr	r3, [pc, #260]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_RCC_OscConfig+0x152>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1c7      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004466:	4b3b      	ldr	r3, [pc, #236]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4937      	ldr	r1, [pc, #220]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	e03a      	b.n	80044f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d020      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004484:	4b34      	ldr	r3, [pc, #208]	; (8004558 <HAL_RCC_OscConfig+0x244>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fd fa65 	bl	8001958 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004492:	f7fd fa61 	bl	8001958 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e1a8      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b0:	4b28      	ldr	r3, [pc, #160]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4925      	ldr	r1, [pc, #148]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]
 80044c4:	e015      	b.n	80044f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <HAL_RCC_OscConfig+0x244>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fd fa44 	bl	8001958 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d4:	f7fd fa40 	bl	8001958 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e187      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d036      	beq.n	800456c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004506:	4b15      	ldr	r3, [pc, #84]	; (800455c <HAL_RCC_OscConfig+0x248>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fd fa24 	bl	8001958 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004514:	f7fd fa20 	bl	8001958 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e167      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_OscConfig+0x240>)
 8004528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x200>
 8004532:	e01b      	b.n	800456c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004534:	4b09      	ldr	r3, [pc, #36]	; (800455c <HAL_RCC_OscConfig+0x248>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453a:	f7fd fa0d 	bl	8001958 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004540:	e00e      	b.n	8004560 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004542:	f7fd fa09 	bl	8001958 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d907      	bls.n	8004560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e150      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
 8004554:	40023800 	.word	0x40023800
 8004558:	42470000 	.word	0x42470000
 800455c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	4b88      	ldr	r3, [pc, #544]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ea      	bne.n	8004542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8097 	beq.w	80046a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457e:	4b81      	ldr	r3, [pc, #516]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10f      	bne.n	80045aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	4b7d      	ldr	r3, [pc, #500]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	4a7c      	ldr	r2, [pc, #496]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004598:	6413      	str	r3, [r2, #64]	; 0x40
 800459a:	4b7a      	ldr	r3, [pc, #488]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045aa:	4b77      	ldr	r3, [pc, #476]	; (8004788 <HAL_RCC_OscConfig+0x474>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d118      	bne.n	80045e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b6:	4b74      	ldr	r3, [pc, #464]	; (8004788 <HAL_RCC_OscConfig+0x474>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a73      	ldr	r2, [pc, #460]	; (8004788 <HAL_RCC_OscConfig+0x474>)
 80045bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c2:	f7fd f9c9 	bl	8001958 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ca:	f7fd f9c5 	bl	8001958 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e10c      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	4b6a      	ldr	r3, [pc, #424]	; (8004788 <HAL_RCC_OscConfig+0x474>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d106      	bne.n	80045fe <HAL_RCC_OscConfig+0x2ea>
 80045f0:	4b64      	ldr	r3, [pc, #400]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	4a63      	ldr	r2, [pc, #396]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	6713      	str	r3, [r2, #112]	; 0x70
 80045fc:	e01c      	b.n	8004638 <HAL_RCC_OscConfig+0x324>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2b05      	cmp	r3, #5
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0x30c>
 8004606:	4b5f      	ldr	r3, [pc, #380]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a5e      	ldr	r2, [pc, #376]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
 8004612:	4b5c      	ldr	r3, [pc, #368]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a5b      	ldr	r2, [pc, #364]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
 800461e:	e00b      	b.n	8004638 <HAL_RCC_OscConfig+0x324>
 8004620:	4b58      	ldr	r3, [pc, #352]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a57      	ldr	r2, [pc, #348]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004626:	f023 0301 	bic.w	r3, r3, #1
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
 800462c:	4b55      	ldr	r3, [pc, #340]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	4a54      	ldr	r2, [pc, #336]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004632:	f023 0304 	bic.w	r3, r3, #4
 8004636:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d015      	beq.n	800466c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fd f98a 	bl	8001958 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004646:	e00a      	b.n	800465e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fd f986 	bl	8001958 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	; 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0cb      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465e:	4b49      	ldr	r3, [pc, #292]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0ee      	beq.n	8004648 <HAL_RCC_OscConfig+0x334>
 800466a:	e014      	b.n	8004696 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466c:	f7fd f974 	bl	8001958 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004672:	e00a      	b.n	800468a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004674:	f7fd f970 	bl	8001958 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0b5      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468a:	4b3e      	ldr	r3, [pc, #248]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ee      	bne.n	8004674 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469c:	4b39      	ldr	r3, [pc, #228]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	4a38      	ldr	r2, [pc, #224]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 80046a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80a1 	beq.w	80047f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b2:	4b34      	ldr	r3, [pc, #208]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d05c      	beq.n	8004778 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d141      	bne.n	800474a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c6:	4b31      	ldr	r3, [pc, #196]	; (800478c <HAL_RCC_OscConfig+0x478>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046cc:	f7fd f944 	bl	8001958 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d4:	f7fd f940 	bl	8001958 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e087      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e6:	4b27      	ldr	r3, [pc, #156]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	019b      	lsls	r3, r3, #6
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	3b01      	subs	r3, #1
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	491b      	ldr	r1, [pc, #108]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 8004718:	4313      	orrs	r3, r2
 800471a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800471c:	4b1b      	ldr	r3, [pc, #108]	; (800478c <HAL_RCC_OscConfig+0x478>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004722:	f7fd f919 	bl	8001958 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800472a:	f7fd f915 	bl	8001958 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e05c      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473c:	4b11      	ldr	r3, [pc, #68]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x416>
 8004748:	e054      	b.n	80047f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <HAL_RCC_OscConfig+0x478>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fd f902 	bl	8001958 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd f8fe 	bl	8001958 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e045      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_RCC_OscConfig+0x470>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x444>
 8004776:	e03d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d107      	bne.n	8004790 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e038      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
 8004784:	40023800 	.word	0x40023800
 8004788:	40007000 	.word	0x40007000
 800478c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004790:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <HAL_RCC_OscConfig+0x4ec>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d028      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d121      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d11a      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047c0:	4013      	ands	r3, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d111      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	3b01      	subs	r3, #1
 80047da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d107      	bne.n	80047f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d001      	beq.n	80047f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800

08004804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0cc      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004818:	4b68      	ldr	r3, [pc, #416]	; (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d90c      	bls.n	8004840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b65      	ldr	r3, [pc, #404]	; (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b63      	ldr	r3, [pc, #396]	; (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0b8      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004858:	4b59      	ldr	r3, [pc, #356]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4a58      	ldr	r2, [pc, #352]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004862:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004870:	4b53      	ldr	r3, [pc, #332]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a52      	ldr	r2, [pc, #328]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800487a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b50      	ldr	r3, [pc, #320]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	494d      	ldr	r1, [pc, #308]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d044      	beq.n	8004924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d119      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e07f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e06f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b3b      	ldr	r3, [pc, #236]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e067      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4934      	ldr	r1, [pc, #208]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fd f830 	bl	8001958 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd f82c 	bl	8001958 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e04f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b25      	ldr	r3, [pc, #148]	; (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d20c      	bcs.n	800494c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b22      	ldr	r3, [pc, #136]	; (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b20      	ldr	r3, [pc, #128]	; (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e032      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004958:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4916      	ldr	r1, [pc, #88]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004976:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	490e      	ldr	r1, [pc, #56]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800498a:	f000 f821 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 800498e:	4602      	mov	r2, r0
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	490a      	ldr	r1, [pc, #40]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	5ccb      	ldrb	r3, [r1, r3]
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049a6:	4b09      	ldr	r3, [pc, #36]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fc fed6 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40023c00 	.word	0x40023c00
 80049c0:	40023800 	.word	0x40023800
 80049c4:	0800ca04 	.word	0x0800ca04
 80049c8:	20000174 	.word	0x20000174
 80049cc:	20000178 	.word	0x20000178

080049d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d4:	b094      	sub	sp, #80	; 0x50
 80049d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	647b      	str	r3, [r7, #68]	; 0x44
 80049dc:	2300      	movs	r3, #0
 80049de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e0:	2300      	movs	r3, #0
 80049e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049e8:	4b79      	ldr	r3, [pc, #484]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d00d      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x40>
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	f200 80e1 	bhi.w	8004bbc <HAL_RCC_GetSysClockFreq+0x1ec>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x34>
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a02:	e0db      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b73      	ldr	r3, [pc, #460]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a08:	e0db      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0a:	4b73      	ldr	r3, [pc, #460]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a0e:	e0d8      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a10:	4b6f      	ldr	r3, [pc, #444]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d063      	beq.n	8004aee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a26:	4b6a      	ldr	r3, [pc, #424]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a38:	633b      	str	r3, [r7, #48]	; 0x30
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a42:	4622      	mov	r2, r4
 8004a44:	462b      	mov	r3, r5
 8004a46:	f04f 0000 	mov.w	r0, #0
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	0159      	lsls	r1, r3, #5
 8004a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a54:	0150      	lsls	r0, r2, #5
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	1a51      	subs	r1, r2, r1
 8004a5e:	6139      	str	r1, [r7, #16]
 8004a60:	4629      	mov	r1, r5
 8004a62:	eb63 0301 	sbc.w	r3, r3, r1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a74:	4659      	mov	r1, fp
 8004a76:	018b      	lsls	r3, r1, #6
 8004a78:	4651      	mov	r1, sl
 8004a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a7e:	4651      	mov	r1, sl
 8004a80:	018a      	lsls	r2, r1, #6
 8004a82:	4651      	mov	r1, sl
 8004a84:	ebb2 0801 	subs.w	r8, r2, r1
 8004a88:	4659      	mov	r1, fp
 8004a8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	eb18 0303 	adds.w	r3, r8, r3
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	462b      	mov	r3, r5
 8004ab0:	eb49 0303 	adc.w	r3, r9, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	024b      	lsls	r3, r1, #9
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004acc:	4621      	mov	r1, r4
 8004ace:	024a      	lsls	r2, r1, #9
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ada:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004adc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ae0:	f7fb fb86 	bl	80001f0 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4613      	mov	r3, r2
 8004aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aec:	e058      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aee:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	099b      	lsrs	r3, r3, #6
 8004af4:	2200      	movs	r2, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	4611      	mov	r1, r2
 8004afa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	2300      	movs	r3, #0
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
 8004b04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	f04f 0000 	mov.w	r0, #0
 8004b10:	f04f 0100 	mov.w	r1, #0
 8004b14:	0159      	lsls	r1, r3, #5
 8004b16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b1a:	0150      	lsls	r0, r2, #5
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4641      	mov	r1, r8
 8004b22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b26:	4649      	mov	r1, r9
 8004b28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b40:	ebb2 040a 	subs.w	r4, r2, sl
 8004b44:	eb63 050b 	sbc.w	r5, r3, fp
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	00eb      	lsls	r3, r5, #3
 8004b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b56:	00e2      	lsls	r2, r4, #3
 8004b58:	4614      	mov	r4, r2
 8004b5a:	461d      	mov	r5, r3
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	18e3      	adds	r3, r4, r3
 8004b60:	603b      	str	r3, [r7, #0]
 8004b62:	464b      	mov	r3, r9
 8004b64:	eb45 0303 	adc.w	r3, r5, r3
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b76:	4629      	mov	r1, r5
 8004b78:	028b      	lsls	r3, r1, #10
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b80:	4621      	mov	r1, r4
 8004b82:	028a      	lsls	r2, r1, #10
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	61fa      	str	r2, [r7, #28]
 8004b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b94:	f7fb fb2c 	bl	80001f0 <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	3301      	adds	r3, #1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3750      	adds	r7, #80	; 0x50
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	007a1200 	.word	0x007a1200

08004bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000174 	.word	0x20000174

08004bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bf8:	f7ff fff0 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0a9b      	lsrs	r3, r3, #10
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4903      	ldr	r1, [pc, #12]	; (8004c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40023800 	.word	0x40023800
 8004c18:	0800ca14 	.word	0x0800ca14

08004c1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	220f      	movs	r2, #15
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c2c:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0203 	and.w	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c50:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c5e:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <HAL_RCC_GetClockConfig+0x60>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40023c00 	.word	0x40023c00

08004c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e041      	b.n	8004d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc fcc6 	bl	8001638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 fbb2 	bl	8005428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d001      	beq.n	8004d38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e04e      	b.n	8004dd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a23      	ldr	r2, [pc, #140]	; (8004de4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d022      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x80>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d62:	d01d      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x80>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1f      	ldr	r2, [pc, #124]	; (8004de8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d018      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x80>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <HAL_TIM_Base_Start_IT+0xcc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d013      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x80>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1c      	ldr	r2, [pc, #112]	; (8004df0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00e      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x80>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1b      	ldr	r2, [pc, #108]	; (8004df4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d009      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x80>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <HAL_TIM_Base_Start_IT+0x80>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <HAL_TIM_Base_Start_IT+0xdc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d111      	bne.n	8004dc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b06      	cmp	r3, #6
 8004db0:	d010      	beq.n	8004dd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc2:	e007      	b.n	8004dd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40010000 	.word	0x40010000
 8004de8:	40000400 	.word	0x40000400
 8004dec:	40000800 	.word	0x40000800
 8004df0:	40000c00 	.word	0x40000c00
 8004df4:	40010400 	.word	0x40010400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40001800 	.word	0x40001800

08004e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e041      	b.n	8004e96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f839 	bl	8004e9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f000 faf2 	bl	8005428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d122      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d11b      	bne.n	8004f0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f06f 0202 	mvn.w	r2, #2
 8004ede:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fa78 	bl	80053ea <HAL_TIM_IC_CaptureCallback>
 8004efa:	e005      	b.n	8004f08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fa6a 	bl	80053d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa7b 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d122      	bne.n	8004f62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d11b      	bne.n	8004f62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f06f 0204 	mvn.w	r2, #4
 8004f32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fa4e 	bl	80053ea <HAL_TIM_IC_CaptureCallback>
 8004f4e:	e005      	b.n	8004f5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fa40 	bl	80053d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa51 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d122      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d11b      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f06f 0208 	mvn.w	r2, #8
 8004f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fa24 	bl	80053ea <HAL_TIM_IC_CaptureCallback>
 8004fa2:	e005      	b.n	8004fb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa16 	bl	80053d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa27 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d122      	bne.n	800500a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d11b      	bne.n	800500a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f06f 0210 	mvn.w	r2, #16
 8004fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2208      	movs	r2, #8
 8004fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f9fa 	bl	80053ea <HAL_TIM_IC_CaptureCallback>
 8004ff6:	e005      	b.n	8005004 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f9ec 	bl	80053d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f9fd 	bl	80053fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10e      	bne.n	8005036 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d107      	bne.n	8005036 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f06f 0201 	mvn.w	r2, #1
 800502e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7fc f943 	bl	80012bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005040:	2b80      	cmp	r3, #128	; 0x80
 8005042:	d10e      	bne.n	8005062 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d107      	bne.n	8005062 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800505a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fd53 	bl	8005b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	d10e      	bne.n	800508e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b40      	cmp	r3, #64	; 0x40
 800507c:	d107      	bne.n	800508e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f9c2 	bl	8005412 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b20      	cmp	r3, #32
 800509a:	d10e      	bne.n	80050ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d107      	bne.n	80050ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f06f 0220 	mvn.w	r2, #32
 80050b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fd1d 	bl	8005af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050de:	2302      	movs	r3, #2
 80050e0:	e0ae      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b0c      	cmp	r3, #12
 80050ee:	f200 809f 	bhi.w	8005230 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	0800512d 	.word	0x0800512d
 80050fc:	08005231 	.word	0x08005231
 8005100:	08005231 	.word	0x08005231
 8005104:	08005231 	.word	0x08005231
 8005108:	0800516d 	.word	0x0800516d
 800510c:	08005231 	.word	0x08005231
 8005110:	08005231 	.word	0x08005231
 8005114:	08005231 	.word	0x08005231
 8005118:	080051af 	.word	0x080051af
 800511c:	08005231 	.word	0x08005231
 8005120:	08005231 	.word	0x08005231
 8005124:	08005231 	.word	0x08005231
 8005128:	080051ef 	.word	0x080051ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fa18 	bl	8005568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0208 	orr.w	r2, r2, #8
 8005146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699a      	ldr	r2, [r3, #24]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0204 	bic.w	r2, r2, #4
 8005156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6999      	ldr	r1, [r3, #24]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	619a      	str	r2, [r3, #24]
      break;
 800516a:	e064      	b.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fa68 	bl	8005648 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6999      	ldr	r1, [r3, #24]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	021a      	lsls	r2, r3, #8
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	619a      	str	r2, [r3, #24]
      break;
 80051ac:	e043      	b.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fabd 	bl	8005734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f042 0208 	orr.w	r2, r2, #8
 80051c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0204 	bic.w	r2, r2, #4
 80051d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69d9      	ldr	r1, [r3, #28]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	61da      	str	r2, [r3, #28]
      break;
 80051ec:	e023      	b.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68b9      	ldr	r1, [r7, #8]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fb11 	bl	800581c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69d9      	ldr	r1, [r3, #28]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	021a      	lsls	r2, r3, #8
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	61da      	str	r2, [r3, #28]
      break;
 800522e:	e002      	b.n	8005236 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	75fb      	strb	r3, [r7, #23]
      break;
 8005234:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800523e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_TIM_ConfigClockSource+0x1c>
 8005260:	2302      	movs	r3, #2
 8005262:	e0b4      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x186>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800528a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800529c:	d03e      	beq.n	800531c <HAL_TIM_ConfigClockSource+0xd4>
 800529e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a2:	f200 8087 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x16c>
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	f000 8086 	beq.w	80053ba <HAL_TIM_ConfigClockSource+0x172>
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b2:	d87f      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x16c>
 80052b4:	2b70      	cmp	r3, #112	; 0x70
 80052b6:	d01a      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0xa6>
 80052b8:	2b70      	cmp	r3, #112	; 0x70
 80052ba:	d87b      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x16c>
 80052bc:	2b60      	cmp	r3, #96	; 0x60
 80052be:	d050      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x11a>
 80052c0:	2b60      	cmp	r3, #96	; 0x60
 80052c2:	d877      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x16c>
 80052c4:	2b50      	cmp	r3, #80	; 0x50
 80052c6:	d03c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xfa>
 80052c8:	2b50      	cmp	r3, #80	; 0x50
 80052ca:	d873      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x16c>
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d058      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x13a>
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d86f      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x16c>
 80052d4:	2b30      	cmp	r3, #48	; 0x30
 80052d6:	d064      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15a>
 80052d8:	2b30      	cmp	r3, #48	; 0x30
 80052da:	d86b      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x16c>
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d060      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15a>
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d867      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x16c>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05c      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15a>
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d05a      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x15a>
 80052ec:	e062      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6899      	ldr	r1, [r3, #8]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f000 fb5d 	bl	80059bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	609a      	str	r2, [r3, #8]
      break;
 800531a:	e04f      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	6899      	ldr	r1, [r3, #8]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f000 fb46 	bl	80059bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800533e:	609a      	str	r2, [r3, #8]
      break;
 8005340:	e03c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	461a      	mov	r2, r3
 8005350:	f000 faba 	bl	80058c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2150      	movs	r1, #80	; 0x50
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fb13 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 8005360:	e02c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6859      	ldr	r1, [r3, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	461a      	mov	r2, r3
 8005370:	f000 fad9 	bl	8005926 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2160      	movs	r1, #96	; 0x60
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fb03 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 8005380:	e01c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6859      	ldr	r1, [r3, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	461a      	mov	r2, r3
 8005390:	f000 fa9a 	bl	80058c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2140      	movs	r1, #64	; 0x40
 800539a:	4618      	mov	r0, r3
 800539c:	f000 faf3 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 80053a0:	e00c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f000 faea 	bl	8005986 <TIM_ITRx_SetConfig>
      break;
 80053b2:	e003      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	e000      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a40      	ldr	r2, [pc, #256]	; (800553c <TIM_Base_SetConfig+0x114>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d013      	beq.n	8005468 <TIM_Base_SetConfig+0x40>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005446:	d00f      	beq.n	8005468 <TIM_Base_SetConfig+0x40>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a3d      	ldr	r2, [pc, #244]	; (8005540 <TIM_Base_SetConfig+0x118>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00b      	beq.n	8005468 <TIM_Base_SetConfig+0x40>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a3c      	ldr	r2, [pc, #240]	; (8005544 <TIM_Base_SetConfig+0x11c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_Base_SetConfig+0x40>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a3b      	ldr	r2, [pc, #236]	; (8005548 <TIM_Base_SetConfig+0x120>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a3a      	ldr	r2, [pc, #232]	; (800554c <TIM_Base_SetConfig+0x124>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d108      	bne.n	800547a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a2f      	ldr	r2, [pc, #188]	; (800553c <TIM_Base_SetConfig+0x114>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d02b      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005488:	d027      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2c      	ldr	r2, [pc, #176]	; (8005540 <TIM_Base_SetConfig+0x118>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d023      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a2b      	ldr	r2, [pc, #172]	; (8005544 <TIM_Base_SetConfig+0x11c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01f      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2a      	ldr	r2, [pc, #168]	; (8005548 <TIM_Base_SetConfig+0x120>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01b      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a29      	ldr	r2, [pc, #164]	; (800554c <TIM_Base_SetConfig+0x124>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d017      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a28      	ldr	r2, [pc, #160]	; (8005550 <TIM_Base_SetConfig+0x128>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a27      	ldr	r2, [pc, #156]	; (8005554 <TIM_Base_SetConfig+0x12c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00f      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a26      	ldr	r2, [pc, #152]	; (8005558 <TIM_Base_SetConfig+0x130>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a25      	ldr	r2, [pc, #148]	; (800555c <TIM_Base_SetConfig+0x134>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a24      	ldr	r2, [pc, #144]	; (8005560 <TIM_Base_SetConfig+0x138>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a23      	ldr	r2, [pc, #140]	; (8005564 <TIM_Base_SetConfig+0x13c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a0a      	ldr	r2, [pc, #40]	; (800553c <TIM_Base_SetConfig+0x114>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_Base_SetConfig+0xf8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a0c      	ldr	r2, [pc, #48]	; (800554c <TIM_Base_SetConfig+0x124>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d103      	bne.n	8005528 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	615a      	str	r2, [r3, #20]
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40010000 	.word	0x40010000
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800
 8005548:	40000c00 	.word	0x40000c00
 800554c:	40010400 	.word	0x40010400
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800
 800555c:	40001800 	.word	0x40001800
 8005560:	40001c00 	.word	0x40001c00
 8005564:	40002000 	.word	0x40002000

08005568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0201 	bic.w	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f023 0302 	bic.w	r3, r3, #2
 80055b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a20      	ldr	r2, [pc, #128]	; (8005640 <TIM_OC1_SetConfig+0xd8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d003      	beq.n	80055cc <TIM_OC1_SetConfig+0x64>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <TIM_OC1_SetConfig+0xdc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d10c      	bne.n	80055e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 0308 	bic.w	r3, r3, #8
 80055d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f023 0304 	bic.w	r3, r3, #4
 80055e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a15      	ldr	r2, [pc, #84]	; (8005640 <TIM_OC1_SetConfig+0xd8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d003      	beq.n	80055f6 <TIM_OC1_SetConfig+0x8e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a14      	ldr	r2, [pc, #80]	; (8005644 <TIM_OC1_SetConfig+0xdc>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d111      	bne.n	800561a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	621a      	str	r2, [r3, #32]
}
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	40010000 	.word	0x40010000
 8005644:	40010400 	.word	0x40010400

08005648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0210 	bic.w	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f023 0320 	bic.w	r3, r3, #32
 8005692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a22      	ldr	r2, [pc, #136]	; (800572c <TIM_OC2_SetConfig+0xe4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_OC2_SetConfig+0x68>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a21      	ldr	r2, [pc, #132]	; (8005730 <TIM_OC2_SetConfig+0xe8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10d      	bne.n	80056cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a17      	ldr	r2, [pc, #92]	; (800572c <TIM_OC2_SetConfig+0xe4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_OC2_SetConfig+0x94>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a16      	ldr	r2, [pc, #88]	; (8005730 <TIM_OC2_SetConfig+0xe8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d113      	bne.n	8005704 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40010000 	.word	0x40010000
 8005730:	40010400 	.word	0x40010400

08005734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0303 	bic.w	r3, r3, #3
 800576a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800577c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a21      	ldr	r2, [pc, #132]	; (8005814 <TIM_OC3_SetConfig+0xe0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d003      	beq.n	800579a <TIM_OC3_SetConfig+0x66>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a20      	ldr	r2, [pc, #128]	; (8005818 <TIM_OC3_SetConfig+0xe4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d10d      	bne.n	80057b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a16      	ldr	r2, [pc, #88]	; (8005814 <TIM_OC3_SetConfig+0xe0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d003      	beq.n	80057c6 <TIM_OC3_SetConfig+0x92>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a15      	ldr	r2, [pc, #84]	; (8005818 <TIM_OC3_SetConfig+0xe4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d113      	bne.n	80057ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4313      	orrs	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	621a      	str	r2, [r3, #32]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40010000 	.word	0x40010000
 8005818:	40010400 	.word	0x40010400

0800581c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800584a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	021b      	lsls	r3, r3, #8
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	031b      	lsls	r3, r3, #12
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <TIM_OC4_SetConfig+0xa4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_OC4_SetConfig+0x68>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a11      	ldr	r2, [pc, #68]	; (80058c4 <TIM_OC4_SetConfig+0xa8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d109      	bne.n	8005898 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800588a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	019b      	lsls	r3, r3, #6
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	621a      	str	r2, [r3, #32]
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40010000 	.word	0x40010000
 80058c4:	40010400 	.word	0x40010400

080058c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b087      	sub	sp, #28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f023 0201 	bic.w	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f023 030a 	bic.w	r3, r3, #10
 8005904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	f023 0210 	bic.w	r2, r3, #16
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	031b      	lsls	r3, r3, #12
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f043 0307 	orr.w	r3, r3, #7
 80059a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	021a      	lsls	r2, r3, #8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	431a      	orrs	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	609a      	str	r2, [r3, #8]
}
 80059f0:	bf00      	nop
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e05a      	b.n	8005aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a21      	ldr	r2, [pc, #132]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d022      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a60:	d01d      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d018      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1b      	ldr	r2, [pc, #108]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a17      	ldr	r2, [pc, #92]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d10c      	bne.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40010000 	.word	0x40010000
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800
 8005ae4:	40000c00 	.word	0x40000c00
 8005ae8:	40010400 	.word	0x40010400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40001800 	.word	0x40001800

08005af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	f107 001c 	add.w	r0, r7, #28
 8005b2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d122      	bne.n	8005b7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d105      	bne.n	8005b6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 fbee 	bl	8007350 <USB_CoreReset>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]
 8005b78:	e01a      	b.n	8005bb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 fbe2 	bl	8007350 <USB_CoreReset>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ba2:	e005      	b.n	8005bb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d10b      	bne.n	8005bce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f043 0206 	orr.w	r2, r3, #6
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f043 0220 	orr.w	r2, r3, #32
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bda:	b004      	add	sp, #16
 8005bdc:	4770      	bx	lr
	...

08005be0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bee:	79fb      	ldrb	r3, [r7, #7]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d165      	bne.n	8005cc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4a41      	ldr	r2, [pc, #260]	; (8005cfc <USB_SetTurnaroundTime+0x11c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d906      	bls.n	8005c0a <USB_SetTurnaroundTime+0x2a>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4a40      	ldr	r2, [pc, #256]	; (8005d00 <USB_SetTurnaroundTime+0x120>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d202      	bcs.n	8005c0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c04:	230f      	movs	r3, #15
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e062      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4a3c      	ldr	r2, [pc, #240]	; (8005d00 <USB_SetTurnaroundTime+0x120>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d306      	bcc.n	8005c20 <USB_SetTurnaroundTime+0x40>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4a3b      	ldr	r2, [pc, #236]	; (8005d04 <USB_SetTurnaroundTime+0x124>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d202      	bcs.n	8005c20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c1a:	230e      	movs	r3, #14
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	e057      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4a38      	ldr	r2, [pc, #224]	; (8005d04 <USB_SetTurnaroundTime+0x124>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d306      	bcc.n	8005c36 <USB_SetTurnaroundTime+0x56>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4a37      	ldr	r2, [pc, #220]	; (8005d08 <USB_SetTurnaroundTime+0x128>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d202      	bcs.n	8005c36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c30:	230d      	movs	r3, #13
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	e04c      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4a33      	ldr	r2, [pc, #204]	; (8005d08 <USB_SetTurnaroundTime+0x128>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d306      	bcc.n	8005c4c <USB_SetTurnaroundTime+0x6c>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4a32      	ldr	r2, [pc, #200]	; (8005d0c <USB_SetTurnaroundTime+0x12c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d802      	bhi.n	8005c4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c46:	230c      	movs	r3, #12
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	e041      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4a2f      	ldr	r2, [pc, #188]	; (8005d0c <USB_SetTurnaroundTime+0x12c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d906      	bls.n	8005c62 <USB_SetTurnaroundTime+0x82>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4a2e      	ldr	r2, [pc, #184]	; (8005d10 <USB_SetTurnaroundTime+0x130>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d802      	bhi.n	8005c62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c5c:	230b      	movs	r3, #11
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e036      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	4a2a      	ldr	r2, [pc, #168]	; (8005d10 <USB_SetTurnaroundTime+0x130>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d906      	bls.n	8005c78 <USB_SetTurnaroundTime+0x98>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4a29      	ldr	r2, [pc, #164]	; (8005d14 <USB_SetTurnaroundTime+0x134>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d802      	bhi.n	8005c78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c72:	230a      	movs	r3, #10
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e02b      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4a26      	ldr	r2, [pc, #152]	; (8005d14 <USB_SetTurnaroundTime+0x134>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d906      	bls.n	8005c8e <USB_SetTurnaroundTime+0xae>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4a25      	ldr	r2, [pc, #148]	; (8005d18 <USB_SetTurnaroundTime+0x138>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d202      	bcs.n	8005c8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c88:	2309      	movs	r3, #9
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	e020      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <USB_SetTurnaroundTime+0x138>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d306      	bcc.n	8005ca4 <USB_SetTurnaroundTime+0xc4>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4a20      	ldr	r2, [pc, #128]	; (8005d1c <USB_SetTurnaroundTime+0x13c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d802      	bhi.n	8005ca4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	e015      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <USB_SetTurnaroundTime+0x13c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d906      	bls.n	8005cba <USB_SetTurnaroundTime+0xda>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <USB_SetTurnaroundTime+0x140>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d202      	bcs.n	8005cba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005cb4:	2307      	movs	r3, #7
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e00a      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005cba:	2306      	movs	r3, #6
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	e007      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005cc0:	79fb      	ldrb	r3, [r7, #7]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005cc6:	2309      	movs	r3, #9
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e001      	b.n	8005cd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ccc:	2309      	movs	r3, #9
 8005cce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	029b      	lsls	r3, r3, #10
 8005ce4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	371c      	adds	r7, #28
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	00d8acbf 	.word	0x00d8acbf
 8005d00:	00e4e1c0 	.word	0x00e4e1c0
 8005d04:	00f42400 	.word	0x00f42400
 8005d08:	01067380 	.word	0x01067380
 8005d0c:	011a499f 	.word	0x011a499f
 8005d10:	01312cff 	.word	0x01312cff
 8005d14:	014ca43f 	.word	0x014ca43f
 8005d18:	016e3600 	.word	0x016e3600
 8005d1c:	01a6ab1f 	.word	0x01a6ab1f
 8005d20:	01e84800 	.word	0x01e84800

08005d24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f043 0201 	orr.w	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f023 0201 	bic.w	r2, r3, #1
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d115      	bne.n	8005db6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d96:	2001      	movs	r0, #1
 8005d98:	f7fb fdea 	bl	8001970 <HAL_Delay>
      ms++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f001 fa45 	bl	8007232 <USB_GetMode>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d01e      	beq.n	8005dec <USB_SetCurrentMode+0x84>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b31      	cmp	r3, #49	; 0x31
 8005db2:	d9f0      	bls.n	8005d96 <USB_SetCurrentMode+0x2e>
 8005db4:	e01a      	b.n	8005dec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d115      	bne.n	8005de8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dc8:	2001      	movs	r0, #1
 8005dca:	f7fb fdd1 	bl	8001970 <HAL_Delay>
      ms++;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 fa2c 	bl	8007232 <USB_GetMode>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <USB_SetCurrentMode+0x84>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b31      	cmp	r3, #49	; 0x31
 8005de4:	d9f0      	bls.n	8005dc8 <USB_SetCurrentMode+0x60>
 8005de6:	e001      	b.n	8005dec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e005      	b.n	8005df8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b32      	cmp	r3, #50	; 0x32
 8005df0:	d101      	bne.n	8005df6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e00:	b084      	sub	sp, #16
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b086      	sub	sp, #24
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	e009      	b.n	8005e34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3340      	adds	r3, #64	; 0x40
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3301      	adds	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b0e      	cmp	r3, #14
 8005e38:	d9f2      	bls.n	8005e20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d11c      	bne.n	8005e7a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e4e:	f043 0302 	orr.w	r3, r3, #2
 8005e52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38
 8005e78:	e00b      	b.n	8005e92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e98:	461a      	mov	r2, r3
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eac:	461a      	mov	r2, r3
 8005eae:	680b      	ldr	r3, [r1, #0]
 8005eb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d10c      	bne.n	8005ed2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f965 	bl	8006190 <USB_SetDevSpeed>
 8005ec6:	e008      	b.n	8005eda <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ec8:	2101      	movs	r1, #1
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f960 	bl	8006190 <USB_SetDevSpeed>
 8005ed0:	e003      	b.n	8005eda <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ed2:	2103      	movs	r1, #3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f95b 	bl	8006190 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005eda:	2110      	movs	r1, #16
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f8f3 	bl	80060c8 <USB_FlushTxFifo>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f91f 	bl	8006130 <USB_FlushRxFifo>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	461a      	mov	r2, r3
 8005f04:	2300      	movs	r3, #0
 8005f06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2300      	movs	r3, #0
 8005f12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	e043      	b.n	8005fae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f3c:	d118      	bne.n	8005f70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	461a      	mov	r2, r3
 8005f52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	e013      	b.n	8005f82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	461a      	mov	r2, r3
 8005f68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	e008      	b.n	8005f82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8e:	461a      	mov	r2, r3
 8005f90:	2300      	movs	r3, #0
 8005f92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	3301      	adds	r3, #1
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d3b7      	bcc.n	8005f26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	613b      	str	r3, [r7, #16]
 8005fba:	e043      	b.n	8006044 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fd2:	d118      	bne.n	8006006 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10a      	bne.n	8005ff0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e013      	b.n	8006018 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	e008      	b.n	8006018 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	461a      	mov	r2, r3
 8006014:	2300      	movs	r3, #0
 8006016:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006024:	461a      	mov	r2, r3
 8006026:	2300      	movs	r3, #0
 8006028:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006036:	461a      	mov	r2, r3
 8006038:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800603c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	3301      	adds	r3, #1
 8006042:	613b      	str	r3, [r7, #16]
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	429a      	cmp	r2, r3
 800604a:	d3b7      	bcc.n	8005fbc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800605a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800605e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800606c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	2b00      	cmp	r3, #0
 8006072:	d105      	bne.n	8006080 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f043 0210 	orr.w	r2, r3, #16
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699a      	ldr	r2, [r3, #24]
 8006084:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <USB_DevInit+0x2c4>)
 8006086:	4313      	orrs	r3, r2
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800608c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f043 0208 	orr.w	r2, r3, #8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800609e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d107      	bne.n	80060b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ac:	f043 0304 	orr.w	r3, r3, #4
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3718      	adds	r7, #24
 80060ba:	46bd      	mov	sp, r7
 80060bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060c0:	b004      	add	sp, #16
 80060c2:	4770      	bx	lr
 80060c4:	803c3800 	.word	0x803c3800

080060c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3301      	adds	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a13      	ldr	r2, [pc, #76]	; (800612c <USB_FlushTxFifo+0x64>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d901      	bls.n	80060e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e01b      	b.n	8006120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	daf2      	bge.n	80060d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	019b      	lsls	r3, r3, #6
 80060f8:	f043 0220 	orr.w	r2, r3, #32
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a08      	ldr	r2, [pc, #32]	; (800612c <USB_FlushTxFifo+0x64>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d901      	bls.n	8006112 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e006      	b.n	8006120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b20      	cmp	r3, #32
 800611c:	d0f0      	beq.n	8006100 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	00030d40 	.word	0x00030d40

08006130 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3301      	adds	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4a11      	ldr	r2, [pc, #68]	; (800618c <USB_FlushRxFifo+0x5c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e018      	b.n	8006180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	daf2      	bge.n	800613c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2210      	movs	r2, #16
 800615e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3301      	adds	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a08      	ldr	r2, [pc, #32]	; (800618c <USB_FlushRxFifo+0x5c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d901      	bls.n	8006172 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e006      	b.n	8006180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	2b10      	cmp	r3, #16
 800617c:	d0f0      	beq.n	8006160 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	00030d40 	.word	0x00030d40

08006190 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061b0:	4313      	orrs	r3, r2
 80061b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b087      	sub	sp, #28
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0306 	and.w	r3, r3, #6
 80061da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d102      	bne.n	80061e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]
 80061e6:	e00a      	b.n	80061fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d002      	beq.n	80061f4 <USB_GetDevSpeed+0x32>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b06      	cmp	r3, #6
 80061f2:	d102      	bne.n	80061fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061f4:	2302      	movs	r3, #2
 80061f6:	75fb      	strb	r3, [r7, #23]
 80061f8:	e001      	b.n	80061fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061fa:	230f      	movs	r3, #15
 80061fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006200:	4618      	mov	r0, r3
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	785b      	ldrb	r3, [r3, #1]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d13a      	bne.n	800629e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	2101      	movs	r1, #1
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	b29b      	uxth	r3, r3
 8006240:	68f9      	ldr	r1, [r7, #12]
 8006242:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006246:	4313      	orrs	r3, r2
 8006248:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d155      	bne.n	800630c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	791b      	ldrb	r3, [r3, #4]
 800627a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800627c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	059b      	lsls	r3, r3, #22
 8006282:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006284:	4313      	orrs	r3, r2
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	440a      	add	r2, r1
 800628e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	e036      	b.n	800630c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	2101      	movs	r1, #1
 80062b0:	fa01 f303 	lsl.w	r3, r1, r3
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	68f9      	ldr	r1, [r7, #12]
 80062b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062bc:	4313      	orrs	r3, r2
 80062be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d11a      	bne.n	800630c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062f2:	430b      	orrs	r3, r1
 80062f4:	4313      	orrs	r3, r2
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d161      	bne.n	80063fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800634a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800634e:	d11f      	bne.n	8006390 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800636e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800638e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f003 030f 	and.w	r3, r3, #15
 80063a0:	2101      	movs	r1, #1
 80063a2:	fa01 f303 	lsl.w	r3, r1, r3
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	43db      	mvns	r3, r3
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063b0:	4013      	ands	r3, r2
 80063b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	43db      	mvns	r3, r3
 80063ce:	68f9      	ldr	r1, [r7, #12]
 80063d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063d4:	4013      	ands	r3, r2
 80063d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	0159      	lsls	r1, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	440b      	add	r3, r1
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	4619      	mov	r1, r3
 80063f4:	4b35      	ldr	r3, [pc, #212]	; (80064cc <USB_DeactivateEndpoint+0x1b0>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]
 80063fa:	e060      	b.n	80064be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800640e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006412:	d11f      	bne.n	8006454 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	440a      	add	r2, r1
 800642a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800642e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006432:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006452:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	2101      	movs	r1, #1
 8006466:	fa01 f303 	lsl.w	r3, r1, r3
 800646a:	041b      	lsls	r3, r3, #16
 800646c:	43db      	mvns	r3, r3
 800646e:	68f9      	ldr	r1, [r7, #12]
 8006470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006474:	4013      	ands	r3, r2
 8006476:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	2101      	movs	r1, #1
 800648a:	fa01 f303 	lsl.w	r3, r1, r3
 800648e:	041b      	lsls	r3, r3, #16
 8006490:	43db      	mvns	r3, r3
 8006492:	68f9      	ldr	r1, [r7, #12]
 8006494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006498:	4013      	ands	r3, r2
 800649a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	0159      	lsls	r1, r3, #5
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	440b      	add	r3, r1
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	4619      	mov	r1, r3
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <USB_DeactivateEndpoint+0x1b4>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	ec337800 	.word	0xec337800
 80064d0:	eff37800 	.word	0xeff37800

080064d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	; 0x28
 80064d8:	af02      	add	r7, sp, #8
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	785b      	ldrb	r3, [r3, #1]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	f040 815c 	bne.w	80067ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d132      	bne.n	8006564 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	0151      	lsls	r1, r2, #5
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	440a      	add	r2, r1
 8006514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006518:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800651c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006520:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	0151      	lsls	r1, r2, #5
 8006534:	69fa      	ldr	r2, [r7, #28]
 8006536:	440a      	add	r2, r1
 8006538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006540:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	0151      	lsls	r1, r2, #5
 8006554:	69fa      	ldr	r2, [r7, #28]
 8006556:	440a      	add	r2, r1
 8006558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655c:	0cdb      	lsrs	r3, r3, #19
 800655e:	04db      	lsls	r3, r3, #19
 8006560:	6113      	str	r3, [r2, #16]
 8006562:	e074      	b.n	800664e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	440a      	add	r2, r1
 800657a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657e:	0cdb      	lsrs	r3, r3, #19
 8006580:	04db      	lsls	r3, r3, #19
 8006582:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	0151      	lsls	r1, r2, #5
 8006596:	69fa      	ldr	r2, [r7, #28]
 8006598:	440a      	add	r2, r1
 800659a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800659e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6999      	ldr	r1, [r3, #24]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	440b      	add	r3, r1
 80065c0:	1e59      	subs	r1, r3, #1
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80065ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065cc:	4b9d      	ldr	r3, [pc, #628]	; (8006844 <USB_EPStartXfer+0x370>)
 80065ce:	400b      	ands	r3, r1
 80065d0:	69b9      	ldr	r1, [r7, #24]
 80065d2:	0148      	lsls	r0, r1, #5
 80065d4:	69f9      	ldr	r1, [r7, #28]
 80065d6:	4401      	add	r1, r0
 80065d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065dc:	4313      	orrs	r3, r2
 80065de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	691a      	ldr	r2, [r3, #16]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065f6:	69b9      	ldr	r1, [r7, #24]
 80065f8:	0148      	lsls	r0, r1, #5
 80065fa:	69f9      	ldr	r1, [r7, #28]
 80065fc:	4401      	add	r1, r0
 80065fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006602:	4313      	orrs	r3, r2
 8006604:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	791b      	ldrb	r3, [r3, #4]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d11f      	bne.n	800664e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	0151      	lsls	r1, r2, #5
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	440a      	add	r2, r1
 8006624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006628:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800662c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	0151      	lsls	r1, r2, #5
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	440a      	add	r2, r1
 8006644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006648:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800664c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d14b      	bne.n	80066ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d009      	beq.n	8006670 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006668:	461a      	mov	r2, r3
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	791b      	ldrb	r3, [r3, #4]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d128      	bne.n	80066ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006684:	2b00      	cmp	r3, #0
 8006686:	d110      	bne.n	80066aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e00f      	b.n	80066ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	0151      	lsls	r1, r2, #5
 80066dc:	69fa      	ldr	r2, [r7, #28]
 80066de:	440a      	add	r2, r1
 80066e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e133      	b.n	8006954 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	440a      	add	r2, r1
 8006702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006706:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800670a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	791b      	ldrb	r3, [r3, #4]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d015      	beq.n	8006740 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 811b 	beq.w	8006954 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	2101      	movs	r1, #1
 8006730:	fa01 f303 	lsl.w	r3, r1, r3
 8006734:	69f9      	ldr	r1, [r7, #28]
 8006736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800673a:	4313      	orrs	r3, r2
 800673c:	634b      	str	r3, [r1, #52]	; 0x34
 800673e:	e109      	b.n	8006954 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674c:	2b00      	cmp	r3, #0
 800674e:	d110      	bne.n	8006772 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	e00f      	b.n	8006792 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	440a      	add	r2, r1
 8006788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006790:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6919      	ldr	r1, [r3, #16]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	b298      	uxth	r0, r3
 80067a0:	79fb      	ldrb	r3, [r7, #7]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	4603      	mov	r3, r0
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fade 	bl	8006d68 <USB_WritePacket>
 80067ac:	e0d2      	b.n	8006954 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c8:	0cdb      	lsrs	r3, r3, #19
 80067ca:	04db      	lsls	r3, r3, #19
 80067cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	0151      	lsls	r1, r2, #5
 80067e0:	69fa      	ldr	r2, [r7, #28]
 80067e2:	440a      	add	r2, r1
 80067e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d126      	bne.n	8006848 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006810:	69b9      	ldr	r1, [r7, #24]
 8006812:	0148      	lsls	r0, r1, #5
 8006814:	69f9      	ldr	r1, [r7, #28]
 8006816:	4401      	add	r1, r0
 8006818:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800681c:	4313      	orrs	r3, r2
 800681e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	0151      	lsls	r1, r2, #5
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	440a      	add	r2, r1
 8006836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800683a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800683e:	6113      	str	r3, [r2, #16]
 8006840:	e03a      	b.n	80068b8 <USB_EPStartXfer+0x3e4>
 8006842:	bf00      	nop
 8006844:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	699a      	ldr	r2, [r3, #24]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4413      	add	r3, r2
 8006852:	1e5a      	subs	r2, r3, #1
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	fbb2 f3f3 	udiv	r3, r2, r3
 800685c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	8afa      	ldrh	r2, [r7, #22]
 8006864:	fb03 f202 	mul.w	r2, r3, r2
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	8afb      	ldrh	r3, [r7, #22]
 800687c:	04d9      	lsls	r1, r3, #19
 800687e:	4b38      	ldr	r3, [pc, #224]	; (8006960 <USB_EPStartXfer+0x48c>)
 8006880:	400b      	ands	r3, r1
 8006882:	69b9      	ldr	r1, [r7, #24]
 8006884:	0148      	lsls	r0, r1, #5
 8006886:	69f9      	ldr	r1, [r7, #28]
 8006888:	4401      	add	r1, r0
 800688a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800688e:	4313      	orrs	r3, r2
 8006890:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a8:	69b9      	ldr	r1, [r7, #24]
 80068aa:	0148      	lsls	r0, r1, #5
 80068ac:	69f9      	ldr	r1, [r7, #28]
 80068ae:	4401      	add	r1, r0
 80068b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068b4:	4313      	orrs	r3, r2
 80068b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d10d      	bne.n	80068da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d009      	beq.n	80068da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6919      	ldr	r1, [r3, #16]
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d6:	460a      	mov	r2, r1
 80068d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	791b      	ldrb	r3, [r3, #4]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d128      	bne.n	8006934 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d110      	bne.n	8006914 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	e00f      	b.n	8006934 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	440a      	add	r2, r1
 800692a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800692e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006932:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	440a      	add	r2, r1
 800694a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006952:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	1ff80000 	.word	0x1ff80000

08006964 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	4613      	mov	r3, r2
 8006970:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b01      	cmp	r3, #1
 8006982:	f040 80ce 	bne.w	8006b22 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d132      	bne.n	80069f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	0151      	lsls	r1, r2, #5
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	440a      	add	r2, r1
 80069c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ec:	0cdb      	lsrs	r3, r3, #19
 80069ee:	04db      	lsls	r3, r3, #19
 80069f0:	6113      	str	r3, [r2, #16]
 80069f2:	e04e      	b.n	8006a92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0e:	0cdb      	lsrs	r3, r3, #19
 8006a10:	04db      	lsls	r3, r3, #19
 8006a12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	699a      	ldr	r2, [r3, #24]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d903      	bls.n	8006a4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	0151      	lsls	r1, r2, #5
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	440a      	add	r2, r1
 8006a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a82:	6939      	ldr	r1, [r7, #16]
 8006a84:	0148      	lsls	r0, r1, #5
 8006a86:	6979      	ldr	r1, [r7, #20]
 8006a88:	4401      	add	r1, r0
 8006a8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d11e      	bne.n	8006ad6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d009      	beq.n	8006ab4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aac:	461a      	mov	r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ace:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	e097      	b.n	8006c06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006af4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 8083 	beq.w	8006c06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	2101      	movs	r1, #1
 8006b12:	fa01 f303 	lsl.w	r3, r1, r3
 8006b16:	6979      	ldr	r1, [r7, #20]
 8006b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	634b      	str	r3, [r1, #52]	; 0x34
 8006b20:	e071      	b.n	8006c06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	0151      	lsls	r1, r2, #5
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	440a      	add	r2, r1
 8006b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3c:	0cdb      	lsrs	r3, r3, #19
 8006b3e:	04db      	lsls	r3, r3, #19
 8006b40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bb4:	6939      	ldr	r1, [r7, #16]
 8006bb6:	0148      	lsls	r0, r1, #5
 8006bb8:	6979      	ldr	r1, [r7, #20]
 8006bba:	4401      	add	r1, r0
 8006bbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006bc4:	79fb      	ldrb	r3, [r7, #7]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d10d      	bne.n	8006be6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	6919      	ldr	r1, [r3, #16]
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be2:	460a      	mov	r2, r1
 8006be4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	371c      	adds	r7, #28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d14a      	bne.n	8006cc8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4a:	f040 8086 	bne.w	8006d5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	7812      	ldrb	r2, [r2, #0]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	7812      	ldrb	r2, [r2, #0]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d902      	bls.n	8006cac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8006caa:	e056      	b.n	8006d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc4:	d0e7      	beq.n	8006c96 <USB_EPStopXfer+0x82>
 8006cc6:	e048      	b.n	8006d5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce0:	d13b      	bne.n	8006d5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	7812      	ldrb	r2, [r2, #0]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d902      	bls.n	8006d40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d3e:	e00c      	b.n	8006d5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d58:	d0e7      	beq.n	8006d2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	371c      	adds	r7, #28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b089      	sub	sp, #36	; 0x24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4611      	mov	r1, r2
 8006d74:	461a      	mov	r2, r3
 8006d76:	460b      	mov	r3, r1
 8006d78:	71fb      	strb	r3, [r7, #7]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d123      	bne.n	8006dd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d8e:	88bb      	ldrh	r3, [r7, #4]
 8006d90:	3303      	adds	r3, #3
 8006d92:	089b      	lsrs	r3, r3, #2
 8006d94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d96:	2300      	movs	r3, #0
 8006d98:	61bb      	str	r3, [r7, #24]
 8006d9a:	e018      	b.n	8006dce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d9c:	79fb      	ldrb	r3, [r7, #7]
 8006d9e:	031a      	lsls	r2, r3, #12
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da8:	461a      	mov	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	3301      	adds	r3, #1
 8006dba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d3e2      	bcc.n	8006d9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3724      	adds	r7, #36	; 0x24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b08b      	sub	sp, #44	; 0x2c
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4613      	mov	r3, r2
 8006df0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006dfa:	88fb      	ldrh	r3, [r7, #6]
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	623b      	str	r3, [r7, #32]
 8006e0e:	e014      	b.n	8006e3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	3301      	adds	r3, #1
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	3301      	adds	r3, #1
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	3301      	adds	r3, #1
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	3301      	adds	r3, #1
 8006e38:	623b      	str	r3, [r7, #32]
 8006e3a:	6a3a      	ldr	r2, [r7, #32]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d3e6      	bcc.n	8006e10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e42:	8bfb      	ldrh	r3, [r7, #30]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01e      	beq.n	8006e86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e52:	461a      	mov	r2, r3
 8006e54:	f107 0310 	add.w	r3, r7, #16
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	701a      	strb	r2, [r3, #0]
      i++;
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	3301      	adds	r3, #1
 8006e72:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	3301      	adds	r3, #1
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e7a:	8bfb      	ldrh	r3, [r7, #30]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e80:	8bfb      	ldrh	r3, [r7, #30]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1ea      	bne.n	8006e5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	372c      	adds	r7, #44	; 0x2c
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	785b      	ldrb	r3, [r3, #1]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d12c      	bne.n	8006f0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	db12      	blt.n	8006ee8 <USB_EPSetStall+0x54>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00f      	beq.n	8006ee8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	0151      	lsls	r1, r2, #5
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	440a      	add	r2, r1
 8006ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ee6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	0151      	lsls	r1, r2, #5
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	440a      	add	r2, r1
 8006efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	e02b      	b.n	8006f62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	db12      	blt.n	8006f42 <USB_EPSetStall+0xae>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00f      	beq.n	8006f42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	0151      	lsls	r1, r2, #5
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	440a      	add	r2, r1
 8006f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d128      	bne.n	8006fde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006faa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	791b      	ldrb	r3, [r3, #4]
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d003      	beq.n	8006fbc <USB_EPClearStall+0x4c>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	791b      	ldrb	r3, [r3, #4]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d138      	bne.n	800702e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	e027      	b.n	800702e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ffc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	791b      	ldrb	r3, [r3, #4]
 8007002:	2b03      	cmp	r3, #3
 8007004:	d003      	beq.n	800700e <USB_EPClearStall+0x9e>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	791b      	ldrb	r3, [r3, #4]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d10f      	bne.n	800702e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800705a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800705e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007070:	68f9      	ldr	r1, [r7, #12]
 8007072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007076:	4313      	orrs	r3, r2
 8007078:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070a2:	f023 0303 	bic.w	r3, r3, #3
 80070a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b6:	f023 0302 	bic.w	r3, r3, #2
 80070ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070e4:	f023 0303 	bic.w	r3, r3, #3
 80070e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070f8:	f043 0302 	orr.w	r3, r3, #2
 80070fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4013      	ands	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007124:	68fb      	ldr	r3, [r7, #12]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	4013      	ands	r3, r2
 8007154:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	0c1b      	lsrs	r3, r3, #16
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	4013      	ands	r3, r2
 8007188:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	b29b      	uxth	r3, r3
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800719a:	b480      	push	{r7}
 800719c:	b085      	sub	sp, #20
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4013      	ands	r3, r2
 80071c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071c8:	68bb      	ldr	r3, [r7, #8]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b087      	sub	sp, #28
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	f003 030f 	and.w	r3, r3, #15
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	fa22 f303 	lsr.w	r3, r2, r3
 8007206:	01db      	lsls	r3, r3, #7
 8007208:	b2db      	uxtb	r3, r3
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4013      	ands	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007224:	68bb      	ldr	r3, [r7, #8]
}
 8007226:	4618      	mov	r0, r3
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	f003 0301 	and.w	r3, r3, #1
}
 8007242:	4618      	mov	r0, r3
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007268:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800726c:	f023 0307 	bic.w	r3, r3, #7
 8007270:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	460b      	mov	r3, r1
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	333c      	adds	r3, #60	; 0x3c
 80072aa:	3304      	adds	r3, #4
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	4a26      	ldr	r2, [pc, #152]	; (800734c <USB_EP0_OutStart+0xb8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d90a      	bls.n	80072ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072c8:	d101      	bne.n	80072ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e037      	b.n	800733e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	461a      	mov	r2, r3
 80072d6:	2300      	movs	r3, #0
 80072d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	697a      	ldr	r2, [r7, #20]
 80072e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072fc:	f043 0318 	orr.w	r3, r3, #24
 8007300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007310:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007314:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007316:	7afb      	ldrb	r3, [r7, #11]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d10f      	bne.n	800733c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007336:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800733a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	4f54300a 	.word	0x4f54300a

08007350 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4a13      	ldr	r2, [pc, #76]	; (80073b4 <USB_CoreReset+0x64>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e01b      	b.n	80073a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	daf2      	bge.n	800735c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f043 0201 	orr.w	r2, r3, #1
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3301      	adds	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a09      	ldr	r2, [pc, #36]	; (80073b4 <USB_CoreReset+0x64>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d901      	bls.n	8007398 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e006      	b.n	80073a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d0f0      	beq.n	8007386 <USB_CoreReset+0x36>

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	00030d40 	.word	0x00030d40

080073b8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80073c4:	2010      	movs	r0, #16
 80073c6:	f005 f96b 	bl	800c6a0 <USBD_static_malloc>
 80073ca:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d109      	bne.n	80073e6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	32b0      	adds	r2, #176	; 0xb0
 80073dc:	2100      	movs	r1, #0
 80073de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80073e2:	2302      	movs	r3, #2
 80073e4:	e048      	b.n	8007478 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	32b0      	adds	r2, #176	; 0xb0
 80073f0:	68f9      	ldr	r1, [r7, #12]
 80073f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	32b0      	adds	r2, #176	; 0xb0
 8007400:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7c1b      	ldrb	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10d      	bne.n	800742e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8007412:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <USBD_HID_Init+0xc8>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	f003 020f 	and.w	r2, r3, #15
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	3326      	adds	r3, #38	; 0x26
 8007428:	2207      	movs	r2, #7
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	e00c      	b.n	8007448 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800742e:	4b14      	ldr	r3, [pc, #80]	; (8007480 <USBD_HID_Init+0xc8>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	f003 020f 	and.w	r2, r3, #15
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	3326      	adds	r3, #38	; 0x26
 8007444:	220a      	movs	r2, #10
 8007446:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007448:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <USBD_HID_Init+0xc8>)
 800744a:	7819      	ldrb	r1, [r3, #0]
 800744c:	2304      	movs	r3, #4
 800744e:	2203      	movs	r2, #3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f005 f814 	bl	800c47e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007456:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <USBD_HID_Init+0xc8>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	f003 020f 	and.w	r2, r3, #15
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	440b      	add	r3, r1
 800746a:	3324      	adds	r3, #36	; 0x24
 800746c:	2201      	movs	r2, #1
 800746e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	2000023e 	.word	0x2000023e

08007484 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8007490:	4b1f      	ldr	r3, [pc, #124]	; (8007510 <USBD_HID_DeInit+0x8c>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f005 f817 	bl	800c4ca <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800749c:	4b1c      	ldr	r3, [pc, #112]	; (8007510 <USBD_HID_DeInit+0x8c>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	f003 020f 	and.w	r2, r3, #15
 80074a4:	6879      	ldr	r1, [r7, #4]
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	440b      	add	r3, r1
 80074b0:	3324      	adds	r3, #36	; 0x24
 80074b2:	2200      	movs	r2, #0
 80074b4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80074b6:	4b16      	ldr	r3, [pc, #88]	; (8007510 <USBD_HID_DeInit+0x8c>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f003 020f 	and.w	r2, r3, #15
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	3326      	adds	r3, #38	; 0x26
 80074cc:	2200      	movs	r2, #0
 80074ce:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	32b0      	adds	r2, #176	; 0xb0
 80074da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d011      	beq.n	8007506 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	32b0      	adds	r2, #176	; 0xb0
 80074ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f005 f8e3 	bl	800c6bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	32b0      	adds	r2, #176	; 0xb0
 8007500:	2100      	movs	r1, #0
 8007502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	2000023e 	.word	0x2000023e

08007514 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	32b0      	adds	r2, #176	; 0xb0
 8007528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	e0e8      	b.n	8007712 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007548:	2b00      	cmp	r3, #0
 800754a:	d046      	beq.n	80075da <USBD_HID_Setup+0xc6>
 800754c:	2b20      	cmp	r3, #32
 800754e:	f040 80d8 	bne.w	8007702 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	785b      	ldrb	r3, [r3, #1]
 8007556:	3b02      	subs	r3, #2
 8007558:	2b09      	cmp	r3, #9
 800755a:	d836      	bhi.n	80075ca <USBD_HID_Setup+0xb6>
 800755c:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <USBD_HID_Setup+0x50>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	080075bb 	.word	0x080075bb
 8007568:	0800759b 	.word	0x0800759b
 800756c:	080075cb 	.word	0x080075cb
 8007570:	080075cb 	.word	0x080075cb
 8007574:	080075cb 	.word	0x080075cb
 8007578:	080075cb 	.word	0x080075cb
 800757c:	080075cb 	.word	0x080075cb
 8007580:	080075cb 	.word	0x080075cb
 8007584:	080075a9 	.word	0x080075a9
 8007588:	0800758d 	.word	0x0800758d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	885b      	ldrh	r3, [r3, #2]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	461a      	mov	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	601a      	str	r2, [r3, #0]
          break;
 8007598:	e01e      	b.n	80075d8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f001 fbd5 	bl	8008d50 <USBD_CtlSendData>
          break;
 80075a6:	e017      	b.n	80075d8 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	885b      	ldrh	r3, [r3, #2]
 80075ac:	0a1b      	lsrs	r3, r3, #8
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	605a      	str	r2, [r3, #4]
          break;
 80075b8:	e00e      	b.n	80075d8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3304      	adds	r3, #4
 80075be:	2201      	movs	r2, #1
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fbc4 	bl	8008d50 <USBD_CtlSendData>
          break;
 80075c8:	e006      	b.n	80075d8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 fb4e 	bl	8008c6e <USBD_CtlError>
          ret = USBD_FAIL;
 80075d2:	2303      	movs	r3, #3
 80075d4:	75fb      	strb	r3, [r7, #23]
          break;
 80075d6:	bf00      	nop
      }
      break;
 80075d8:	e09a      	b.n	8007710 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	785b      	ldrb	r3, [r3, #1]
 80075de:	2b0b      	cmp	r3, #11
 80075e0:	f200 8086 	bhi.w	80076f0 <USBD_HID_Setup+0x1dc>
 80075e4:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <USBD_HID_Setup+0xd8>)
 80075e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ea:	bf00      	nop
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	080076ff 	.word	0x080076ff
 80075f4:	080076f1 	.word	0x080076f1
 80075f8:	080076f1 	.word	0x080076f1
 80075fc:	080076f1 	.word	0x080076f1
 8007600:	080076f1 	.word	0x080076f1
 8007604:	08007647 	.word	0x08007647
 8007608:	080076f1 	.word	0x080076f1
 800760c:	080076f1 	.word	0x080076f1
 8007610:	080076f1 	.word	0x080076f1
 8007614:	0800769f 	.word	0x0800769f
 8007618:	080076c9 	.word	0x080076c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b03      	cmp	r3, #3
 8007626:	d107      	bne.n	8007638 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007628:	f107 030a 	add.w	r3, r7, #10
 800762c:	2202      	movs	r2, #2
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 fb8d 	bl	8008d50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007636:	e063      	b.n	8007700 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 fb17 	bl	8008c6e <USBD_CtlError>
            ret = USBD_FAIL;
 8007640:	2303      	movs	r3, #3
 8007642:	75fb      	strb	r3, [r7, #23]
          break;
 8007644:	e05c      	b.n	8007700 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	885b      	ldrh	r3, [r3, #2]
 800764a:	0a1b      	lsrs	r3, r3, #8
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b22      	cmp	r3, #34	; 0x22
 8007650:	d108      	bne.n	8007664 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	88db      	ldrh	r3, [r3, #6]
 8007656:	2b4a      	cmp	r3, #74	; 0x4a
 8007658:	bf28      	it	cs
 800765a:	234a      	movcs	r3, #74	; 0x4a
 800765c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800765e:	4b2f      	ldr	r3, [pc, #188]	; (800771c <USBD_HID_Setup+0x208>)
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	e015      	b.n	8007690 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	885b      	ldrh	r3, [r3, #2]
 8007668:	0a1b      	lsrs	r3, r3, #8
 800766a:	b29b      	uxth	r3, r3
 800766c:	2b21      	cmp	r3, #33	; 0x21
 800766e:	d108      	bne.n	8007682 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8007670:	4b2b      	ldr	r3, [pc, #172]	; (8007720 <USBD_HID_Setup+0x20c>)
 8007672:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	88db      	ldrh	r3, [r3, #6]
 8007678:	2b09      	cmp	r3, #9
 800767a:	bf28      	it	cs
 800767c:	2309      	movcs	r3, #9
 800767e:	82bb      	strh	r3, [r7, #20]
 8007680:	e006      	b.n	8007690 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 faf2 	bl	8008c6e <USBD_CtlError>
            ret = USBD_FAIL;
 800768a:	2303      	movs	r3, #3
 800768c:	75fb      	strb	r3, [r7, #23]
            break;
 800768e:	e037      	b.n	8007700 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007690:	8abb      	ldrh	r3, [r7, #20]
 8007692:	461a      	mov	r2, r3
 8007694:	6939      	ldr	r1, [r7, #16]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fb5a 	bl	8008d50 <USBD_CtlSendData>
          break;
 800769c:	e030      	b.n	8007700 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d107      	bne.n	80076ba <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3308      	adds	r3, #8
 80076ae:	2201      	movs	r2, #1
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fb4c 	bl	8008d50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076b8:	e022      	b.n	8007700 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f001 fad6 	bl	8008c6e <USBD_CtlError>
            ret = USBD_FAIL;
 80076c2:	2303      	movs	r3, #3
 80076c4:	75fb      	strb	r3, [r7, #23]
          break;
 80076c6:	e01b      	b.n	8007700 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d106      	bne.n	80076e2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	885b      	ldrh	r3, [r3, #2]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076e0:	e00e      	b.n	8007700 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fac2 	bl	8008c6e <USBD_CtlError>
            ret = USBD_FAIL;
 80076ea:	2303      	movs	r3, #3
 80076ec:	75fb      	strb	r3, [r7, #23]
          break;
 80076ee:	e007      	b.n	8007700 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 fabb 	bl	8008c6e <USBD_CtlError>
          ret = USBD_FAIL;
 80076f8:	2303      	movs	r3, #3
 80076fa:	75fb      	strb	r3, [r7, #23]
          break;
 80076fc:	e000      	b.n	8007700 <USBD_HID_Setup+0x1ec>
          break;
 80076fe:	bf00      	nop
      }
      break;
 8007700:	e006      	b.n	8007710 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 fab2 	bl	8008c6e <USBD_CtlError>
      ret = USBD_FAIL;
 800770a:	2303      	movs	r3, #3
 800770c:	75fb      	strb	r3, [r7, #23]
      break;
 800770e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	200001f4 	.word	0x200001f4
 8007720:	200001dc 	.word	0x200001dc

08007724 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	32b0      	adds	r2, #176	; 0xb0
 800773c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007740:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007748:	2303      	movs	r3, #3
 800774a:	e014      	b.n	8007776 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b03      	cmp	r3, #3
 8007756:	d10d      	bne.n	8007774 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	7b1b      	ldrb	r3, [r3, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2201      	movs	r2, #1
 8007764:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007766:	4b06      	ldr	r3, [pc, #24]	; (8007780 <USBD_HID_SendReport+0x5c>)
 8007768:	7819      	ldrb	r1, [r3, #0]
 800776a:	88fb      	ldrh	r3, [r7, #6]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f004 ff53 	bl	800c61a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	2000023e 	.word	0x2000023e

08007784 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800778c:	2181      	movs	r1, #129	; 0x81
 800778e:	4809      	ldr	r0, [pc, #36]	; (80077b4 <USBD_HID_GetFSCfgDesc+0x30>)
 8007790:	f000 fc35 	bl	8007ffe <USBD_GetEpDesc>
 8007794:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	220a      	movs	r2, #10
 80077a0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2222      	movs	r2, #34	; 0x22
 80077a6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80077a8:	4b02      	ldr	r3, [pc, #8]	; (80077b4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	200001b8 	.word	0x200001b8

080077b8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80077c0:	2181      	movs	r1, #129	; 0x81
 80077c2:	4809      	ldr	r0, [pc, #36]	; (80077e8 <USBD_HID_GetHSCfgDesc+0x30>)
 80077c4:	f000 fc1b 	bl	8007ffe <USBD_GetEpDesc>
 80077c8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2207      	movs	r2, #7
 80077d4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2222      	movs	r2, #34	; 0x22
 80077da:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80077dc:	4b02      	ldr	r3, [pc, #8]	; (80077e8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	200001b8 	.word	0x200001b8

080077ec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80077f4:	2181      	movs	r1, #129	; 0x81
 80077f6:	4809      	ldr	r0, [pc, #36]	; (800781c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80077f8:	f000 fc01 	bl	8007ffe <USBD_GetEpDesc>
 80077fc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	220a      	movs	r2, #10
 8007808:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2222      	movs	r2, #34	; 0x22
 800780e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007810:	4b02      	ldr	r3, [pc, #8]	; (800781c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	200001b8 	.word	0x200001b8

08007820 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	32b0      	adds	r2, #176	; 0xb0
 8007836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783a:	2200      	movs	r2, #0
 800783c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	220a      	movs	r2, #10
 8007858:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800785a:	4b03      	ldr	r3, [pc, #12]	; (8007868 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	200001e8 	.word	0x200001e8

0800786c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	4613      	mov	r3, r2
 8007878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007880:	2303      	movs	r3, #3
 8007882:	e01f      	b.n	80078c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	79fa      	ldrb	r2, [r7, #7]
 80078b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f004 fd79 	bl	800c3b0 <USBD_LL_Init>
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e025      	b.n	8007930 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	32ae      	adds	r2, #174	; 0xae
 80078f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00f      	beq.n	8007920 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	32ae      	adds	r2, #174	; 0xae
 800790a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	f107 020e 	add.w	r2, r7, #14
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	4602      	mov	r2, r0
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007926:	1c5a      	adds	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f004 fd81 	bl	800c448 <USBD_LL_Start>
 8007946:	4603      	mov	r3, r0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007958:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800795a:	4618      	mov	r0, r3
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d009      	beq.n	8007994 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	4611      	mov	r1, r2
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	4798      	blx	r3
 8007990:	4603      	mov	r3, r0
 8007992:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	4611      	mov	r1, r2
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80079c4:	2303      	movs	r3, #3
 80079c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f001 f908 	bl	8008bfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80079f8:	461a      	mov	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a06:	f003 031f 	and.w	r3, r3, #31
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d01a      	beq.n	8007a44 <USBD_LL_SetupStage+0x72>
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d822      	bhi.n	8007a58 <USBD_LL_SetupStage+0x86>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <USBD_LL_SetupStage+0x4a>
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d00a      	beq.n	8007a30 <USBD_LL_SetupStage+0x5e>
 8007a1a:	e01d      	b.n	8007a58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fb5f 	bl	80080e8 <USBD_StdDevReq>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2e:	e020      	b.n	8007a72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fbc7 	bl	80081cc <USBD_StdItfReq>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	73fb      	strb	r3, [r7, #15]
      break;
 8007a42:	e016      	b.n	8007a72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fc29 	bl	80082a4 <USBD_StdEPReq>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73fb      	strb	r3, [r7, #15]
      break;
 8007a56:	e00c      	b.n	8007a72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f004 fd4e 	bl	800c508 <USBD_LL_StallEP>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a70:	bf00      	nop
  }

  return ret;
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	460b      	mov	r3, r1
 8007a86:	607a      	str	r2, [r7, #4]
 8007a88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d16e      	bne.n	8007b72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	f040 8098 	bne.w	8007bd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d913      	bls.n	8007adc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	1ad2      	subs	r2, r2, r3
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	4293      	cmp	r3, r2
 8007acc:	bf28      	it	cs
 8007ace:	4613      	movcs	r3, r2
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f001 f967 	bl	8008da8 <USBD_CtlContinueRx>
 8007ada:	e07d      	b.n	8007bd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d014      	beq.n	8007b14 <USBD_LL_DataOutStage+0x98>
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d81d      	bhi.n	8007b2a <USBD_LL_DataOutStage+0xae>
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <USBD_LL_DataOutStage+0x7c>
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d003      	beq.n	8007afe <USBD_LL_DataOutStage+0x82>
 8007af6:	e018      	b.n	8007b2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	75bb      	strb	r3, [r7, #22]
            break;
 8007afc:	e018      	b.n	8007b30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	4619      	mov	r1, r3
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fa5e 	bl	8007fca <USBD_CoreFindIF>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75bb      	strb	r3, [r7, #22]
            break;
 8007b12:	e00d      	b.n	8007b30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 fa60 	bl	8007fe4 <USBD_CoreFindEP>
 8007b24:	4603      	mov	r3, r0
 8007b26:	75bb      	strb	r3, [r7, #22]
            break;
 8007b28:	e002      	b.n	8007b30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75bb      	strb	r3, [r7, #22]
            break;
 8007b2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b30:	7dbb      	ldrb	r3, [r7, #22]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d119      	bne.n	8007b6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d113      	bne.n	8007b6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b42:	7dba      	ldrb	r2, [r7, #22]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	32ae      	adds	r2, #174	; 0xae
 8007b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007b52:	7dba      	ldrb	r2, [r7, #22]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b5a:	7dba      	ldrb	r2, [r7, #22]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	32ae      	adds	r2, #174	; 0xae
 8007b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 f92d 	bl	8008dca <USBD_CtlSendStatus>
 8007b70:	e032      	b.n	8007bd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b72:	7afb      	ldrb	r3, [r7, #11]
 8007b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 fa31 	bl	8007fe4 <USBD_CoreFindEP>
 8007b82:	4603      	mov	r3, r0
 8007b84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b86:	7dbb      	ldrb	r3, [r7, #22]
 8007b88:	2bff      	cmp	r3, #255	; 0xff
 8007b8a:	d025      	beq.n	8007bd8 <USBD_LL_DataOutStage+0x15c>
 8007b8c:	7dbb      	ldrb	r3, [r7, #22]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d122      	bne.n	8007bd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d117      	bne.n	8007bce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b9e:	7dba      	ldrb	r2, [r7, #22]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	32ae      	adds	r2, #174	; 0xae
 8007ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00f      	beq.n	8007bce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007bae:	7dba      	ldrb	r2, [r7, #22]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007bb6:	7dba      	ldrb	r2, [r7, #22]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	32ae      	adds	r2, #174	; 0xae
 8007bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	7afa      	ldrb	r2, [r7, #11]
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	4798      	blx	r3
 8007bca:	4603      	mov	r3, r0
 8007bcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	e000      	b.n	8007bda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b086      	sub	sp, #24
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	460b      	mov	r3, r1
 8007bec:	607a      	str	r2, [r7, #4]
 8007bee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d16f      	bne.n	8007cd6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3314      	adds	r3, #20
 8007bfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d15a      	bne.n	8007cbc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d914      	bls.n	8007c3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	1ad2      	subs	r2, r2, r3
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	461a      	mov	r2, r3
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f001 f8ac 	bl	8008d86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2200      	movs	r2, #0
 8007c32:	2100      	movs	r1, #0
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f004 fd11 	bl	800c65c <USBD_LL_PrepareReceive>
 8007c3a:	e03f      	b.n	8007cbc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d11c      	bne.n	8007c82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d316      	bcc.n	8007c82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d20f      	bcs.n	8007c82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f001 f88d 	bl	8008d86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c74:	2300      	movs	r3, #0
 8007c76:	2200      	movs	r2, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f004 fcee 	bl	800c65c <USBD_LL_PrepareReceive>
 8007c80:	e01c      	b.n	8007cbc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d10f      	bne.n	8007cae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d009      	beq.n	8007cae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cae:	2180      	movs	r1, #128	; 0x80
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f004 fc29 	bl	800c508 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f001 f89a 	bl	8008df0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d03a      	beq.n	8007d3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff fe42 	bl	8007950 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007cd4:	e032      	b.n	8007d3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007cd6:	7afb      	ldrb	r3, [r7, #11]
 8007cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	4619      	mov	r1, r3
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f97f 	bl	8007fe4 <USBD_CoreFindEP>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	2bff      	cmp	r3, #255	; 0xff
 8007cee:	d025      	beq.n	8007d3c <USBD_LL_DataInStage+0x15a>
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d122      	bne.n	8007d3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d11c      	bne.n	8007d3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007d02:	7dfa      	ldrb	r2, [r7, #23]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	32ae      	adds	r2, #174	; 0xae
 8007d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d014      	beq.n	8007d3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007d12:	7dfa      	ldrb	r2, [r7, #23]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d1a:	7dfa      	ldrb	r2, [r7, #23]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	32ae      	adds	r2, #174	; 0xae
 8007d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	7afa      	ldrb	r2, [r7, #11]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	4798      	blx	r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d32:	7dbb      	ldrb	r3, [r7, #22]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007d38:	7dbb      	ldrb	r3, [r7, #22]
 8007d3a:	e000      	b.n	8007d3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d014      	beq.n	8007dac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00e      	beq.n	8007dac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6852      	ldr	r2, [r2, #4]
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007da8:	2303      	movs	r3, #3
 8007daa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dac:	2340      	movs	r3, #64	; 0x40
 8007dae:	2200      	movs	r2, #0
 8007db0:	2100      	movs	r1, #0
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f004 fb63 	bl	800c47e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2240      	movs	r2, #64	; 0x40
 8007dc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dc8:	2340      	movs	r3, #64	; 0x40
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2180      	movs	r1, #128	; 0x80
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f004 fb55 	bl	800c47e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2240      	movs	r2, #64	; 0x40
 8007dde:	621a      	str	r2, [r3, #32]

  return ret;
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	460b      	mov	r3, r1
 8007df4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	78fa      	ldrb	r2, [r7, #3]
 8007dfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2204      	movs	r2, #4
 8007e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d106      	bne.n	8007e58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d110      	bne.n	8007e9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d005      	beq.n	8007e9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	32ae      	adds	r2, #174	; 0xae
 8007ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e01c      	b.n	8007f02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d115      	bne.n	8007f00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	32ae      	adds	r2, #174	; 0xae
 8007ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00b      	beq.n	8007f00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	32ae      	adds	r2, #174	; 0xae
 8007ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	4611      	mov	r1, r2
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	32ae      	adds	r2, #174	; 0xae
 8007f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e01c      	b.n	8007f66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b03      	cmp	r3, #3
 8007f36:	d115      	bne.n	8007f64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	32ae      	adds	r2, #174	; 0xae
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	32ae      	adds	r2, #174	; 0xae
 8007f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	78fa      	ldrb	r2, [r7, #3]
 8007f5e:	4611      	mov	r1, r2
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00e      	beq.n	8007fc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6852      	ldr	r2, [r2, #4]
 8007fae:	b2d2      	uxtb	r2, r2
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ff0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b086      	sub	sp, #24
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	460b      	mov	r3, r1
 8008008:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	885b      	ldrh	r3, [r3, #2]
 800801a:	b29a      	uxth	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	429a      	cmp	r2, r3
 8008024:	d920      	bls.n	8008068 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800802e:	e013      	b.n	8008058 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008030:	f107 030a 	add.w	r3, r7, #10
 8008034:	4619      	mov	r1, r3
 8008036:	6978      	ldr	r0, [r7, #20]
 8008038:	f000 f81b 	bl	8008072 <USBD_GetNextDesc>
 800803c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	785b      	ldrb	r3, [r3, #1]
 8008042:	2b05      	cmp	r3, #5
 8008044:	d108      	bne.n	8008058 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	789b      	ldrb	r3, [r3, #2]
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	429a      	cmp	r2, r3
 8008052:	d008      	beq.n	8008066 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008054:	2300      	movs	r3, #0
 8008056:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	885b      	ldrh	r3, [r3, #2]
 800805c:	b29a      	uxth	r2, r3
 800805e:	897b      	ldrh	r3, [r7, #10]
 8008060:	429a      	cmp	r2, r3
 8008062:	d8e5      	bhi.n	8008030 <USBD_GetEpDesc+0x32>
 8008064:	e000      	b.n	8008068 <USBD_GetEpDesc+0x6a>
          break;
 8008066:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008068:	693b      	ldr	r3, [r7, #16]
}
 800806a:	4618      	mov	r0, r3
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	881a      	ldrh	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	4413      	add	r3, r2
 800808c:	b29a      	uxth	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4413      	add	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800809e:	68fb      	ldr	r3, [r7, #12]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	3301      	adds	r3, #1
 80080c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080ca:	8a3b      	ldrh	r3, [r7, #16]
 80080cc:	021b      	lsls	r3, r3, #8
 80080ce:	b21a      	sxth	r2, r3
 80080d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	b21b      	sxth	r3, r3
 80080d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80080da:	89fb      	ldrh	r3, [r7, #14]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080fe:	2b40      	cmp	r3, #64	; 0x40
 8008100:	d005      	beq.n	800810e <USBD_StdDevReq+0x26>
 8008102:	2b40      	cmp	r3, #64	; 0x40
 8008104:	d857      	bhi.n	80081b6 <USBD_StdDevReq+0xce>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00f      	beq.n	800812a <USBD_StdDevReq+0x42>
 800810a:	2b20      	cmp	r3, #32
 800810c:	d153      	bne.n	80081b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	32ae      	adds	r2, #174	; 0xae
 8008118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]
      break;
 8008128:	e04a      	b.n	80081c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	2b09      	cmp	r3, #9
 8008130:	d83b      	bhi.n	80081aa <USBD_StdDevReq+0xc2>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <USBD_StdDevReq+0x50>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	0800818d 	.word	0x0800818d
 800813c:	080081a1 	.word	0x080081a1
 8008140:	080081ab 	.word	0x080081ab
 8008144:	08008197 	.word	0x08008197
 8008148:	080081ab 	.word	0x080081ab
 800814c:	0800816b 	.word	0x0800816b
 8008150:	08008161 	.word	0x08008161
 8008154:	080081ab 	.word	0x080081ab
 8008158:	08008183 	.word	0x08008183
 800815c:	08008175 	.word	0x08008175
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa3c 	bl	80085e0 <USBD_GetDescriptor>
          break;
 8008168:	e024      	b.n	80081b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800816a:	6839      	ldr	r1, [r7, #0]
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fba1 	bl	80088b4 <USBD_SetAddress>
          break;
 8008172:	e01f      	b.n	80081b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fbe0 	bl	800893c <USBD_SetConfig>
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]
          break;
 8008180:	e018      	b.n	80081b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fc83 	bl	8008a90 <USBD_GetConfig>
          break;
 800818a:	e013      	b.n	80081b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fcb4 	bl	8008afc <USBD_GetStatus>
          break;
 8008194:	e00e      	b.n	80081b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fce3 	bl	8008b64 <USBD_SetFeature>
          break;
 800819e:	e009      	b.n	80081b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fd07 	bl	8008bb6 <USBD_ClrFeature>
          break;
 80081a8:	e004      	b.n	80081b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fd5e 	bl	8008c6e <USBD_CtlError>
          break;
 80081b2:	bf00      	nop
      }
      break;
 80081b4:	e004      	b.n	80081c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fd58 	bl	8008c6e <USBD_CtlError>
      break;
 80081be:	bf00      	nop
  }

  return ret;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop

080081cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	d005      	beq.n	80081f2 <USBD_StdItfReq+0x26>
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	d852      	bhi.n	8008290 <USBD_StdItfReq+0xc4>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <USBD_StdItfReq+0x26>
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d14e      	bne.n	8008290 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	3b01      	subs	r3, #1
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d840      	bhi.n	8008282 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	889b      	ldrh	r3, [r3, #4]
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b01      	cmp	r3, #1
 8008208:	d836      	bhi.n	8008278 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	889b      	ldrh	r3, [r3, #4]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff fed9 	bl	8007fca <USBD_CoreFindIF>
 8008218:	4603      	mov	r3, r0
 800821a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	2bff      	cmp	r3, #255	; 0xff
 8008220:	d01d      	beq.n	800825e <USBD_StdItfReq+0x92>
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d11a      	bne.n	800825e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008228:	7bba      	ldrb	r2, [r7, #14]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	32ae      	adds	r2, #174	; 0xae
 800822e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00f      	beq.n	8008258 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008238:	7bba      	ldrb	r2, [r7, #14]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008240:	7bba      	ldrb	r2, [r7, #14]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	32ae      	adds	r2, #174	; 0xae
 8008246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
 8008252:	4603      	mov	r3, r0
 8008254:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008256:	e004      	b.n	8008262 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008258:	2303      	movs	r3, #3
 800825a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800825c:	e001      	b.n	8008262 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800825e:	2303      	movs	r3, #3
 8008260:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	88db      	ldrh	r3, [r3, #6]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d110      	bne.n	800828c <USBD_StdItfReq+0xc0>
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10d      	bne.n	800828c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fdaa 	bl	8008dca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008276:	e009      	b.n	800828c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fcf7 	bl	8008c6e <USBD_CtlError>
          break;
 8008280:	e004      	b.n	800828c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fcf2 	bl	8008c6e <USBD_CtlError>
          break;
 800828a:	e000      	b.n	800828e <USBD_StdItfReq+0xc2>
          break;
 800828c:	bf00      	nop
      }
      break;
 800828e:	e004      	b.n	800829a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fceb 	bl	8008c6e <USBD_CtlError>
      break;
 8008298:	bf00      	nop
  }

  return ret;
 800829a:	7bfb      	ldrb	r3, [r7, #15]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	889b      	ldrh	r3, [r3, #4]
 80082b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082c0:	2b40      	cmp	r3, #64	; 0x40
 80082c2:	d007      	beq.n	80082d4 <USBD_StdEPReq+0x30>
 80082c4:	2b40      	cmp	r3, #64	; 0x40
 80082c6:	f200 817f 	bhi.w	80085c8 <USBD_StdEPReq+0x324>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d02a      	beq.n	8008324 <USBD_StdEPReq+0x80>
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	f040 817a 	bne.w	80085c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff fe83 	bl	8007fe4 <USBD_CoreFindEP>
 80082de:	4603      	mov	r3, r0
 80082e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082e2:	7b7b      	ldrb	r3, [r7, #13]
 80082e4:	2bff      	cmp	r3, #255	; 0xff
 80082e6:	f000 8174 	beq.w	80085d2 <USBD_StdEPReq+0x32e>
 80082ea:	7b7b      	ldrb	r3, [r7, #13]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f040 8170 	bne.w	80085d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80082f2:	7b7a      	ldrb	r2, [r7, #13]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80082fa:	7b7a      	ldrb	r2, [r7, #13]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	32ae      	adds	r2, #174	; 0xae
 8008300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 8163 	beq.w	80085d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800830c:	7b7a      	ldrb	r2, [r7, #13]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	32ae      	adds	r2, #174	; 0xae
 8008312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
 800831e:	4603      	mov	r3, r0
 8008320:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008322:	e156      	b.n	80085d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	785b      	ldrb	r3, [r3, #1]
 8008328:	2b03      	cmp	r3, #3
 800832a:	d008      	beq.n	800833e <USBD_StdEPReq+0x9a>
 800832c:	2b03      	cmp	r3, #3
 800832e:	f300 8145 	bgt.w	80085bc <USBD_StdEPReq+0x318>
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 809b 	beq.w	800846e <USBD_StdEPReq+0x1ca>
 8008338:	2b01      	cmp	r3, #1
 800833a:	d03c      	beq.n	80083b6 <USBD_StdEPReq+0x112>
 800833c:	e13e      	b.n	80085bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b02      	cmp	r3, #2
 8008348:	d002      	beq.n	8008350 <USBD_StdEPReq+0xac>
 800834a:	2b03      	cmp	r3, #3
 800834c:	d016      	beq.n	800837c <USBD_StdEPReq+0xd8>
 800834e:	e02c      	b.n	80083aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00d      	beq.n	8008372 <USBD_StdEPReq+0xce>
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	2b80      	cmp	r3, #128	; 0x80
 800835a:	d00a      	beq.n	8008372 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f004 f8d1 	bl	800c508 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008366:	2180      	movs	r1, #128	; 0x80
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f004 f8cd 	bl	800c508 <USBD_LL_StallEP>
 800836e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008370:	e020      	b.n	80083b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fc7a 	bl	8008c6e <USBD_CtlError>
              break;
 800837a:	e01b      	b.n	80083b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	885b      	ldrh	r3, [r3, #2]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10e      	bne.n	80083a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <USBD_StdEPReq+0xfe>
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b80      	cmp	r3, #128	; 0x80
 800838e:	d008      	beq.n	80083a2 <USBD_StdEPReq+0xfe>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	88db      	ldrh	r3, [r3, #6]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f004 f8b3 	bl	800c508 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fd11 	bl	8008dca <USBD_CtlSendStatus>

              break;
 80083a8:	e004      	b.n	80083b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc5e 	bl	8008c6e <USBD_CtlError>
              break;
 80083b2:	bf00      	nop
          }
          break;
 80083b4:	e107      	b.n	80085c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d002      	beq.n	80083c8 <USBD_StdEPReq+0x124>
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d016      	beq.n	80083f4 <USBD_StdEPReq+0x150>
 80083c6:	e04b      	b.n	8008460 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00d      	beq.n	80083ea <USBD_StdEPReq+0x146>
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b80      	cmp	r3, #128	; 0x80
 80083d2:	d00a      	beq.n	80083ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f004 f895 	bl	800c508 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083de:	2180      	movs	r1, #128	; 0x80
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f004 f891 	bl	800c508 <USBD_LL_StallEP>
 80083e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083e8:	e040      	b.n	800846c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fc3e 	bl	8008c6e <USBD_CtlError>
              break;
 80083f2:	e03b      	b.n	800846c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	885b      	ldrh	r3, [r3, #2]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d136      	bne.n	800846a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008402:	2b00      	cmp	r3, #0
 8008404:	d004      	beq.n	8008410 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f004 f89b 	bl	800c546 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fcda 	bl	8008dca <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7ff fde2 	bl	8007fe4 <USBD_CoreFindEP>
 8008420:	4603      	mov	r3, r0
 8008422:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008424:	7b7b      	ldrb	r3, [r7, #13]
 8008426:	2bff      	cmp	r3, #255	; 0xff
 8008428:	d01f      	beq.n	800846a <USBD_StdEPReq+0x1c6>
 800842a:	7b7b      	ldrb	r3, [r7, #13]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d11c      	bne.n	800846a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008430:	7b7a      	ldrb	r2, [r7, #13]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008438:	7b7a      	ldrb	r2, [r7, #13]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	32ae      	adds	r2, #174	; 0xae
 800843e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d010      	beq.n	800846a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008448:	7b7a      	ldrb	r2, [r7, #13]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	32ae      	adds	r2, #174	; 0xae
 800844e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
 800845a:	4603      	mov	r3, r0
 800845c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800845e:	e004      	b.n	800846a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fc03 	bl	8008c6e <USBD_CtlError>
              break;
 8008468:	e000      	b.n	800846c <USBD_StdEPReq+0x1c8>
              break;
 800846a:	bf00      	nop
          }
          break;
 800846c:	e0ab      	b.n	80085c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b02      	cmp	r3, #2
 8008478:	d002      	beq.n	8008480 <USBD_StdEPReq+0x1dc>
 800847a:	2b03      	cmp	r3, #3
 800847c:	d032      	beq.n	80084e4 <USBD_StdEPReq+0x240>
 800847e:	e097      	b.n	80085b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d007      	beq.n	8008496 <USBD_StdEPReq+0x1f2>
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	2b80      	cmp	r3, #128	; 0x80
 800848a:	d004      	beq.n	8008496 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fbed 	bl	8008c6e <USBD_CtlError>
                break;
 8008494:	e091      	b.n	80085ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008496:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800849a:	2b00      	cmp	r3, #0
 800849c:	da0b      	bge.n	80084b6 <USBD_StdEPReq+0x212>
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	3310      	adds	r3, #16
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	3304      	adds	r3, #4
 80084b4:	e00b      	b.n	80084ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	4413      	add	r3, r2
 80084cc:	3304      	adds	r3, #4
 80084ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2202      	movs	r2, #2
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fc37 	bl	8008d50 <USBD_CtlSendData>
              break;
 80084e2:	e06a      	b.n	80085ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	da11      	bge.n	8008510 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	f003 020f 	and.w	r2, r3, #15
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	440b      	add	r3, r1
 80084fe:	3324      	adds	r3, #36	; 0x24
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d117      	bne.n	8008536 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fbb0 	bl	8008c6e <USBD_CtlError>
                  break;
 800850e:	e054      	b.n	80085ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	f003 020f 	and.w	r2, r3, #15
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d104      	bne.n	8008536 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fb9d 	bl	8008c6e <USBD_CtlError>
                  break;
 8008534:	e041      	b.n	80085ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008536:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800853a:	2b00      	cmp	r3, #0
 800853c:	da0b      	bge.n	8008556 <USBD_StdEPReq+0x2b2>
 800853e:	7bbb      	ldrb	r3, [r7, #14]
 8008540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008544:	4613      	mov	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	3310      	adds	r3, #16
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	4413      	add	r3, r2
 8008552:	3304      	adds	r3, #4
 8008554:	e00b      	b.n	800856e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800855c:	4613      	mov	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	4413      	add	r3, r2
 800856c:	3304      	adds	r3, #4
 800856e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <USBD_StdEPReq+0x2d8>
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	2b80      	cmp	r3, #128	; 0x80
 800857a:	d103      	bne.n	8008584 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2200      	movs	r2, #0
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	e00e      	b.n	80085a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f003 fffb 	bl	800c584 <USBD_LL_IsStallEP>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2201      	movs	r2, #1
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	e002      	b.n	80085a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2200      	movs	r2, #0
 80085a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2202      	movs	r2, #2
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fbd1 	bl	8008d50 <USBD_CtlSendData>
              break;
 80085ae:	e004      	b.n	80085ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fb5b 	bl	8008c6e <USBD_CtlError>
              break;
 80085b8:	bf00      	nop
          }
          break;
 80085ba:	e004      	b.n	80085c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fb55 	bl	8008c6e <USBD_CtlError>
          break;
 80085c4:	bf00      	nop
      }
      break;
 80085c6:	e005      	b.n	80085d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fb4f 	bl	8008c6e <USBD_CtlError>
      break;
 80085d0:	e000      	b.n	80085d4 <USBD_StdEPReq+0x330>
      break;
 80085d2:	bf00      	nop
  }

  return ret;
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	885b      	ldrh	r3, [r3, #2]
 80085fa:	0a1b      	lsrs	r3, r3, #8
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	2b06      	cmp	r3, #6
 8008602:	f200 8128 	bhi.w	8008856 <USBD_GetDescriptor+0x276>
 8008606:	a201      	add	r2, pc, #4	; (adr r2, 800860c <USBD_GetDescriptor+0x2c>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	08008629 	.word	0x08008629
 8008610:	08008641 	.word	0x08008641
 8008614:	08008681 	.word	0x08008681
 8008618:	08008857 	.word	0x08008857
 800861c:	08008857 	.word	0x08008857
 8008620:	080087f7 	.word	0x080087f7
 8008624:	08008823 	.word	0x08008823
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	7c12      	ldrb	r2, [r2, #16]
 8008634:	f107 0108 	add.w	r1, r7, #8
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
 800863c:	60f8      	str	r0, [r7, #12]
      break;
 800863e:	e112      	b.n	8008866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	7c1b      	ldrb	r3, [r3, #16]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10d      	bne.n	8008664 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	f107 0208 	add.w	r2, r7, #8
 8008654:	4610      	mov	r0, r2
 8008656:	4798      	blx	r3
 8008658:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3301      	adds	r3, #1
 800865e:	2202      	movs	r2, #2
 8008660:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008662:	e100      	b.n	8008866 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	f107 0208 	add.w	r2, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	2202      	movs	r2, #2
 800867c:	701a      	strb	r2, [r3, #0]
      break;
 800867e:	e0f2      	b.n	8008866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	885b      	ldrh	r3, [r3, #2]
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b05      	cmp	r3, #5
 8008688:	f200 80ac 	bhi.w	80087e4 <USBD_GetDescriptor+0x204>
 800868c:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <USBD_GetDescriptor+0xb4>)
 800868e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008692:	bf00      	nop
 8008694:	080086ad 	.word	0x080086ad
 8008698:	080086e1 	.word	0x080086e1
 800869c:	08008715 	.word	0x08008715
 80086a0:	08008749 	.word	0x08008749
 80086a4:	0800877d 	.word	0x0800877d
 80086a8:	080087b1 	.word	0x080087b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00b      	beq.n	80086d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	7c12      	ldrb	r2, [r2, #16]
 80086c4:	f107 0108 	add.w	r1, r7, #8
 80086c8:	4610      	mov	r0, r2
 80086ca:	4798      	blx	r3
 80086cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ce:	e091      	b.n	80087f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 facb 	bl	8008c6e <USBD_CtlError>
            err++;
 80086d8:	7afb      	ldrb	r3, [r7, #11]
 80086da:	3301      	adds	r3, #1
 80086dc:	72fb      	strb	r3, [r7, #11]
          break;
 80086de:	e089      	b.n	80087f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00b      	beq.n	8008704 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	7c12      	ldrb	r2, [r2, #16]
 80086f8:	f107 0108 	add.w	r1, r7, #8
 80086fc:	4610      	mov	r0, r2
 80086fe:	4798      	blx	r3
 8008700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008702:	e077      	b.n	80087f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fab1 	bl	8008c6e <USBD_CtlError>
            err++;
 800870c:	7afb      	ldrb	r3, [r7, #11]
 800870e:	3301      	adds	r3, #1
 8008710:	72fb      	strb	r3, [r7, #11]
          break;
 8008712:	e06f      	b.n	80087f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00b      	beq.n	8008738 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	7c12      	ldrb	r2, [r2, #16]
 800872c:	f107 0108 	add.w	r1, r7, #8
 8008730:	4610      	mov	r0, r2
 8008732:	4798      	blx	r3
 8008734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008736:	e05d      	b.n	80087f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fa97 	bl	8008c6e <USBD_CtlError>
            err++;
 8008740:	7afb      	ldrb	r3, [r7, #11]
 8008742:	3301      	adds	r3, #1
 8008744:	72fb      	strb	r3, [r7, #11]
          break;
 8008746:	e055      	b.n	80087f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00b      	beq.n	800876c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	7c12      	ldrb	r2, [r2, #16]
 8008760:	f107 0108 	add.w	r1, r7, #8
 8008764:	4610      	mov	r0, r2
 8008766:	4798      	blx	r3
 8008768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800876a:	e043      	b.n	80087f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fa7d 	bl	8008c6e <USBD_CtlError>
            err++;
 8008774:	7afb      	ldrb	r3, [r7, #11]
 8008776:	3301      	adds	r3, #1
 8008778:	72fb      	strb	r3, [r7, #11]
          break;
 800877a:	e03b      	b.n	80087f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d00b      	beq.n	80087a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	7c12      	ldrb	r2, [r2, #16]
 8008794:	f107 0108 	add.w	r1, r7, #8
 8008798:	4610      	mov	r0, r2
 800879a:	4798      	blx	r3
 800879c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800879e:	e029      	b.n	80087f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 fa63 	bl	8008c6e <USBD_CtlError>
            err++;
 80087a8:	7afb      	ldrb	r3, [r7, #11]
 80087aa:	3301      	adds	r3, #1
 80087ac:	72fb      	strb	r3, [r7, #11]
          break;
 80087ae:	e021      	b.n	80087f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00b      	beq.n	80087d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	7c12      	ldrb	r2, [r2, #16]
 80087c8:	f107 0108 	add.w	r1, r7, #8
 80087cc:	4610      	mov	r0, r2
 80087ce:	4798      	blx	r3
 80087d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087d2:	e00f      	b.n	80087f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fa49 	bl	8008c6e <USBD_CtlError>
            err++;
 80087dc:	7afb      	ldrb	r3, [r7, #11]
 80087de:	3301      	adds	r3, #1
 80087e0:	72fb      	strb	r3, [r7, #11]
          break;
 80087e2:	e007      	b.n	80087f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80087e4:	6839      	ldr	r1, [r7, #0]
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fa41 	bl	8008c6e <USBD_CtlError>
          err++;
 80087ec:	7afb      	ldrb	r3, [r7, #11]
 80087ee:	3301      	adds	r3, #1
 80087f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80087f2:	bf00      	nop
      }
      break;
 80087f4:	e037      	b.n	8008866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	7c1b      	ldrb	r3, [r3, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d109      	bne.n	8008812 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008806:	f107 0208 	add.w	r2, r7, #8
 800880a:	4610      	mov	r0, r2
 800880c:	4798      	blx	r3
 800880e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008810:	e029      	b.n	8008866 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fa2a 	bl	8008c6e <USBD_CtlError>
        err++;
 800881a:	7afb      	ldrb	r3, [r7, #11]
 800881c:	3301      	adds	r3, #1
 800881e:	72fb      	strb	r3, [r7, #11]
      break;
 8008820:	e021      	b.n	8008866 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	7c1b      	ldrb	r3, [r3, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10d      	bne.n	8008846 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	f107 0208 	add.w	r2, r7, #8
 8008836:	4610      	mov	r0, r2
 8008838:	4798      	blx	r3
 800883a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	2207      	movs	r2, #7
 8008842:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008844:	e00f      	b.n	8008866 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa10 	bl	8008c6e <USBD_CtlError>
        err++;
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	3301      	adds	r3, #1
 8008852:	72fb      	strb	r3, [r7, #11]
      break;
 8008854:	e007      	b.n	8008866 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fa08 	bl	8008c6e <USBD_CtlError>
      err++;
 800885e:	7afb      	ldrb	r3, [r7, #11]
 8008860:	3301      	adds	r3, #1
 8008862:	72fb      	strb	r3, [r7, #11]
      break;
 8008864:	bf00      	nop
  }

  if (err != 0U)
 8008866:	7afb      	ldrb	r3, [r7, #11]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d11e      	bne.n	80088aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	88db      	ldrh	r3, [r3, #6]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d016      	beq.n	80088a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008874:	893b      	ldrh	r3, [r7, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00e      	beq.n	8008898 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	88da      	ldrh	r2, [r3, #6]
 800887e:	893b      	ldrh	r3, [r7, #8]
 8008880:	4293      	cmp	r3, r2
 8008882:	bf28      	it	cs
 8008884:	4613      	movcs	r3, r2
 8008886:	b29b      	uxth	r3, r3
 8008888:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800888a:	893b      	ldrh	r3, [r7, #8]
 800888c:	461a      	mov	r2, r3
 800888e:	68f9      	ldr	r1, [r7, #12]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fa5d 	bl	8008d50 <USBD_CtlSendData>
 8008896:	e009      	b.n	80088ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f9e7 	bl	8008c6e <USBD_CtlError>
 80088a0:	e004      	b.n	80088ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fa91 	bl	8008dca <USBD_CtlSendStatus>
 80088a8:	e000      	b.n	80088ac <USBD_GetDescriptor+0x2cc>
    return;
 80088aa:	bf00      	nop
  }
}
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop

080088b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	889b      	ldrh	r3, [r3, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d131      	bne.n	800892a <USBD_SetAddress+0x76>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	88db      	ldrh	r3, [r3, #6]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d12d      	bne.n	800892a <USBD_SetAddress+0x76>
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	885b      	ldrh	r3, [r3, #2]
 80088d2:	2b7f      	cmp	r3, #127	; 0x7f
 80088d4:	d829      	bhi.n	800892a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	885b      	ldrh	r3, [r3, #2]
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b03      	cmp	r3, #3
 80088ec:	d104      	bne.n	80088f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f9bc 	bl	8008c6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f6:	e01d      	b.n	8008934 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	7bfa      	ldrb	r2, [r7, #15]
 80088fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f003 fe69 	bl	800c5dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa5d 	bl	8008dca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d004      	beq.n	8008920 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891e:	e009      	b.n	8008934 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008928:	e004      	b.n	8008934 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f99e 	bl	8008c6e <USBD_CtlError>
  }
}
 8008932:	bf00      	nop
 8008934:	bf00      	nop
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	885b      	ldrh	r3, [r3, #2]
 800894e:	b2da      	uxtb	r2, r3
 8008950:	4b4e      	ldr	r3, [pc, #312]	; (8008a8c <USBD_SetConfig+0x150>)
 8008952:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008954:	4b4d      	ldr	r3, [pc, #308]	; (8008a8c <USBD_SetConfig+0x150>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d905      	bls.n	8008968 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f985 	bl	8008c6e <USBD_CtlError>
    return USBD_FAIL;
 8008964:	2303      	movs	r3, #3
 8008966:	e08c      	b.n	8008a82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b02      	cmp	r3, #2
 8008972:	d002      	beq.n	800897a <USBD_SetConfig+0x3e>
 8008974:	2b03      	cmp	r3, #3
 8008976:	d029      	beq.n	80089cc <USBD_SetConfig+0x90>
 8008978:	e075      	b.n	8008a66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800897a:	4b44      	ldr	r3, [pc, #272]	; (8008a8c <USBD_SetConfig+0x150>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d020      	beq.n	80089c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008982:	4b42      	ldr	r3, [pc, #264]	; (8008a8c <USBD_SetConfig+0x150>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800898c:	4b3f      	ldr	r3, [pc, #252]	; (8008a8c <USBD_SetConfig+0x150>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fe ffe7 	bl	8007966 <USBD_SetClassConfig>
 8008998:	4603      	mov	r3, r0
 800899a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d008      	beq.n	80089b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f962 	bl	8008c6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089b2:	e065      	b.n	8008a80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fa08 	bl	8008dca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2203      	movs	r2, #3
 80089be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089c2:	e05d      	b.n	8008a80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fa00 	bl	8008dca <USBD_CtlSendStatus>
      break;
 80089ca:	e059      	b.n	8008a80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089cc:	4b2f      	ldr	r3, [pc, #188]	; (8008a8c <USBD_SetConfig+0x150>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d112      	bne.n	80089fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2202      	movs	r2, #2
 80089d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80089dc:	4b2b      	ldr	r3, [pc, #172]	; (8008a8c <USBD_SetConfig+0x150>)
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	461a      	mov	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089e6:	4b29      	ldr	r3, [pc, #164]	; (8008a8c <USBD_SetConfig+0x150>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7fe ffd6 	bl	800799e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f9e9 	bl	8008dca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089f8:	e042      	b.n	8008a80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80089fa:	4b24      	ldr	r3, [pc, #144]	; (8008a8c <USBD_SetConfig+0x150>)
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d02a      	beq.n	8008a5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7fe ffc4 	bl	800799e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a16:	4b1d      	ldr	r3, [pc, #116]	; (8008a8c <USBD_SetConfig+0x150>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a20:	4b1a      	ldr	r3, [pc, #104]	; (8008a8c <USBD_SetConfig+0x150>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7fe ff9d 	bl	8007966 <USBD_SetClassConfig>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00f      	beq.n	8008a56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f918 	bl	8008c6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7fe ffa9 	bl	800799e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a54:	e014      	b.n	8008a80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f9b7 	bl	8008dca <USBD_CtlSendStatus>
      break;
 8008a5c:	e010      	b.n	8008a80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f9b3 	bl	8008dca <USBD_CtlSendStatus>
      break;
 8008a64:	e00c      	b.n	8008a80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f900 	bl	8008c6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a6e:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <USBD_SetConfig+0x150>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7fe ff92 	bl	800799e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a7e:	bf00      	nop
  }

  return ret;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000cf0 	.word	0x20000cf0

08008a90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	88db      	ldrh	r3, [r3, #6]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d004      	beq.n	8008aac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f8e2 	bl	8008c6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008aaa:	e023      	b.n	8008af4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	dc02      	bgt.n	8008abe <USBD_GetConfig+0x2e>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dc03      	bgt.n	8008ac4 <USBD_GetConfig+0x34>
 8008abc:	e015      	b.n	8008aea <USBD_GetConfig+0x5a>
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d00b      	beq.n	8008ada <USBD_GetConfig+0x4a>
 8008ac2:	e012      	b.n	8008aea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3308      	adds	r3, #8
 8008ace:	2201      	movs	r2, #1
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f93c 	bl	8008d50 <USBD_CtlSendData>
        break;
 8008ad8:	e00c      	b.n	8008af4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3304      	adds	r3, #4
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f934 	bl	8008d50 <USBD_CtlSendData>
        break;
 8008ae8:	e004      	b.n	8008af4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f8be 	bl	8008c6e <USBD_CtlError>
        break;
 8008af2:	bf00      	nop
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d81e      	bhi.n	8008b52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	88db      	ldrh	r3, [r3, #6]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d004      	beq.n	8008b26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f8a5 	bl	8008c6e <USBD_CtlError>
        break;
 8008b24:	e01a      	b.n	8008b5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d005      	beq.n	8008b42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f043 0202 	orr.w	r2, r3, #2
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	330c      	adds	r3, #12
 8008b46:	2202      	movs	r2, #2
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f900 	bl	8008d50 <USBD_CtlSendData>
      break;
 8008b50:	e004      	b.n	8008b5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b52:	6839      	ldr	r1, [r7, #0]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f88a 	bl	8008c6e <USBD_CtlError>
      break;
 8008b5a:	bf00      	nop
  }
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	885b      	ldrh	r3, [r3, #2]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d107      	bne.n	8008b86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f923 	bl	8008dca <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b84:	e013      	b.n	8008bae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	885b      	ldrh	r3, [r3, #2]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d10b      	bne.n	8008ba6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	889b      	ldrh	r3, [r3, #4]
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f913 	bl	8008dca <USBD_CtlSendStatus>
}
 8008ba4:	e003      	b.n	8008bae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f860 	bl	8008c6e <USBD_CtlError>
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d80b      	bhi.n	8008be6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	885b      	ldrh	r3, [r3, #2]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d10c      	bne.n	8008bf0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f8f3 	bl	8008dca <USBD_CtlSendStatus>
      }
      break;
 8008be4:	e004      	b.n	8008bf0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f840 	bl	8008c6e <USBD_CtlError>
      break;
 8008bee:	e000      	b.n	8008bf2 <USBD_ClrFeature+0x3c>
      break;
 8008bf0:	bf00      	nop
  }
}
 8008bf2:	bf00      	nop
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	781a      	ldrb	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	3301      	adds	r3, #1
 8008c14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	3301      	adds	r3, #1
 8008c22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7ff fa41 	bl	80080ac <SWAPBYTE>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3301      	adds	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7ff fa34 	bl	80080ac <SWAPBYTE>
 8008c44:	4603      	mov	r3, r0
 8008c46:	461a      	mov	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff fa27 	bl	80080ac <SWAPBYTE>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	461a      	mov	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	80da      	strh	r2, [r3, #6]
}
 8008c66:	bf00      	nop
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c78:	2180      	movs	r1, #128	; 0x80
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f003 fc44 	bl	800c508 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c80:	2100      	movs	r1, #0
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f003 fc40 	bl	800c508 <USBD_LL_StallEP>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d036      	beq.n	8008d14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008caa:	6938      	ldr	r0, [r7, #16]
 8008cac:	f000 f836 	bl	8008d1c <USBD_GetLen>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7812      	ldrb	r2, [r2, #0]
 8008cc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	2203      	movs	r2, #3
 8008cd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ce0:	e013      	b.n	8008d0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	7812      	ldrb	r2, [r2, #0]
 8008cec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	613b      	str	r3, [r7, #16]
    idx++;
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	4413      	add	r3, r2
 8008d00:	2200      	movs	r2, #0
 8008d02:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	3301      	adds	r3, #1
 8008d08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e7      	bne.n	8008ce2 <USBD_GetString+0x52>
 8008d12:	e000      	b.n	8008d16 <USBD_GetString+0x86>
    return;
 8008d14:	bf00      	nop
  }
}
 8008d16:	3718      	adds	r7, #24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d2c:	e005      	b.n	8008d3a <USBD_GetLen+0x1e>
  {
    len++;
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	3301      	adds	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1f5      	bne.n	8008d2e <USBD_GetLen+0x12>
  }

  return len;
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	2100      	movs	r1, #0
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f003 fc4f 	bl	800c61a <USBD_LL_Transmit>

  return USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	2100      	movs	r1, #0
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f003 fc3e 	bl	800c61a <USBD_LL_Transmit>

  return USBD_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	2100      	movs	r1, #0
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f003 fc4e 	bl	800c65c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2204      	movs	r2, #4
 8008dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f003 fc1a 	bl	800c61a <USBD_LL_Transmit>

  return USBD_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2205      	movs	r2, #5
 8008dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e00:	2300      	movs	r3, #0
 8008e02:	2200      	movs	r2, #0
 8008e04:	2100      	movs	r1, #0
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f003 fc28 	bl	800c65c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b085      	sub	sp, #20
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008e20:	2300      	movs	r3, #0
 8008e22:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e28:	2b84      	cmp	r3, #132	; 0x84
 8008e2a:	d005      	beq.n	8008e38 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008e2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	3303      	adds	r3, #3
 8008e36:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008e38:	68fb      	ldr	r3, [r7, #12]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008e4a:	f001 f9eb 	bl	800a224 <vTaskStartScheduler>
  
  return osOK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e56:	b089      	sub	sp, #36	; 0x24
 8008e58:	af04      	add	r7, sp, #16
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d020      	beq.n	8008ea8 <osThreadCreate+0x54>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d01c      	beq.n	8008ea8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685c      	ldr	r4, [r3, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681d      	ldr	r5, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	691e      	ldr	r6, [r3, #16]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff ffc8 	bl	8008e16 <makeFreeRtosPriority>
 8008e86:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e90:	9202      	str	r2, [sp, #8]
 8008e92:	9301      	str	r3, [sp, #4]
 8008e94:	9100      	str	r1, [sp, #0]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	4632      	mov	r2, r6
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 ff65 	bl	8009d6c <xTaskCreateStatic>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	e01c      	b.n	8008ee2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685c      	ldr	r4, [r3, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eb4:	b29e      	uxth	r6, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff ffaa 	bl	8008e16 <makeFreeRtosPriority>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	f107 030c 	add.w	r3, r7, #12
 8008ec8:	9301      	str	r3, [sp, #4]
 8008eca:	9200      	str	r2, [sp, #0]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	4632      	mov	r2, r6
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f000 ffa7 	bl	8009e26 <xTaskCreate>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d001      	beq.n	8008ee2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e000      	b.n	8008ee4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008eec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <osDelay+0x16>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	e000      	b.n	8008f04 <osDelay+0x18>
 8008f02:	2301      	movs	r3, #1
 8008f04:	4618      	mov	r0, r3
 8008f06:	f001 f959 	bl	800a1bc <vTaskDelay>
  
  return osOK;
 8008f0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f103 0208 	add.w	r2, r3, #8
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f103 0208 	add.w	r2, r3, #8
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f103 0208 	add.w	r2, r3, #8
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b085      	sub	sp, #20
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
 8008f76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	689a      	ldr	r2, [r3, #8]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	601a      	str	r2, [r3, #0]
}
 8008faa:	bf00      	nop
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b085      	sub	sp, #20
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fcc:	d103      	bne.n	8008fd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e00c      	b.n	8008ff0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	e002      	b.n	8008fe4 <vListInsert+0x2e>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d2f6      	bcs.n	8008fde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	601a      	str	r2, [r3, #0]
}
 800901c:	bf00      	nop
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	6892      	ldr	r2, [r2, #8]
 800903e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	6852      	ldr	r2, [r2, #4]
 8009048:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	429a      	cmp	r2, r3
 8009052:	d103      	bne.n	800905c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689a      	ldr	r2, [r3, #8]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	1e5a      	subs	r2, r3, #1
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80090a6:	f002 fbed 	bl	800b884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b2:	68f9      	ldr	r1, [r7, #12]
 80090b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090b6:	fb01 f303 	mul.w	r3, r1, r3
 80090ba:	441a      	add	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d6:	3b01      	subs	r3, #1
 80090d8:	68f9      	ldr	r1, [r7, #12]
 80090da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090dc:	fb01 f303 	mul.w	r3, r1, r3
 80090e0:	441a      	add	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	22ff      	movs	r2, #255	; 0xff
 80090ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	22ff      	movs	r2, #255	; 0xff
 80090f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d114      	bne.n	8009126 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01a      	beq.n	800913a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3310      	adds	r3, #16
 8009108:	4618      	mov	r0, r3
 800910a:	f001 fb1f 	bl	800a74c <xTaskRemoveFromEventList>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d012      	beq.n	800913a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009114:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <xQueueGenericReset+0xcc>)
 8009116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	e009      	b.n	800913a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3310      	adds	r3, #16
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff fef2 	bl	8008f14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	3324      	adds	r3, #36	; 0x24
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff feed 	bl	8008f14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800913a:	f002 fbd3 	bl	800b8e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800913e:	2301      	movs	r3, #1
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	e000ed04 	.word	0xe000ed04

0800914c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08e      	sub	sp, #56	; 0x38
 8009150:	af02      	add	r7, sp, #8
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009172:	bf00      	nop
 8009174:	e7fe      	b.n	8009174 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800918e:	bf00      	nop
 8009190:	e7fe      	b.n	8009190 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <xQueueGenericCreateStatic+0x52>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <xQueueGenericCreateStatic+0x56>
 800919e:	2301      	movs	r3, #1
 80091a0:	e000      	b.n	80091a4 <xQueueGenericCreateStatic+0x58>
 80091a2:	2300      	movs	r3, #0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10a      	bne.n	80091be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	f383 8811 	msr	BASEPRI, r3
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	f3bf 8f4f 	dsb	sy
 80091b8:	623b      	str	r3, [r7, #32]
}
 80091ba:	bf00      	nop
 80091bc:	e7fe      	b.n	80091bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <xQueueGenericCreateStatic+0x7e>
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <xQueueGenericCreateStatic+0x82>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e000      	b.n	80091d0 <xQueueGenericCreateStatic+0x84>
 80091ce:	2300      	movs	r3, #0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10a      	bne.n	80091ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	61fb      	str	r3, [r7, #28]
}
 80091e6:	bf00      	nop
 80091e8:	e7fe      	b.n	80091e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091ea:	2348      	movs	r3, #72	; 0x48
 80091ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b48      	cmp	r3, #72	; 0x48
 80091f2:	d00a      	beq.n	800920a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	61bb      	str	r3, [r7, #24]
}
 8009206:	bf00      	nop
 8009208:	e7fe      	b.n	8009208 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800920a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00d      	beq.n	8009232 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	2201      	movs	r2, #1
 800921a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800921e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4613      	mov	r3, r2
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f83f 	bl	80092b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009234:	4618      	mov	r0, r3
 8009236:	3730      	adds	r7, #48	; 0x30
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08a      	sub	sp, #40	; 0x28
 8009240:	af02      	add	r7, sp, #8
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	4613      	mov	r3, r2
 8009248:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	613b      	str	r3, [r7, #16]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	fb02 f303 	mul.w	r3, r2, r3
 800926e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	3348      	adds	r3, #72	; 0x48
 8009274:	4618      	mov	r0, r3
 8009276:	f002 fc27 	bl	800bac8 <pvPortMalloc>
 800927a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d011      	beq.n	80092a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	3348      	adds	r3, #72	; 0x48
 800928a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009294:	79fa      	ldrb	r2, [r7, #7]
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	4613      	mov	r3, r2
 800929c:	697a      	ldr	r2, [r7, #20]
 800929e:	68b9      	ldr	r1, [r7, #8]
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 f805 	bl	80092b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092a6:	69bb      	ldr	r3, [r7, #24]
	}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3720      	adds	r7, #32
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d103      	bne.n	80092cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	69ba      	ldr	r2, [r7, #24]
 80092c8:	601a      	str	r2, [r3, #0]
 80092ca:	e002      	b.n	80092d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80092de:	2101      	movs	r1, #1
 80092e0:	69b8      	ldr	r0, [r7, #24]
 80092e2:	f7ff fecb 	bl	800907c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00e      	beq.n	800931a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800930e:	2300      	movs	r3, #0
 8009310:	2200      	movs	r2, #0
 8009312:	2100      	movs	r1, #0
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f81d 	bl	8009354 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800931a:	bf00      	nop
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009322:	b580      	push	{r7, lr}
 8009324:	b086      	sub	sp, #24
 8009326:	af00      	add	r7, sp, #0
 8009328:	4603      	mov	r3, r0
 800932a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800932c:	2301      	movs	r3, #1
 800932e:	617b      	str	r3, [r7, #20]
 8009330:	2300      	movs	r3, #0
 8009332:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	461a      	mov	r2, r3
 8009338:	6939      	ldr	r1, [r7, #16]
 800933a:	6978      	ldr	r0, [r7, #20]
 800933c:	f7ff ff7e 	bl	800923c <xQueueGenericCreate>
 8009340:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f7ff ffd3 	bl	80092ee <prvInitialiseMutex>

		return xNewQueue;
 8009348:	68fb      	ldr	r3, [r7, #12]
	}
 800934a:	4618      	mov	r0, r3
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08e      	sub	sp, #56	; 0x38
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009362:	2300      	movs	r3, #0
 8009364:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <xQueueGenericSend+0x32>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009382:	bf00      	nop
 8009384:	e7fe      	b.n	8009384 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d103      	bne.n	8009394 <xQueueGenericSend+0x40>
 800938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009390:	2b00      	cmp	r3, #0
 8009392:	d101      	bne.n	8009398 <xQueueGenericSend+0x44>
 8009394:	2301      	movs	r3, #1
 8009396:	e000      	b.n	800939a <xQueueGenericSend+0x46>
 8009398:	2300      	movs	r3, #0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10a      	bne.n	80093b4 <xQueueGenericSend+0x60>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093b0:	bf00      	nop
 80093b2:	e7fe      	b.n	80093b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d103      	bne.n	80093c2 <xQueueGenericSend+0x6e>
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d101      	bne.n	80093c6 <xQueueGenericSend+0x72>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e000      	b.n	80093c8 <xQueueGenericSend+0x74>
 80093c6:	2300      	movs	r3, #0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	623b      	str	r3, [r7, #32]
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093e2:	f001 fb73 	bl	800aacc <xTaskGetSchedulerState>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d102      	bne.n	80093f2 <xQueueGenericSend+0x9e>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <xQueueGenericSend+0xa2>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e000      	b.n	80093f8 <xQueueGenericSend+0xa4>
 80093f6:	2300      	movs	r3, #0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <xQueueGenericSend+0xbe>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	f383 8811 	msr	BASEPRI, r3
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	61fb      	str	r3, [r7, #28]
}
 800940e:	bf00      	nop
 8009410:	e7fe      	b.n	8009410 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009412:	f002 fa37 	bl	800b884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800941a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941e:	429a      	cmp	r2, r3
 8009420:	d302      	bcc.n	8009428 <xQueueGenericSend+0xd4>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b02      	cmp	r3, #2
 8009426:	d129      	bne.n	800947c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	68b9      	ldr	r1, [r7, #8]
 800942c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800942e:	f000 fb2f 	bl	8009a90 <prvCopyDataToQueue>
 8009432:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	2b00      	cmp	r3, #0
 800943a:	d010      	beq.n	800945e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	3324      	adds	r3, #36	; 0x24
 8009440:	4618      	mov	r0, r3
 8009442:	f001 f983 	bl	800a74c <xTaskRemoveFromEventList>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d013      	beq.n	8009474 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800944c:	4b3f      	ldr	r3, [pc, #252]	; (800954c <xQueueGenericSend+0x1f8>)
 800944e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	e00a      	b.n	8009474 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800945e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d007      	beq.n	8009474 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009464:	4b39      	ldr	r3, [pc, #228]	; (800954c <xQueueGenericSend+0x1f8>)
 8009466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009474:	f002 fa36 	bl	800b8e4 <vPortExitCritical>
				return pdPASS;
 8009478:	2301      	movs	r3, #1
 800947a:	e063      	b.n	8009544 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d103      	bne.n	800948a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009482:	f002 fa2f 	bl	800b8e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009486:	2300      	movs	r3, #0
 8009488:	e05c      	b.n	8009544 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800948a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948c:	2b00      	cmp	r3, #0
 800948e:	d106      	bne.n	800949e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009490:	f107 0314 	add.w	r3, r7, #20
 8009494:	4618      	mov	r0, r3
 8009496:	f001 f9bb 	bl	800a810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800949a:	2301      	movs	r3, #1
 800949c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800949e:	f002 fa21 	bl	800b8e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094a2:	f000 ff2f 	bl	800a304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094a6:	f002 f9ed 	bl	800b884 <vPortEnterCritical>
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094b0:	b25b      	sxtb	r3, r3
 80094b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094b6:	d103      	bne.n	80094c0 <xQueueGenericSend+0x16c>
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094c6:	b25b      	sxtb	r3, r3
 80094c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094cc:	d103      	bne.n	80094d6 <xQueueGenericSend+0x182>
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094d6:	f002 fa05 	bl	800b8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094da:	1d3a      	adds	r2, r7, #4
 80094dc:	f107 0314 	add.w	r3, r7, #20
 80094e0:	4611      	mov	r1, r2
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 f9aa 	bl	800a83c <xTaskCheckForTimeOut>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d124      	bne.n	8009538 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094f0:	f000 fbc6 	bl	8009c80 <prvIsQueueFull>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d018      	beq.n	800952c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	3310      	adds	r3, #16
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	4611      	mov	r1, r2
 8009502:	4618      	mov	r0, r3
 8009504:	f001 f8d2 	bl	800a6ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800950a:	f000 fb51 	bl	8009bb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800950e:	f000 ff07 	bl	800a320 <xTaskResumeAll>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	f47f af7c 	bne.w	8009412 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800951a:	4b0c      	ldr	r3, [pc, #48]	; (800954c <xQueueGenericSend+0x1f8>)
 800951c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	e772      	b.n	8009412 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800952c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800952e:	f000 fb3f 	bl	8009bb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009532:	f000 fef5 	bl	800a320 <xTaskResumeAll>
 8009536:	e76c      	b.n	8009412 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009538:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800953a:	f000 fb39 	bl	8009bb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800953e:	f000 feef 	bl	800a320 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009542:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009544:	4618      	mov	r0, r3
 8009546:	3738      	adds	r7, #56	; 0x38
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	e000ed04 	.word	0xe000ed04

08009550 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b090      	sub	sp, #64	; 0x40
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10a      	bne.n	800957e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d103      	bne.n	800958c <xQueueGenericSendFromISR+0x3c>
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <xQueueGenericSendFromISR+0x40>
 800958c:	2301      	movs	r3, #1
 800958e:	e000      	b.n	8009592 <xQueueGenericSendFromISR+0x42>
 8009590:	2300      	movs	r3, #0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10a      	bne.n	80095ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095a8:	bf00      	nop
 80095aa:	e7fe      	b.n	80095aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d103      	bne.n	80095ba <xQueueGenericSendFromISR+0x6a>
 80095b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d101      	bne.n	80095be <xQueueGenericSendFromISR+0x6e>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e000      	b.n	80095c0 <xQueueGenericSendFromISR+0x70>
 80095be:	2300      	movs	r3, #0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10a      	bne.n	80095da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80095c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c8:	f383 8811 	msr	BASEPRI, r3
 80095cc:	f3bf 8f6f 	isb	sy
 80095d0:	f3bf 8f4f 	dsb	sy
 80095d4:	623b      	str	r3, [r7, #32]
}
 80095d6:	bf00      	nop
 80095d8:	e7fe      	b.n	80095d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095da:	f002 fa35 	bl	800ba48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095de:	f3ef 8211 	mrs	r2, BASEPRI
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	61fa      	str	r2, [r7, #28]
 80095f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009602:	429a      	cmp	r2, r3
 8009604:	d302      	bcc.n	800960c <xQueueGenericSendFromISR+0xbc>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d12f      	bne.n	800966c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800960c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	68b9      	ldr	r1, [r7, #8]
 8009620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009622:	f000 fa35 	bl	8009a90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009626:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800962a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800962e:	d112      	bne.n	8009656 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	2b00      	cmp	r3, #0
 8009636:	d016      	beq.n	8009666 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	3324      	adds	r3, #36	; 0x24
 800963c:	4618      	mov	r0, r3
 800963e:	f001 f885 	bl	800a74c <xTaskRemoveFromEventList>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00e      	beq.n	8009666 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	e007      	b.n	8009666 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009656:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800965a:	3301      	adds	r3, #1
 800965c:	b2db      	uxtb	r3, r3
 800965e:	b25a      	sxtb	r2, r3
 8009660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009666:	2301      	movs	r3, #1
 8009668:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800966a:	e001      	b.n	8009670 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800966c:	2300      	movs	r3, #0
 800966e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009672:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800967a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800967c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800967e:	4618      	mov	r0, r3
 8009680:	3740      	adds	r7, #64	; 0x40
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08c      	sub	sp, #48	; 0x30
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009694:	2300      	movs	r3, #0
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <xQueueReceive+0x30>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	623b      	str	r3, [r7, #32]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <xQueueReceive+0x3e>
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <xQueueReceive+0x42>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <xQueueReceive+0x44>
 80096ca:	2300      	movs	r3, #0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10a      	bne.n	80096e6 <xQueueReceive+0x5e>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	61fb      	str	r3, [r7, #28]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096e6:	f001 f9f1 	bl	800aacc <xTaskGetSchedulerState>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <xQueueReceive+0x6e>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <xQueueReceive+0x72>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e000      	b.n	80096fc <xQueueReceive+0x74>
 80096fa:	2300      	movs	r3, #0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <xQueueReceive+0x8e>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	61bb      	str	r3, [r7, #24]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009716:	f002 f8b5 	bl	800b884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	2b00      	cmp	r3, #0
 8009724:	d01f      	beq.n	8009766 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009726:	68b9      	ldr	r1, [r7, #8]
 8009728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800972a:	f000 fa1b 	bl	8009b64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	1e5a      	subs	r2, r3, #1
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00f      	beq.n	800975e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800973e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009740:	3310      	adds	r3, #16
 8009742:	4618      	mov	r0, r3
 8009744:	f001 f802 	bl	800a74c <xTaskRemoveFromEventList>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d007      	beq.n	800975e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800974e:	4b3d      	ldr	r3, [pc, #244]	; (8009844 <xQueueReceive+0x1bc>)
 8009750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800975e:	f002 f8c1 	bl	800b8e4 <vPortExitCritical>
				return pdPASS;
 8009762:	2301      	movs	r3, #1
 8009764:	e069      	b.n	800983a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d103      	bne.n	8009774 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800976c:	f002 f8ba 	bl	800b8e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009770:	2300      	movs	r3, #0
 8009772:	e062      	b.n	800983a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	2b00      	cmp	r3, #0
 8009778:	d106      	bne.n	8009788 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800977a:	f107 0310 	add.w	r3, r7, #16
 800977e:	4618      	mov	r0, r3
 8009780:	f001 f846 	bl	800a810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009784:	2301      	movs	r3, #1
 8009786:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009788:	f002 f8ac 	bl	800b8e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800978c:	f000 fdba 	bl	800a304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009790:	f002 f878 	bl	800b884 <vPortEnterCritical>
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800979a:	b25b      	sxtb	r3, r3
 800979c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097a0:	d103      	bne.n	80097aa <xQueueReceive+0x122>
 80097a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097b0:	b25b      	sxtb	r3, r3
 80097b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097b6:	d103      	bne.n	80097c0 <xQueueReceive+0x138>
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097c0:	f002 f890 	bl	800b8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097c4:	1d3a      	adds	r2, r7, #4
 80097c6:	f107 0310 	add.w	r3, r7, #16
 80097ca:	4611      	mov	r1, r2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 f835 	bl	800a83c <xTaskCheckForTimeOut>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d123      	bne.n	8009820 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097da:	f000 fa3b 	bl	8009c54 <prvIsQueueEmpty>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d017      	beq.n	8009814 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e6:	3324      	adds	r3, #36	; 0x24
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	4611      	mov	r1, r2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 ff5d 	bl	800a6ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f4:	f000 f9dc 	bl	8009bb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097f8:	f000 fd92 	bl	800a320 <xTaskResumeAll>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d189      	bne.n	8009716 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009802:	4b10      	ldr	r3, [pc, #64]	; (8009844 <xQueueReceive+0x1bc>)
 8009804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	e780      	b.n	8009716 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009816:	f000 f9cb 	bl	8009bb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800981a:	f000 fd81 	bl	800a320 <xTaskResumeAll>
 800981e:	e77a      	b.n	8009716 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009822:	f000 f9c5 	bl	8009bb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009826:	f000 fd7b 	bl	800a320 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800982a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800982c:	f000 fa12 	bl	8009c54 <prvIsQueueEmpty>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	f43f af6f 	beq.w	8009716 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009838:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800983a:	4618      	mov	r0, r3
 800983c:	3730      	adds	r7, #48	; 0x30
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b08e      	sub	sp, #56	; 0x38
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009852:	2300      	movs	r3, #0
 8009854:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800985a:	2300      	movs	r3, #0
 800985c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800985e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10a      	bne.n	800987a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	623b      	str	r3, [r7, #32]
}
 8009876:	bf00      	nop
 8009878:	e7fe      	b.n	8009878 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00a      	beq.n	8009898 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	61fb      	str	r3, [r7, #28]
}
 8009894:	bf00      	nop
 8009896:	e7fe      	b.n	8009896 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009898:	f001 f918 	bl	800aacc <xTaskGetSchedulerState>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d102      	bne.n	80098a8 <xQueueSemaphoreTake+0x60>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <xQueueSemaphoreTake+0x64>
 80098a8:	2301      	movs	r3, #1
 80098aa:	e000      	b.n	80098ae <xQueueSemaphoreTake+0x66>
 80098ac:	2300      	movs	r3, #0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	61bb      	str	r3, [r7, #24]
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098c8:	f001 ffdc 	bl	800b884 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80098cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d024      	beq.n	8009922 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80098d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098da:	1e5a      	subs	r2, r3, #1
 80098dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80098e8:	f001 fa98 	bl	800ae1c <pvTaskIncrementMutexHeldCount>
 80098ec:	4602      	mov	r2, r0
 80098ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00f      	beq.n	800991a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	3310      	adds	r3, #16
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 ff24 	bl	800a74c <xTaskRemoveFromEventList>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d007      	beq.n	800991a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800990a:	4b54      	ldr	r3, [pc, #336]	; (8009a5c <xQueueSemaphoreTake+0x214>)
 800990c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800991a:	f001 ffe3 	bl	800b8e4 <vPortExitCritical>
				return pdPASS;
 800991e:	2301      	movs	r3, #1
 8009920:	e097      	b.n	8009a52 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d111      	bne.n	800994c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00a      	beq.n	8009944 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	617b      	str	r3, [r7, #20]
}
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009944:	f001 ffce 	bl	800b8e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009948:	2300      	movs	r3, #0
 800994a:	e082      	b.n	8009a52 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800994c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009952:	f107 030c 	add.w	r3, r7, #12
 8009956:	4618      	mov	r0, r3
 8009958:	f000 ff5a 	bl	800a810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800995c:	2301      	movs	r3, #1
 800995e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009960:	f001 ffc0 	bl	800b8e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009964:	f000 fcce 	bl	800a304 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009968:	f001 ff8c 	bl	800b884 <vPortEnterCritical>
 800996c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009972:	b25b      	sxtb	r3, r3
 8009974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009978:	d103      	bne.n	8009982 <xQueueSemaphoreTake+0x13a>
 800997a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009988:	b25b      	sxtb	r3, r3
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800998e:	d103      	bne.n	8009998 <xQueueSemaphoreTake+0x150>
 8009990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009998:	f001 ffa4 	bl	800b8e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800999c:	463a      	mov	r2, r7
 800999e:	f107 030c 	add.w	r3, r7, #12
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 ff49 	bl	800a83c <xTaskCheckForTimeOut>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d132      	bne.n	8009a16 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099b2:	f000 f94f 	bl	8009c54 <prvIsQueueEmpty>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d026      	beq.n	8009a0a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d109      	bne.n	80099d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80099c4:	f001 ff5e 	bl	800b884 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ca:	689b      	ldr	r3, [r3, #8]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f001 f89b 	bl	800ab08 <xTaskPriorityInherit>
 80099d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80099d4:	f001 ff86 	bl	800b8e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099da:	3324      	adds	r3, #36	; 0x24
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	4611      	mov	r1, r2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f000 fe63 	bl	800a6ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099e8:	f000 f8e2 	bl	8009bb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099ec:	f000 fc98 	bl	800a320 <xTaskResumeAll>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f47f af68 	bne.w	80098c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80099f8:	4b18      	ldr	r3, [pc, #96]	; (8009a5c <xQueueSemaphoreTake+0x214>)
 80099fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	e75e      	b.n	80098c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a0c:	f000 f8d0 	bl	8009bb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a10:	f000 fc86 	bl	800a320 <xTaskResumeAll>
 8009a14:	e758      	b.n	80098c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a18:	f000 f8ca 	bl	8009bb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a1c:	f000 fc80 	bl	800a320 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a22:	f000 f917 	bl	8009c54 <prvIsQueueEmpty>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f43f af4d 	beq.w	80098c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00d      	beq.n	8009a50 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009a34:	f001 ff26 	bl	800b884 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a3a:	f000 f811 	bl	8009a60 <prvGetDisinheritPriorityAfterTimeout>
 8009a3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a46:	4618      	mov	r0, r3
 8009a48:	f001 f95a 	bl	800ad00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a4c:	f001 ff4a 	bl	800b8e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3738      	adds	r7, #56	; 0x38
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	e000ed04 	.word	0xe000ed04

08009a60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d006      	beq.n	8009a7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f1c3 0307 	rsb	r3, r3, #7
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	e001      	b.n	8009a82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009a82:	68fb      	ldr	r3, [r7, #12]
	}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10d      	bne.n	8009aca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d14d      	bne.n	8009b52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 f89a 	bl	800abf4 <xTaskPriorityDisinherit>
 8009ac0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	609a      	str	r2, [r3, #8]
 8009ac8:	e043      	b.n	8009b52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d119      	bne.n	8009b04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6858      	ldr	r0, [r3, #4]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad8:	461a      	mov	r2, r3
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	f002 fe4a 	bl	800c774 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	441a      	add	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d32b      	bcc.n	8009b52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	605a      	str	r2, [r3, #4]
 8009b02:	e026      	b.n	8009b52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	68d8      	ldr	r0, [r3, #12]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	f002 fe30 	bl	800c774 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	68da      	ldr	r2, [r3, #12]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1c:	425b      	negs	r3, r3
 8009b1e:	441a      	add	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	68da      	ldr	r2, [r3, #12]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d207      	bcs.n	8009b40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b38:	425b      	negs	r3, r3
 8009b3a:	441a      	add	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d105      	bne.n	8009b52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b5a:	697b      	ldr	r3, [r7, #20]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d018      	beq.n	8009ba8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7e:	441a      	add	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d303      	bcc.n	8009b98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68d9      	ldr	r1, [r3, #12]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	6838      	ldr	r0, [r7, #0]
 8009ba4:	f002 fde6 	bl	800c774 <memcpy>
	}
}
 8009ba8:	bf00      	nop
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009bb8:	f001 fe64 	bl	800b884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bc4:	e011      	b.n	8009bea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d012      	beq.n	8009bf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3324      	adds	r3, #36	; 0x24
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 fdba 	bl	800a74c <xTaskRemoveFromEventList>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009bde:	f000 fe8f 	bl	800a900 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
 8009be4:	3b01      	subs	r3, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dce9      	bgt.n	8009bc6 <prvUnlockQueue+0x16>
 8009bf2:	e000      	b.n	8009bf6 <prvUnlockQueue+0x46>
					break;
 8009bf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	22ff      	movs	r2, #255	; 0xff
 8009bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bfe:	f001 fe71 	bl	800b8e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c02:	f001 fe3f 	bl	800b884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c0e:	e011      	b.n	8009c34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d012      	beq.n	8009c3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	3310      	adds	r3, #16
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f000 fd95 	bl	800a74c <xTaskRemoveFromEventList>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c28:	f000 fe6a 	bl	800a900 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	dce9      	bgt.n	8009c10 <prvUnlockQueue+0x60>
 8009c3c:	e000      	b.n	8009c40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	22ff      	movs	r2, #255	; 0xff
 8009c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009c48:	f001 fe4c 	bl	800b8e4 <vPortExitCritical>
}
 8009c4c:	bf00      	nop
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c5c:	f001 fe12 	bl	800b884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d102      	bne.n	8009c6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	e001      	b.n	8009c72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c72:	f001 fe37 	bl	800b8e4 <vPortExitCritical>

	return xReturn;
 8009c76:	68fb      	ldr	r3, [r7, #12]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c88:	f001 fdfc 	bl	800b884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d102      	bne.n	8009c9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	e001      	b.n	8009ca2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ca2:	f001 fe1f 	bl	800b8e4 <vPortExitCritical>

	return xReturn;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
 8009cbe:	e014      	b.n	8009cea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009cc0:	4a0f      	ldr	r2, [pc, #60]	; (8009d00 <vQueueAddToRegistry+0x50>)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10b      	bne.n	8009ce4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ccc:	490c      	ldr	r1, [pc, #48]	; (8009d00 <vQueueAddToRegistry+0x50>)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009cd6:	4a0a      	ldr	r2, [pc, #40]	; (8009d00 <vQueueAddToRegistry+0x50>)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	4413      	add	r3, r2
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ce2:	e006      	b.n	8009cf2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b07      	cmp	r3, #7
 8009cee:	d9e7      	bls.n	8009cc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	20000cf4 	.word	0x20000cf4

08009d04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d14:	f001 fdb6 	bl	800b884 <vPortEnterCritical>
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d1e:	b25b      	sxtb	r3, r3
 8009d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d24:	d103      	bne.n	8009d2e <vQueueWaitForMessageRestricted+0x2a>
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d34:	b25b      	sxtb	r3, r3
 8009d36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d3a:	d103      	bne.n	8009d44 <vQueueWaitForMessageRestricted+0x40>
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d44:	f001 fdce 	bl	800b8e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d106      	bne.n	8009d5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	3324      	adds	r3, #36	; 0x24
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	68b9      	ldr	r1, [r7, #8]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fccb 	bl	800a6f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d5e:	6978      	ldr	r0, [r7, #20]
 8009d60:	f7ff ff26 	bl	8009bb0 <prvUnlockQueue>
	}
 8009d64:	bf00      	nop
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08e      	sub	sp, #56	; 0x38
 8009d70:	af04      	add	r7, sp, #16
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
 8009d78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10a      	bne.n	8009d96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	623b      	str	r3, [r7, #32]
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <xTaskCreateStatic+0x46>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	61fb      	str	r3, [r7, #28]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009db2:	23b4      	movs	r3, #180	; 0xb4
 8009db4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	2bb4      	cmp	r3, #180	; 0xb4
 8009dba:	d00a      	beq.n	8009dd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc0:	f383 8811 	msr	BASEPRI, r3
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	61bb      	str	r3, [r7, #24]
}
 8009dce:	bf00      	nop
 8009dd0:	e7fe      	b.n	8009dd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009dd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d01e      	beq.n	8009e18 <xTaskCreateStatic+0xac>
 8009dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d01b      	beq.n	8009e18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009de2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009de8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	2202      	movs	r2, #2
 8009dee:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009df2:	2300      	movs	r3, #0
 8009df4:	9303      	str	r3, [sp, #12]
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	9302      	str	r3, [sp, #8]
 8009dfa:	f107 0314 	add.w	r3, r7, #20
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f000 f850 	bl	8009eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e12:	f000 f8eb 	bl	8009fec <prvAddNewTaskToReadyList>
 8009e16:	e001      	b.n	8009e1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e1c:	697b      	ldr	r3, [r7, #20]
	}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3728      	adds	r7, #40	; 0x28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b08c      	sub	sp, #48	; 0x30
 8009e2a:	af04      	add	r7, sp, #16
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	603b      	str	r3, [r7, #0]
 8009e32:	4613      	mov	r3, r2
 8009e34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009e36:	88fb      	ldrh	r3, [r7, #6]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f001 fe44 	bl	800bac8 <pvPortMalloc>
 8009e40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00e      	beq.n	8009e66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e48:	20b4      	movs	r0, #180	; 0xb4
 8009e4a:	f001 fe3d 	bl	800bac8 <pvPortMalloc>
 8009e4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8009e5c:	e005      	b.n	8009e6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e5e:	6978      	ldr	r0, [r7, #20]
 8009e60:	f001 fefe 	bl	800bc60 <vPortFree>
 8009e64:	e001      	b.n	8009e6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d017      	beq.n	8009ea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e78:	88fa      	ldrh	r2, [r7, #6]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9303      	str	r3, [sp, #12]
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	9302      	str	r3, [sp, #8]
 8009e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e84:	9301      	str	r3, [sp, #4]
 8009e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	68b9      	ldr	r1, [r7, #8]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 f80e 	bl	8009eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e94:	69f8      	ldr	r0, [r7, #28]
 8009e96:	f000 f8a9 	bl	8009fec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	61bb      	str	r3, [r7, #24]
 8009e9e:	e002      	b.n	8009ea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ea6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3720      	adds	r7, #32
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	4413      	add	r3, r2
 8009ece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	f023 0307 	bic.w	r3, r3, #7
 8009ed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	f003 0307 	and.w	r3, r3, #7
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00a      	beq.n	8009ef8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	617b      	str	r3, [r7, #20]
}
 8009ef4:	bf00      	nop
 8009ef6:	e7fe      	b.n	8009ef6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d01f      	beq.n	8009f3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009efe:	2300      	movs	r3, #0
 8009f00:	61fb      	str	r3, [r7, #28]
 8009f02:	e012      	b.n	8009f2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	4413      	add	r3, r2
 8009f0a:	7819      	ldrb	r1, [r3, #0]
 8009f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	4413      	add	r3, r2
 8009f12:	3334      	adds	r3, #52	; 0x34
 8009f14:	460a      	mov	r2, r1
 8009f16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d006      	beq.n	8009f32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	3301      	adds	r3, #1
 8009f28:	61fb      	str	r3, [r7, #28]
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	2b0f      	cmp	r3, #15
 8009f2e:	d9e9      	bls.n	8009f04 <prvInitialiseNewTask+0x54>
 8009f30:	e000      	b.n	8009f34 <prvInitialiseNewTask+0x84>
			{
				break;
 8009f32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f3c:	e003      	b.n	8009f46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f48:	2b06      	cmp	r3, #6
 8009f4a:	d901      	bls.n	8009f50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f4c:	2306      	movs	r3, #6
 8009f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5e:	2200      	movs	r2, #0
 8009f60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	3304      	adds	r3, #4
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe fff4 	bl	8008f54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6e:	3318      	adds	r3, #24
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe ffef 	bl	8008f54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	f1c3 0207 	rsb	r2, r3, #7
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	334c      	adds	r3, #76	; 0x4c
 8009fa0:	2260      	movs	r2, #96	; 0x60
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f002 fbf3 	bl	800c790 <memset>
 8009faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fac:	4a0c      	ldr	r2, [pc, #48]	; (8009fe0 <prvInitialiseNewTask+0x130>)
 8009fae:	651a      	str	r2, [r3, #80]	; 0x50
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	4a0c      	ldr	r2, [pc, #48]	; (8009fe4 <prvInitialiseNewTask+0x134>)
 8009fb4:	655a      	str	r2, [r3, #84]	; 0x54
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	4a0b      	ldr	r2, [pc, #44]	; (8009fe8 <prvInitialiseNewTask+0x138>)
 8009fba:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	68f9      	ldr	r1, [r7, #12]
 8009fc0:	69b8      	ldr	r0, [r7, #24]
 8009fc2:	f001 fb33 	bl	800b62c <pxPortInitialiseStack>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d002      	beq.n	8009fd8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fd8:	bf00      	nop
 8009fda:	3720      	adds	r7, #32
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	0800ca44 	.word	0x0800ca44
 8009fe4:	0800ca64 	.word	0x0800ca64
 8009fe8:	0800ca24 	.word	0x0800ca24

08009fec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ff4:	f001 fc46 	bl	800b884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ff8:	4b2a      	ldr	r3, [pc, #168]	; (800a0a4 <prvAddNewTaskToReadyList+0xb8>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	4a29      	ldr	r2, [pc, #164]	; (800a0a4 <prvAddNewTaskToReadyList+0xb8>)
 800a000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a002:	4b29      	ldr	r3, [pc, #164]	; (800a0a8 <prvAddNewTaskToReadyList+0xbc>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d109      	bne.n	800a01e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a00a:	4a27      	ldr	r2, [pc, #156]	; (800a0a8 <prvAddNewTaskToReadyList+0xbc>)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a010:	4b24      	ldr	r3, [pc, #144]	; (800a0a4 <prvAddNewTaskToReadyList+0xb8>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d110      	bne.n	800a03a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a018:	f000 fc96 	bl	800a948 <prvInitialiseTaskLists>
 800a01c:	e00d      	b.n	800a03a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a01e:	4b23      	ldr	r3, [pc, #140]	; (800a0ac <prvAddNewTaskToReadyList+0xc0>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d109      	bne.n	800a03a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a026:	4b20      	ldr	r3, [pc, #128]	; (800a0a8 <prvAddNewTaskToReadyList+0xbc>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a030:	429a      	cmp	r2, r3
 800a032:	d802      	bhi.n	800a03a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a034:	4a1c      	ldr	r2, [pc, #112]	; (800a0a8 <prvAddNewTaskToReadyList+0xbc>)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a03a:	4b1d      	ldr	r3, [pc, #116]	; (800a0b0 <prvAddNewTaskToReadyList+0xc4>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3301      	adds	r3, #1
 800a040:	4a1b      	ldr	r2, [pc, #108]	; (800a0b0 <prvAddNewTaskToReadyList+0xc4>)
 800a042:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	2201      	movs	r2, #1
 800a04a:	409a      	lsls	r2, r3
 800a04c:	4b19      	ldr	r3, [pc, #100]	; (800a0b4 <prvAddNewTaskToReadyList+0xc8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4313      	orrs	r3, r2
 800a052:	4a18      	ldr	r2, [pc, #96]	; (800a0b4 <prvAddNewTaskToReadyList+0xc8>)
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4a15      	ldr	r2, [pc, #84]	; (800a0b8 <prvAddNewTaskToReadyList+0xcc>)
 800a064:	441a      	add	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	3304      	adds	r3, #4
 800a06a:	4619      	mov	r1, r3
 800a06c:	4610      	mov	r0, r2
 800a06e:	f7fe ff7e 	bl	8008f6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a072:	f001 fc37 	bl	800b8e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a076:	4b0d      	ldr	r3, [pc, #52]	; (800a0ac <prvAddNewTaskToReadyList+0xc0>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00e      	beq.n	800a09c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a07e:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <prvAddNewTaskToReadyList+0xbc>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	429a      	cmp	r2, r3
 800a08a:	d207      	bcs.n	800a09c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a08c:	4b0b      	ldr	r3, [pc, #44]	; (800a0bc <prvAddNewTaskToReadyList+0xd0>)
 800a08e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	20000e34 	.word	0x20000e34
 800a0a8:	20000d34 	.word	0x20000d34
 800a0ac:	20000e40 	.word	0x20000e40
 800a0b0:	20000e50 	.word	0x20000e50
 800a0b4:	20000e3c 	.word	0x20000e3c
 800a0b8:	20000d38 	.word	0x20000d38
 800a0bc:	e000ed04 	.word	0xe000ed04

0800a0c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08a      	sub	sp, #40	; 0x28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10a      	bne.n	800a0ea <vTaskDelayUntil+0x2a>
	__asm volatile
 800a0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d8:	f383 8811 	msr	BASEPRI, r3
 800a0dc:	f3bf 8f6f 	isb	sy
 800a0e0:	f3bf 8f4f 	dsb	sy
 800a0e4:	617b      	str	r3, [r7, #20]
}
 800a0e6:	bf00      	nop
 800a0e8:	e7fe      	b.n	800a0e8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10a      	bne.n	800a106 <vTaskDelayUntil+0x46>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	613b      	str	r3, [r7, #16]
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a106:	4b2a      	ldr	r3, [pc, #168]	; (800a1b0 <vTaskDelayUntil+0xf0>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <vTaskDelayUntil+0x64>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	60fb      	str	r3, [r7, #12]
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a124:	f000 f8ee 	bl	800a304 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a128:	4b22      	ldr	r3, [pc, #136]	; (800a1b4 <vTaskDelayUntil+0xf4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	683a      	ldr	r2, [r7, #0]
 800a134:	4413      	add	r3, r2
 800a136:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6a3a      	ldr	r2, [r7, #32]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d20b      	bcs.n	800a15a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	69fa      	ldr	r2, [r7, #28]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d211      	bcs.n	800a170 <vTaskDelayUntil+0xb0>
 800a14c:	69fa      	ldr	r2, [r7, #28]
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	429a      	cmp	r2, r3
 800a152:	d90d      	bls.n	800a170 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a154:	2301      	movs	r3, #1
 800a156:	627b      	str	r3, [r7, #36]	; 0x24
 800a158:	e00a      	b.n	800a170 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	69fa      	ldr	r2, [r7, #28]
 800a160:	429a      	cmp	r2, r3
 800a162:	d303      	bcc.n	800a16c <vTaskDelayUntil+0xac>
 800a164:	69fa      	ldr	r2, [r7, #28]
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d901      	bls.n	800a170 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a16c:	2301      	movs	r3, #1
 800a16e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	69fa      	ldr	r2, [r7, #28]
 800a174:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d006      	beq.n	800a18a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a17c:	69fa      	ldr	r2, [r7, #28]
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2100      	movs	r1, #0
 800a184:	4618      	mov	r0, r3
 800a186:	f000 fe5d 	bl	800ae44 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a18a:	f000 f8c9 	bl	800a320 <xTaskResumeAll>
 800a18e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d107      	bne.n	800a1a6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a196:	4b08      	ldr	r3, [pc, #32]	; (800a1b8 <vTaskDelayUntil+0xf8>)
 800a198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1a6:	bf00      	nop
 800a1a8:	3728      	adds	r7, #40	; 0x28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20000e5c 	.word	0x20000e5c
 800a1b4:	20000e38 	.word	0x20000e38
 800a1b8:	e000ed04 	.word	0xe000ed04

0800a1bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d017      	beq.n	800a1fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1ce:	4b13      	ldr	r3, [pc, #76]	; (800a21c <vTaskDelay+0x60>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00a      	beq.n	800a1ec <vTaskDelay+0x30>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	60bb      	str	r3, [r7, #8]
}
 800a1e8:	bf00      	nop
 800a1ea:	e7fe      	b.n	800a1ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1ec:	f000 f88a 	bl	800a304 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fe26 	bl	800ae44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1f8:	f000 f892 	bl	800a320 <xTaskResumeAll>
 800a1fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d107      	bne.n	800a214 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a204:	4b06      	ldr	r3, [pc, #24]	; (800a220 <vTaskDelay+0x64>)
 800a206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a214:	bf00      	nop
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	20000e5c 	.word	0x20000e5c
 800a220:	e000ed04 	.word	0xe000ed04

0800a224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b08a      	sub	sp, #40	; 0x28
 800a228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a22e:	2300      	movs	r3, #0
 800a230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a232:	463a      	mov	r2, r7
 800a234:	1d39      	adds	r1, r7, #4
 800a236:	f107 0308 	add.w	r3, r7, #8
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7f6 f966 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	9202      	str	r2, [sp, #8]
 800a248:	9301      	str	r3, [sp, #4]
 800a24a:	2300      	movs	r3, #0
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	2300      	movs	r3, #0
 800a250:	460a      	mov	r2, r1
 800a252:	4924      	ldr	r1, [pc, #144]	; (800a2e4 <vTaskStartScheduler+0xc0>)
 800a254:	4824      	ldr	r0, [pc, #144]	; (800a2e8 <vTaskStartScheduler+0xc4>)
 800a256:	f7ff fd89 	bl	8009d6c <xTaskCreateStatic>
 800a25a:	4603      	mov	r3, r0
 800a25c:	4a23      	ldr	r2, [pc, #140]	; (800a2ec <vTaskStartScheduler+0xc8>)
 800a25e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a260:	4b22      	ldr	r3, [pc, #136]	; (800a2ec <vTaskStartScheduler+0xc8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a268:	2301      	movs	r3, #1
 800a26a:	617b      	str	r3, [r7, #20]
 800a26c:	e001      	b.n	800a272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a26e:	2300      	movs	r3, #0
 800a270:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d102      	bne.n	800a27e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a278:	f000 fe4a 	bl	800af10 <xTimerCreateTimerTask>
 800a27c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d11b      	bne.n	800a2bc <vTaskStartScheduler+0x98>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	613b      	str	r3, [r7, #16]
}
 800a296:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a298:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <vTaskStartScheduler+0xcc>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	334c      	adds	r3, #76	; 0x4c
 800a29e:	4a15      	ldr	r2, [pc, #84]	; (800a2f4 <vTaskStartScheduler+0xd0>)
 800a2a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2a2:	4b15      	ldr	r3, [pc, #84]	; (800a2f8 <vTaskStartScheduler+0xd4>)
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2aa:	4b14      	ldr	r3, [pc, #80]	; (800a2fc <vTaskStartScheduler+0xd8>)
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2b0:	4b13      	ldr	r3, [pc, #76]	; (800a300 <vTaskStartScheduler+0xdc>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2b6:	f001 fa43 	bl	800b740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2ba:	e00e      	b.n	800a2da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2c2:	d10a      	bne.n	800a2da <vTaskStartScheduler+0xb6>
	__asm volatile
 800a2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c8:	f383 8811 	msr	BASEPRI, r3
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	60fb      	str	r3, [r7, #12]
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <vTaskStartScheduler+0xb4>
}
 800a2da:	bf00      	nop
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	0800c9a8 	.word	0x0800c9a8
 800a2e8:	0800a919 	.word	0x0800a919
 800a2ec:	20000e58 	.word	0x20000e58
 800a2f0:	20000d34 	.word	0x20000d34
 800a2f4:	20000294 	.word	0x20000294
 800a2f8:	20000e54 	.word	0x20000e54
 800a2fc:	20000e40 	.word	0x20000e40
 800a300:	20000e38 	.word	0x20000e38

0800a304 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a304:	b480      	push	{r7}
 800a306:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a308:	4b04      	ldr	r3, [pc, #16]	; (800a31c <vTaskSuspendAll+0x18>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3301      	adds	r3, #1
 800a30e:	4a03      	ldr	r2, [pc, #12]	; (800a31c <vTaskSuspendAll+0x18>)
 800a310:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a312:	bf00      	nop
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	20000e5c 	.word	0x20000e5c

0800a320 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a32e:	4b41      	ldr	r3, [pc, #260]	; (800a434 <xTaskResumeAll+0x114>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10a      	bne.n	800a34c <xTaskResumeAll+0x2c>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	603b      	str	r3, [r7, #0]
}
 800a348:	bf00      	nop
 800a34a:	e7fe      	b.n	800a34a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a34c:	f001 fa9a 	bl	800b884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a350:	4b38      	ldr	r3, [pc, #224]	; (800a434 <xTaskResumeAll+0x114>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3b01      	subs	r3, #1
 800a356:	4a37      	ldr	r2, [pc, #220]	; (800a434 <xTaskResumeAll+0x114>)
 800a358:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a35a:	4b36      	ldr	r3, [pc, #216]	; (800a434 <xTaskResumeAll+0x114>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d161      	bne.n	800a426 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a362:	4b35      	ldr	r3, [pc, #212]	; (800a438 <xTaskResumeAll+0x118>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d05d      	beq.n	800a426 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a36a:	e02e      	b.n	800a3ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a36c:	4b33      	ldr	r3, [pc, #204]	; (800a43c <xTaskResumeAll+0x11c>)
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	3318      	adds	r3, #24
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fe fe55 	bl	8009028 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3304      	adds	r3, #4
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe fe50 	bl	8009028 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	2201      	movs	r2, #1
 800a38e:	409a      	lsls	r2, r3
 800a390:	4b2b      	ldr	r3, [pc, #172]	; (800a440 <xTaskResumeAll+0x120>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4313      	orrs	r3, r2
 800a396:	4a2a      	ldr	r2, [pc, #168]	; (800a440 <xTaskResumeAll+0x120>)
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39e:	4613      	mov	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4a27      	ldr	r2, [pc, #156]	; (800a444 <xTaskResumeAll+0x124>)
 800a3a8:	441a      	add	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	f7fe fddc 	bl	8008f6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ba:	4b23      	ldr	r3, [pc, #140]	; (800a448 <xTaskResumeAll+0x128>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d302      	bcc.n	800a3ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a3c4:	4b21      	ldr	r3, [pc, #132]	; (800a44c <xTaskResumeAll+0x12c>)
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3ca:	4b1c      	ldr	r3, [pc, #112]	; (800a43c <xTaskResumeAll+0x11c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1cc      	bne.n	800a36c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3d8:	f000 fb58 	bl	800aa8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a3dc:	4b1c      	ldr	r3, [pc, #112]	; (800a450 <xTaskResumeAll+0x130>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d010      	beq.n	800a40a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3e8:	f000 f846 	bl	800a478 <xTaskIncrementTick>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a3f2:	4b16      	ldr	r3, [pc, #88]	; (800a44c <xTaskResumeAll+0x12c>)
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1f1      	bne.n	800a3e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a404:	4b12      	ldr	r3, [pc, #72]	; (800a450 <xTaskResumeAll+0x130>)
 800a406:	2200      	movs	r2, #0
 800a408:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a40a:	4b10      	ldr	r3, [pc, #64]	; (800a44c <xTaskResumeAll+0x12c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d009      	beq.n	800a426 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a412:	2301      	movs	r3, #1
 800a414:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a416:	4b0f      	ldr	r3, [pc, #60]	; (800a454 <xTaskResumeAll+0x134>)
 800a418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a426:	f001 fa5d 	bl	800b8e4 <vPortExitCritical>

	return xAlreadyYielded;
 800a42a:	68bb      	ldr	r3, [r7, #8]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000e5c 	.word	0x20000e5c
 800a438:	20000e34 	.word	0x20000e34
 800a43c:	20000df4 	.word	0x20000df4
 800a440:	20000e3c 	.word	0x20000e3c
 800a444:	20000d38 	.word	0x20000d38
 800a448:	20000d34 	.word	0x20000d34
 800a44c:	20000e48 	.word	0x20000e48
 800a450:	20000e44 	.word	0x20000e44
 800a454:	e000ed04 	.word	0xe000ed04

0800a458 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a45e:	4b05      	ldr	r3, [pc, #20]	; (800a474 <xTaskGetTickCount+0x1c>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a464:	687b      	ldr	r3, [r7, #4]
}
 800a466:	4618      	mov	r0, r3
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20000e38 	.word	0x20000e38

0800a478 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a482:	4b4e      	ldr	r3, [pc, #312]	; (800a5bc <xTaskIncrementTick+0x144>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	f040 808e 	bne.w	800a5a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a48c:	4b4c      	ldr	r3, [pc, #304]	; (800a5c0 <xTaskIncrementTick+0x148>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3301      	adds	r3, #1
 800a492:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a494:	4a4a      	ldr	r2, [pc, #296]	; (800a5c0 <xTaskIncrementTick+0x148>)
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d120      	bne.n	800a4e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4a0:	4b48      	ldr	r3, [pc, #288]	; (800a5c4 <xTaskIncrementTick+0x14c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	603b      	str	r3, [r7, #0]
}
 800a4bc:	bf00      	nop
 800a4be:	e7fe      	b.n	800a4be <xTaskIncrementTick+0x46>
 800a4c0:	4b40      	ldr	r3, [pc, #256]	; (800a5c4 <xTaskIncrementTick+0x14c>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	60fb      	str	r3, [r7, #12]
 800a4c6:	4b40      	ldr	r3, [pc, #256]	; (800a5c8 <xTaskIncrementTick+0x150>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a3e      	ldr	r2, [pc, #248]	; (800a5c4 <xTaskIncrementTick+0x14c>)
 800a4cc:	6013      	str	r3, [r2, #0]
 800a4ce:	4a3e      	ldr	r2, [pc, #248]	; (800a5c8 <xTaskIncrementTick+0x150>)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	4b3d      	ldr	r3, [pc, #244]	; (800a5cc <xTaskIncrementTick+0x154>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	4a3c      	ldr	r2, [pc, #240]	; (800a5cc <xTaskIncrementTick+0x154>)
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	f000 fad5 	bl	800aa8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4e2:	4b3b      	ldr	r3, [pc, #236]	; (800a5d0 <xTaskIncrementTick+0x158>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d348      	bcc.n	800a57e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ec:	4b35      	ldr	r3, [pc, #212]	; (800a5c4 <xTaskIncrementTick+0x14c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d104      	bne.n	800a500 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4f6:	4b36      	ldr	r3, [pc, #216]	; (800a5d0 <xTaskIncrementTick+0x158>)
 800a4f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4fc:	601a      	str	r2, [r3, #0]
					break;
 800a4fe:	e03e      	b.n	800a57e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a500:	4b30      	ldr	r3, [pc, #192]	; (800a5c4 <xTaskIncrementTick+0x14c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	429a      	cmp	r2, r3
 800a516:	d203      	bcs.n	800a520 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a518:	4a2d      	ldr	r2, [pc, #180]	; (800a5d0 <xTaskIncrementTick+0x158>)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a51e:	e02e      	b.n	800a57e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	3304      	adds	r3, #4
 800a524:	4618      	mov	r0, r3
 800a526:	f7fe fd7f 	bl	8009028 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d004      	beq.n	800a53c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	3318      	adds	r3, #24
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe fd76 	bl	8009028 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	2201      	movs	r2, #1
 800a542:	409a      	lsls	r2, r3
 800a544:	4b23      	ldr	r3, [pc, #140]	; (800a5d4 <xTaskIncrementTick+0x15c>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4313      	orrs	r3, r2
 800a54a:	4a22      	ldr	r2, [pc, #136]	; (800a5d4 <xTaskIncrementTick+0x15c>)
 800a54c:	6013      	str	r3, [r2, #0]
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a552:	4613      	mov	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4a1f      	ldr	r2, [pc, #124]	; (800a5d8 <xTaskIncrementTick+0x160>)
 800a55c:	441a      	add	r2, r3
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	3304      	adds	r3, #4
 800a562:	4619      	mov	r1, r3
 800a564:	4610      	mov	r0, r2
 800a566:	f7fe fd02 	bl	8008f6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56e:	4b1b      	ldr	r3, [pc, #108]	; (800a5dc <xTaskIncrementTick+0x164>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a574:	429a      	cmp	r2, r3
 800a576:	d3b9      	bcc.n	800a4ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a578:	2301      	movs	r3, #1
 800a57a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a57c:	e7b6      	b.n	800a4ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a57e:	4b17      	ldr	r3, [pc, #92]	; (800a5dc <xTaskIncrementTick+0x164>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a584:	4914      	ldr	r1, [pc, #80]	; (800a5d8 <xTaskIncrementTick+0x160>)
 800a586:	4613      	mov	r3, r2
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	4413      	add	r3, r2
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	440b      	add	r3, r1
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d901      	bls.n	800a59a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a596:	2301      	movs	r3, #1
 800a598:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a59a:	4b11      	ldr	r3, [pc, #68]	; (800a5e0 <xTaskIncrementTick+0x168>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d007      	beq.n	800a5b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	617b      	str	r3, [r7, #20]
 800a5a6:	e004      	b.n	800a5b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a5a8:	4b0e      	ldr	r3, [pc, #56]	; (800a5e4 <xTaskIncrementTick+0x16c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	4a0d      	ldr	r2, [pc, #52]	; (800a5e4 <xTaskIncrementTick+0x16c>)
 800a5b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a5b2:	697b      	ldr	r3, [r7, #20]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3718      	adds	r7, #24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20000e5c 	.word	0x20000e5c
 800a5c0:	20000e38 	.word	0x20000e38
 800a5c4:	20000dec 	.word	0x20000dec
 800a5c8:	20000df0 	.word	0x20000df0
 800a5cc:	20000e4c 	.word	0x20000e4c
 800a5d0:	20000e54 	.word	0x20000e54
 800a5d4:	20000e3c 	.word	0x20000e3c
 800a5d8:	20000d38 	.word	0x20000d38
 800a5dc:	20000d34 	.word	0x20000d34
 800a5e0:	20000e48 	.word	0x20000e48
 800a5e4:	20000e44 	.word	0x20000e44

0800a5e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5ee:	4b29      	ldr	r3, [pc, #164]	; (800a694 <vTaskSwitchContext+0xac>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5f6:	4b28      	ldr	r3, [pc, #160]	; (800a698 <vTaskSwitchContext+0xb0>)
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5fc:	e044      	b.n	800a688 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a5fe:	4b26      	ldr	r3, [pc, #152]	; (800a698 <vTaskSwitchContext+0xb0>)
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a604:	4b25      	ldr	r3, [pc, #148]	; (800a69c <vTaskSwitchContext+0xb4>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	fab3 f383 	clz	r3, r3
 800a610:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a612:	7afb      	ldrb	r3, [r7, #11]
 800a614:	f1c3 031f 	rsb	r3, r3, #31
 800a618:	617b      	str	r3, [r7, #20]
 800a61a:	4921      	ldr	r1, [pc, #132]	; (800a6a0 <vTaskSwitchContext+0xb8>)
 800a61c:	697a      	ldr	r2, [r7, #20]
 800a61e:	4613      	mov	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	440b      	add	r3, r1
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10a      	bne.n	800a644 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	607b      	str	r3, [r7, #4]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <vTaskSwitchContext+0x5a>
 800a644:	697a      	ldr	r2, [r7, #20]
 800a646:	4613      	mov	r3, r2
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4a14      	ldr	r2, [pc, #80]	; (800a6a0 <vTaskSwitchContext+0xb8>)
 800a650:	4413      	add	r3, r2
 800a652:	613b      	str	r3, [r7, #16]
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	685a      	ldr	r2, [r3, #4]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	605a      	str	r2, [r3, #4]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	3308      	adds	r3, #8
 800a666:	429a      	cmp	r2, r3
 800a668:	d104      	bne.n	800a674 <vTaskSwitchContext+0x8c>
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	605a      	str	r2, [r3, #4]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	4a0a      	ldr	r2, [pc, #40]	; (800a6a4 <vTaskSwitchContext+0xbc>)
 800a67c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a67e:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <vTaskSwitchContext+0xbc>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	334c      	adds	r3, #76	; 0x4c
 800a684:	4a08      	ldr	r2, [pc, #32]	; (800a6a8 <vTaskSwitchContext+0xc0>)
 800a686:	6013      	str	r3, [r2, #0]
}
 800a688:	bf00      	nop
 800a68a:	371c      	adds	r7, #28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	20000e5c 	.word	0x20000e5c
 800a698:	20000e48 	.word	0x20000e48
 800a69c:	20000e3c 	.word	0x20000e3c
 800a6a0:	20000d38 	.word	0x20000d38
 800a6a4:	20000d34 	.word	0x20000d34
 800a6a8:	20000294 	.word	0x20000294

0800a6ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10a      	bne.n	800a6d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	60fb      	str	r3, [r7, #12]
}
 800a6ce:	bf00      	nop
 800a6d0:	e7fe      	b.n	800a6d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6d2:	4b07      	ldr	r3, [pc, #28]	; (800a6f0 <vTaskPlaceOnEventList+0x44>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3318      	adds	r3, #24
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7fe fc6b 	bl	8008fb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	6838      	ldr	r0, [r7, #0]
 800a6e4:	f000 fbae 	bl	800ae44 <prvAddCurrentTaskToDelayedList>
}
 800a6e8:	bf00      	nop
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20000d34 	.word	0x20000d34

0800a6f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10a      	bne.n	800a71c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	617b      	str	r3, [r7, #20]
}
 800a718:	bf00      	nop
 800a71a:	e7fe      	b.n	800a71a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a71c:	4b0a      	ldr	r3, [pc, #40]	; (800a748 <vTaskPlaceOnEventListRestricted+0x54>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3318      	adds	r3, #24
 800a722:	4619      	mov	r1, r3
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f7fe fc22 	bl	8008f6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a734:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	68b8      	ldr	r0, [r7, #8]
 800a73a:	f000 fb83 	bl	800ae44 <prvAddCurrentTaskToDelayedList>
	}
 800a73e:	bf00      	nop
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20000d34 	.word	0x20000d34

0800a74c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d10a      	bne.n	800a778 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a766:	f383 8811 	msr	BASEPRI, r3
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	60fb      	str	r3, [r7, #12]
}
 800a774:	bf00      	nop
 800a776:	e7fe      	b.n	800a776 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	3318      	adds	r3, #24
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7fe fc53 	bl	8009028 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a782:	4b1d      	ldr	r3, [pc, #116]	; (800a7f8 <xTaskRemoveFromEventList+0xac>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d11c      	bne.n	800a7c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	3304      	adds	r3, #4
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe fc4a 	bl	8009028 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a798:	2201      	movs	r2, #1
 800a79a:	409a      	lsls	r2, r3
 800a79c:	4b17      	ldr	r3, [pc, #92]	; (800a7fc <xTaskRemoveFromEventList+0xb0>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	4a16      	ldr	r2, [pc, #88]	; (800a7fc <xTaskRemoveFromEventList+0xb0>)
 800a7a4:	6013      	str	r3, [r2, #0]
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4a13      	ldr	r2, [pc, #76]	; (800a800 <xTaskRemoveFromEventList+0xb4>)
 800a7b4:	441a      	add	r2, r3
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	3304      	adds	r3, #4
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	4610      	mov	r0, r2
 800a7be:	f7fe fbd6 	bl	8008f6e <vListInsertEnd>
 800a7c2:	e005      	b.n	800a7d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	3318      	adds	r3, #24
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	480e      	ldr	r0, [pc, #56]	; (800a804 <xTaskRemoveFromEventList+0xb8>)
 800a7cc:	f7fe fbcf 	bl	8008f6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <xTaskRemoveFromEventList+0xbc>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d905      	bls.n	800a7ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7e2:	4b0a      	ldr	r3, [pc, #40]	; (800a80c <xTaskRemoveFromEventList+0xc0>)
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	e001      	b.n	800a7ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7ee:	697b      	ldr	r3, [r7, #20]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	20000e5c 	.word	0x20000e5c
 800a7fc:	20000e3c 	.word	0x20000e3c
 800a800:	20000d38 	.word	0x20000d38
 800a804:	20000df4 	.word	0x20000df4
 800a808:	20000d34 	.word	0x20000d34
 800a80c:	20000e48 	.word	0x20000e48

0800a810 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a818:	4b06      	ldr	r3, [pc, #24]	; (800a834 <vTaskInternalSetTimeOutState+0x24>)
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a820:	4b05      	ldr	r3, [pc, #20]	; (800a838 <vTaskInternalSetTimeOutState+0x28>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	605a      	str	r2, [r3, #4]
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	20000e4c 	.word	0x20000e4c
 800a838:	20000e38 	.word	0x20000e38

0800a83c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d10a      	bne.n	800a862 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	f383 8811 	msr	BASEPRI, r3
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	f3bf 8f4f 	dsb	sy
 800a85c:	613b      	str	r3, [r7, #16]
}
 800a85e:	bf00      	nop
 800a860:	e7fe      	b.n	800a860 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	60fb      	str	r3, [r7, #12]
}
 800a87a:	bf00      	nop
 800a87c:	e7fe      	b.n	800a87c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a87e:	f001 f801 	bl	800b884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a882:	4b1d      	ldr	r3, [pc, #116]	; (800a8f8 <xTaskCheckForTimeOut+0xbc>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a89a:	d102      	bne.n	800a8a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a89c:	2300      	movs	r3, #0
 800a89e:	61fb      	str	r3, [r7, #28]
 800a8a0:	e023      	b.n	800a8ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <xTaskCheckForTimeOut+0xc0>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d007      	beq.n	800a8be <xTaskCheckForTimeOut+0x82>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d302      	bcc.n	800a8be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	61fb      	str	r3, [r7, #28]
 800a8bc:	e015      	b.n	800a8ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d20b      	bcs.n	800a8e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	1ad2      	subs	r2, r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff ff9b 	bl	800a810 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	61fb      	str	r3, [r7, #28]
 800a8de:	e004      	b.n	800a8ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8ea:	f000 fffb 	bl	800b8e4 <vPortExitCritical>

	return xReturn;
 800a8ee:	69fb      	ldr	r3, [r7, #28]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3720      	adds	r7, #32
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	20000e38 	.word	0x20000e38
 800a8fc:	20000e4c 	.word	0x20000e4c

0800a900 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a900:	b480      	push	{r7}
 800a902:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a904:	4b03      	ldr	r3, [pc, #12]	; (800a914 <vTaskMissedYield+0x14>)
 800a906:	2201      	movs	r2, #1
 800a908:	601a      	str	r2, [r3, #0]
}
 800a90a:	bf00      	nop
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	20000e48 	.word	0x20000e48

0800a918 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a920:	f000 f852 	bl	800a9c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a924:	4b06      	ldr	r3, [pc, #24]	; (800a940 <prvIdleTask+0x28>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d9f9      	bls.n	800a920 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a92c:	4b05      	ldr	r3, [pc, #20]	; (800a944 <prvIdleTask+0x2c>)
 800a92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a93c:	e7f0      	b.n	800a920 <prvIdleTask+0x8>
 800a93e:	bf00      	nop
 800a940:	20000d38 	.word	0x20000d38
 800a944:	e000ed04 	.word	0xe000ed04

0800a948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a94e:	2300      	movs	r3, #0
 800a950:	607b      	str	r3, [r7, #4]
 800a952:	e00c      	b.n	800a96e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	4613      	mov	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	4a12      	ldr	r2, [pc, #72]	; (800a9a8 <prvInitialiseTaskLists+0x60>)
 800a960:	4413      	add	r3, r2
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe fad6 	bl	8008f14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3301      	adds	r3, #1
 800a96c:	607b      	str	r3, [r7, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b06      	cmp	r3, #6
 800a972:	d9ef      	bls.n	800a954 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a974:	480d      	ldr	r0, [pc, #52]	; (800a9ac <prvInitialiseTaskLists+0x64>)
 800a976:	f7fe facd 	bl	8008f14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a97a:	480d      	ldr	r0, [pc, #52]	; (800a9b0 <prvInitialiseTaskLists+0x68>)
 800a97c:	f7fe faca 	bl	8008f14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a980:	480c      	ldr	r0, [pc, #48]	; (800a9b4 <prvInitialiseTaskLists+0x6c>)
 800a982:	f7fe fac7 	bl	8008f14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a986:	480c      	ldr	r0, [pc, #48]	; (800a9b8 <prvInitialiseTaskLists+0x70>)
 800a988:	f7fe fac4 	bl	8008f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a98c:	480b      	ldr	r0, [pc, #44]	; (800a9bc <prvInitialiseTaskLists+0x74>)
 800a98e:	f7fe fac1 	bl	8008f14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a992:	4b0b      	ldr	r3, [pc, #44]	; (800a9c0 <prvInitialiseTaskLists+0x78>)
 800a994:	4a05      	ldr	r2, [pc, #20]	; (800a9ac <prvInitialiseTaskLists+0x64>)
 800a996:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a998:	4b0a      	ldr	r3, [pc, #40]	; (800a9c4 <prvInitialiseTaskLists+0x7c>)
 800a99a:	4a05      	ldr	r2, [pc, #20]	; (800a9b0 <prvInitialiseTaskLists+0x68>)
 800a99c:	601a      	str	r2, [r3, #0]
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20000d38 	.word	0x20000d38
 800a9ac:	20000dc4 	.word	0x20000dc4
 800a9b0:	20000dd8 	.word	0x20000dd8
 800a9b4:	20000df4 	.word	0x20000df4
 800a9b8:	20000e08 	.word	0x20000e08
 800a9bc:	20000e20 	.word	0x20000e20
 800a9c0:	20000dec 	.word	0x20000dec
 800a9c4:	20000df0 	.word	0x20000df0

0800a9c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9ce:	e019      	b.n	800aa04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9d0:	f000 ff58 	bl	800b884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9d4:	4b10      	ldr	r3, [pc, #64]	; (800aa18 <prvCheckTasksWaitingTermination+0x50>)
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3304      	adds	r3, #4
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fe fb21 	bl	8009028 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9e6:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <prvCheckTasksWaitingTermination+0x54>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	4a0b      	ldr	r2, [pc, #44]	; (800aa1c <prvCheckTasksWaitingTermination+0x54>)
 800a9ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9f0:	4b0b      	ldr	r3, [pc, #44]	; (800aa20 <prvCheckTasksWaitingTermination+0x58>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	4a0a      	ldr	r2, [pc, #40]	; (800aa20 <prvCheckTasksWaitingTermination+0x58>)
 800a9f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9fa:	f000 ff73 	bl	800b8e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f810 	bl	800aa24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa04:	4b06      	ldr	r3, [pc, #24]	; (800aa20 <prvCheckTasksWaitingTermination+0x58>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1e1      	bne.n	800a9d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa0c:	bf00      	nop
 800aa0e:	bf00      	nop
 800aa10:	3708      	adds	r7, #8
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	20000e08 	.word	0x20000e08
 800aa1c:	20000e34 	.word	0x20000e34
 800aa20:	20000e1c 	.word	0x20000e1c

0800aa24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	334c      	adds	r3, #76	; 0x4c
 800aa30:	4618      	mov	r0, r3
 800aa32:	f001 ff0f 	bl	800c854 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d108      	bne.n	800aa52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa44:	4618      	mov	r0, r3
 800aa46:	f001 f90b 	bl	800bc60 <vPortFree>
				vPortFree( pxTCB );
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f001 f908 	bl	800bc60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa50:	e018      	b.n	800aa84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d103      	bne.n	800aa64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 f8ff 	bl	800bc60 <vPortFree>
	}
 800aa62:	e00f      	b.n	800aa84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d00a      	beq.n	800aa84 <prvDeleteTCB+0x60>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	60fb      	str	r3, [r7, #12]
}
 800aa80:	bf00      	nop
 800aa82:	e7fe      	b.n	800aa82 <prvDeleteTCB+0x5e>
	}
 800aa84:	bf00      	nop
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa92:	4b0c      	ldr	r3, [pc, #48]	; (800aac4 <prvResetNextTaskUnblockTime+0x38>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d104      	bne.n	800aaa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	; (800aac8 <prvResetNextTaskUnblockTime+0x3c>)
 800aa9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aaa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aaa4:	e008      	b.n	800aab8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaa6:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <prvResetNextTaskUnblockTime+0x38>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	4a04      	ldr	r2, [pc, #16]	; (800aac8 <prvResetNextTaskUnblockTime+0x3c>)
 800aab6:	6013      	str	r3, [r2, #0]
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	20000dec 	.word	0x20000dec
 800aac8:	20000e54 	.word	0x20000e54

0800aacc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aad2:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <xTaskGetSchedulerState+0x34>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d102      	bne.n	800aae0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aada:	2301      	movs	r3, #1
 800aadc:	607b      	str	r3, [r7, #4]
 800aade:	e008      	b.n	800aaf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aae0:	4b08      	ldr	r3, [pc, #32]	; (800ab04 <xTaskGetSchedulerState+0x38>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aae8:	2302      	movs	r3, #2
 800aaea:	607b      	str	r3, [r7, #4]
 800aaec:	e001      	b.n	800aaf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aaf2:	687b      	ldr	r3, [r7, #4]
	}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr
 800ab00:	20000e40 	.word	0x20000e40
 800ab04:	20000e5c 	.word	0x20000e5c

0800ab08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab14:	2300      	movs	r3, #0
 800ab16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d05e      	beq.n	800abdc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab22:	4b31      	ldr	r3, [pc, #196]	; (800abe8 <xTaskPriorityInherit+0xe0>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d24e      	bcs.n	800abca <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	db06      	blt.n	800ab42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab34:	4b2c      	ldr	r3, [pc, #176]	; (800abe8 <xTaskPriorityInherit+0xe0>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3a:	f1c3 0207 	rsb	r2, r3, #7
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	6959      	ldr	r1, [r3, #20]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4a26      	ldr	r2, [pc, #152]	; (800abec <xTaskPriorityInherit+0xe4>)
 800ab54:	4413      	add	r3, r2
 800ab56:	4299      	cmp	r1, r3
 800ab58:	d12f      	bne.n	800abba <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fa62 	bl	8009028 <uxListRemove>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10a      	bne.n	800ab80 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6e:	2201      	movs	r2, #1
 800ab70:	fa02 f303 	lsl.w	r3, r2, r3
 800ab74:	43da      	mvns	r2, r3
 800ab76:	4b1e      	ldr	r3, [pc, #120]	; (800abf0 <xTaskPriorityInherit+0xe8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	4a1c      	ldr	r2, [pc, #112]	; (800abf0 <xTaskPriorityInherit+0xe8>)
 800ab7e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab80:	4b19      	ldr	r3, [pc, #100]	; (800abe8 <xTaskPriorityInherit+0xe0>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8e:	2201      	movs	r2, #1
 800ab90:	409a      	lsls	r2, r3
 800ab92:	4b17      	ldr	r3, [pc, #92]	; (800abf0 <xTaskPriorityInherit+0xe8>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	4a15      	ldr	r2, [pc, #84]	; (800abf0 <xTaskPriorityInherit+0xe8>)
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba0:	4613      	mov	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4a10      	ldr	r2, [pc, #64]	; (800abec <xTaskPriorityInherit+0xe4>)
 800abaa:	441a      	add	r2, r3
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	3304      	adds	r3, #4
 800abb0:	4619      	mov	r1, r3
 800abb2:	4610      	mov	r0, r2
 800abb4:	f7fe f9db 	bl	8008f6e <vListInsertEnd>
 800abb8:	e004      	b.n	800abc4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abba:	4b0b      	ldr	r3, [pc, #44]	; (800abe8 <xTaskPriorityInherit+0xe0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abc4:	2301      	movs	r3, #1
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	e008      	b.n	800abdc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abce:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <xTaskPriorityInherit+0xe0>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d201      	bcs.n	800abdc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800abd8:	2301      	movs	r3, #1
 800abda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abdc:	68fb      	ldr	r3, [r7, #12]
	}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20000d34 	.word	0x20000d34
 800abec:	20000d38 	.word	0x20000d38
 800abf0:	20000e3c 	.word	0x20000e3c

0800abf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac00:	2300      	movs	r3, #0
 800ac02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d06e      	beq.n	800ace8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac0a:	4b3a      	ldr	r3, [pc, #232]	; (800acf4 <xTaskPriorityDisinherit+0x100>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d00a      	beq.n	800ac2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	60fb      	str	r3, [r7, #12]
}
 800ac26:	bf00      	nop
 800ac28:	e7fe      	b.n	800ac28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	60bb      	str	r3, [r7, #8]
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac4c:	1e5a      	subs	r2, r3, #1
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d044      	beq.n	800ace8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d140      	bne.n	800ace8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe f9dc 	bl	8009028 <uxListRemove>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d115      	bne.n	800aca2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac7a:	491f      	ldr	r1, [pc, #124]	; (800acf8 <xTaskPriorityDisinherit+0x104>)
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4413      	add	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	440b      	add	r3, r1
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <xTaskPriorityDisinherit+0xae>
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac90:	2201      	movs	r2, #1
 800ac92:	fa02 f303 	lsl.w	r3, r2, r3
 800ac96:	43da      	mvns	r2, r3
 800ac98:	4b18      	ldr	r3, [pc, #96]	; (800acfc <xTaskPriorityDisinherit+0x108>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	4a17      	ldr	r2, [pc, #92]	; (800acfc <xTaskPriorityDisinherit+0x108>)
 800aca0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acae:	f1c3 0207 	rsb	r2, r3, #7
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acba:	2201      	movs	r2, #1
 800acbc:	409a      	lsls	r2, r3
 800acbe:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <xTaskPriorityDisinherit+0x108>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	4a0d      	ldr	r2, [pc, #52]	; (800acfc <xTaskPriorityDisinherit+0x108>)
 800acc6:	6013      	str	r3, [r2, #0]
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800accc:	4613      	mov	r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4a08      	ldr	r2, [pc, #32]	; (800acf8 <xTaskPriorityDisinherit+0x104>)
 800acd6:	441a      	add	r2, r3
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	3304      	adds	r3, #4
 800acdc:	4619      	mov	r1, r3
 800acde:	4610      	mov	r0, r2
 800ace0:	f7fe f945 	bl	8008f6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ace4:	2301      	movs	r3, #1
 800ace6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ace8:	697b      	ldr	r3, [r7, #20]
	}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	20000d34 	.word	0x20000d34
 800acf8:	20000d38 	.word	0x20000d38
 800acfc:	20000e3c 	.word	0x20000e3c

0800ad00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b088      	sub	sp, #32
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d077      	beq.n	800ae08 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10a      	bne.n	800ad36 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	60fb      	str	r3, [r7, #12]
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad3a:	683a      	ldr	r2, [r7, #0]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d902      	bls.n	800ad46 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	61fb      	str	r3, [r7, #28]
 800ad44:	e002      	b.n	800ad4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad4a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad50:	69fa      	ldr	r2, [r7, #28]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d058      	beq.n	800ae08 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d153      	bne.n	800ae08 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad60:	4b2b      	ldr	r3, [pc, #172]	; (800ae10 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	69ba      	ldr	r2, [r7, #24]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d10a      	bne.n	800ad80 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	60bb      	str	r3, [r7, #8]
}
 800ad7c:	bf00      	nop
 800ad7e:	e7fe      	b.n	800ad7e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	69fa      	ldr	r2, [r7, #28]
 800ad8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	db04      	blt.n	800ad9e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	f1c3 0207 	rsb	r2, r3, #7
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	6959      	ldr	r1, [r3, #20]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	4613      	mov	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4a19      	ldr	r2, [pc, #100]	; (800ae14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800adae:	4413      	add	r3, r2
 800adb0:	4299      	cmp	r1, r3
 800adb2:	d129      	bne.n	800ae08 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	3304      	adds	r3, #4
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fe f935 	bl	8009028 <uxListRemove>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc8:	2201      	movs	r2, #1
 800adca:	fa02 f303 	lsl.w	r3, r2, r3
 800adce:	43da      	mvns	r2, r3
 800add0:	4b11      	ldr	r3, [pc, #68]	; (800ae18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4013      	ands	r3, r2
 800add6:	4a10      	ldr	r2, [pc, #64]	; (800ae18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800add8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adde:	2201      	movs	r2, #1
 800ade0:	409a      	lsls	r2, r3
 800ade2:	4b0d      	ldr	r3, [pc, #52]	; (800ae18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	4a0b      	ldr	r2, [pc, #44]	; (800ae18 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4a06      	ldr	r2, [pc, #24]	; (800ae14 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800adfa:	441a      	add	r2, r3
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f7fe f8b3 	bl	8008f6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae08:	bf00      	nop
 800ae0a:	3720      	adds	r7, #32
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	20000d34 	.word	0x20000d34
 800ae14:	20000d38 	.word	0x20000d38
 800ae18:	20000e3c 	.word	0x20000e3c

0800ae1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ae1c:	b480      	push	{r7}
 800ae1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ae20:	4b07      	ldr	r3, [pc, #28]	; (800ae40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d004      	beq.n	800ae32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ae28:	4b05      	ldr	r3, [pc, #20]	; (800ae40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae2e:	3201      	adds	r2, #1
 800ae30:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ae32:	4b03      	ldr	r3, [pc, #12]	; (800ae40 <pvTaskIncrementMutexHeldCount+0x24>)
 800ae34:	681b      	ldr	r3, [r3, #0]
	}
 800ae36:	4618      	mov	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	20000d34 	.word	0x20000d34

0800ae44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ae4e:	4b29      	ldr	r3, [pc, #164]	; (800aef4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae54:	4b28      	ldr	r3, [pc, #160]	; (800aef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	3304      	adds	r3, #4
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe f8e4 	bl	8009028 <uxListRemove>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10b      	bne.n	800ae7e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ae66:	4b24      	ldr	r3, [pc, #144]	; (800aef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae72:	43da      	mvns	r2, r3
 800ae74:	4b21      	ldr	r3, [pc, #132]	; (800aefc <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4013      	ands	r3, r2
 800ae7a:	4a20      	ldr	r2, [pc, #128]	; (800aefc <prvAddCurrentTaskToDelayedList+0xb8>)
 800ae7c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae84:	d10a      	bne.n	800ae9c <prvAddCurrentTaskToDelayedList+0x58>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d007      	beq.n	800ae9c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae8c:	4b1a      	ldr	r3, [pc, #104]	; (800aef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3304      	adds	r3, #4
 800ae92:	4619      	mov	r1, r3
 800ae94:	481a      	ldr	r0, [pc, #104]	; (800af00 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ae96:	f7fe f86a 	bl	8008f6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae9a:	e026      	b.n	800aeea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4413      	add	r3, r2
 800aea2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aea4:	4b14      	ldr	r3, [pc, #80]	; (800aef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d209      	bcs.n	800aec8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aeb4:	4b13      	ldr	r3, [pc, #76]	; (800af04 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	4b0f      	ldr	r3, [pc, #60]	; (800aef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4619      	mov	r1, r3
 800aec0:	4610      	mov	r0, r2
 800aec2:	f7fe f878 	bl	8008fb6 <vListInsert>
}
 800aec6:	e010      	b.n	800aeea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aec8:	4b0f      	ldr	r3, [pc, #60]	; (800af08 <prvAddCurrentTaskToDelayedList+0xc4>)
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	4b0a      	ldr	r3, [pc, #40]	; (800aef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3304      	adds	r3, #4
 800aed2:	4619      	mov	r1, r3
 800aed4:	4610      	mov	r0, r2
 800aed6:	f7fe f86e 	bl	8008fb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aeda:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <prvAddCurrentTaskToDelayedList+0xc8>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d202      	bcs.n	800aeea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aee4:	4a09      	ldr	r2, [pc, #36]	; (800af0c <prvAddCurrentTaskToDelayedList+0xc8>)
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	6013      	str	r3, [r2, #0]
}
 800aeea:	bf00      	nop
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	20000e38 	.word	0x20000e38
 800aef8:	20000d34 	.word	0x20000d34
 800aefc:	20000e3c 	.word	0x20000e3c
 800af00:	20000e20 	.word	0x20000e20
 800af04:	20000df0 	.word	0x20000df0
 800af08:	20000dec 	.word	0x20000dec
 800af0c:	20000e54 	.word	0x20000e54

0800af10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b08a      	sub	sp, #40	; 0x28
 800af14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800af16:	2300      	movs	r3, #0
 800af18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800af1a:	f000 fb47 	bl	800b5ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800af1e:	4b1c      	ldr	r3, [pc, #112]	; (800af90 <xTimerCreateTimerTask+0x80>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d021      	beq.n	800af6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800af26:	2300      	movs	r3, #0
 800af28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800af2e:	1d3a      	adds	r2, r7, #4
 800af30:	f107 0108 	add.w	r1, r7, #8
 800af34:	f107 030c 	add.w	r3, r7, #12
 800af38:	4618      	mov	r0, r3
 800af3a:	f7f5 fb01 	bl	8000540 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	9202      	str	r2, [sp, #8]
 800af46:	9301      	str	r3, [sp, #4]
 800af48:	2302      	movs	r3, #2
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	2300      	movs	r3, #0
 800af4e:	460a      	mov	r2, r1
 800af50:	4910      	ldr	r1, [pc, #64]	; (800af94 <xTimerCreateTimerTask+0x84>)
 800af52:	4811      	ldr	r0, [pc, #68]	; (800af98 <xTimerCreateTimerTask+0x88>)
 800af54:	f7fe ff0a 	bl	8009d6c <xTaskCreateStatic>
 800af58:	4603      	mov	r3, r0
 800af5a:	4a10      	ldr	r2, [pc, #64]	; (800af9c <xTimerCreateTimerTask+0x8c>)
 800af5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800af5e:	4b0f      	ldr	r3, [pc, #60]	; (800af9c <xTimerCreateTimerTask+0x8c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800af66:	2301      	movs	r3, #1
 800af68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10a      	bne.n	800af86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	613b      	str	r3, [r7, #16]
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800af86:	697b      	ldr	r3, [r7, #20]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3718      	adds	r7, #24
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20000e90 	.word	0x20000e90
 800af94:	0800c9b0 	.word	0x0800c9b0
 800af98:	0800b18d 	.word	0x0800b18d
 800af9c:	20000e94 	.word	0x20000e94

0800afa0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b088      	sub	sp, #32
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800afae:	2028      	movs	r0, #40	; 0x28
 800afb0:	f000 fd8a 	bl	800bac8 <pvPortMalloc>
 800afb4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00d      	beq.n	800afd8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	68b9      	ldr	r1, [r7, #8]
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f000 f805 	bl	800afe2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800afd8:	697b      	ldr	r3, [r7, #20]
	}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b086      	sub	sp, #24
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	60b9      	str	r1, [r7, #8]
 800afec:	607a      	str	r2, [r7, #4]
 800afee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10a      	bne.n	800b00c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	617b      	str	r3, [r7, #20]
}
 800b008:	bf00      	nop
 800b00a:	e7fe      	b.n	800b00a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d01e      	beq.n	800b050 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b012:	f000 facb 	bl	800b5ac <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	6a3a      	ldr	r2, [r7, #32]
 800b02c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b030:	3304      	adds	r3, #4
 800b032:	4618      	mov	r0, r3
 800b034:	f7fd ff8e 	bl	8008f54 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d008      	beq.n	800b050 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b044:	f043 0304 	orr.w	r3, r3, #4
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b050:	bf00      	nop
 800b052:	3718      	adds	r7, #24
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08a      	sub	sp, #40	; 0x28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b066:	2300      	movs	r3, #0
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10a      	bne.n	800b086 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	623b      	str	r3, [r7, #32]
}
 800b082:	bf00      	nop
 800b084:	e7fe      	b.n	800b084 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b086:	4b1a      	ldr	r3, [pc, #104]	; (800b0f0 <xTimerGenericCommand+0x98>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d02a      	beq.n	800b0e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	2b05      	cmp	r3, #5
 800b09e:	dc18      	bgt.n	800b0d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b0a0:	f7ff fd14 	bl	800aacc <xTaskGetSchedulerState>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d109      	bne.n	800b0be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b0aa:	4b11      	ldr	r3, [pc, #68]	; (800b0f0 <xTimerGenericCommand+0x98>)
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	f107 0114 	add.w	r1, r7, #20
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0b6:	f7fe f94d 	bl	8009354 <xQueueGenericSend>
 800b0ba:	6278      	str	r0, [r7, #36]	; 0x24
 800b0bc:	e012      	b.n	800b0e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b0be:	4b0c      	ldr	r3, [pc, #48]	; (800b0f0 <xTimerGenericCommand+0x98>)
 800b0c0:	6818      	ldr	r0, [r3, #0]
 800b0c2:	f107 0114 	add.w	r1, r7, #20
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f7fe f943 	bl	8009354 <xQueueGenericSend>
 800b0ce:	6278      	str	r0, [r7, #36]	; 0x24
 800b0d0:	e008      	b.n	800b0e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0d2:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <xTimerGenericCommand+0x98>)
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	f107 0114 	add.w	r1, r7, #20
 800b0da:	2300      	movs	r3, #0
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	f7fe fa37 	bl	8009550 <xQueueGenericSendFromISR>
 800b0e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3728      	adds	r7, #40	; 0x28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20000e90 	.word	0x20000e90

0800b0f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af02      	add	r7, sp, #8
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0fe:	4b22      	ldr	r3, [pc, #136]	; (800b188 <prvProcessExpiredTimer+0x94>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	3304      	adds	r3, #4
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7fd ff8b 	bl	8009028 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d022      	beq.n	800b166 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	699a      	ldr	r2, [r3, #24]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	18d1      	adds	r1, r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	6978      	ldr	r0, [r7, #20]
 800b12e:	f000 f8d1 	bl	800b2d4 <prvInsertTimerInActiveList>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d01f      	beq.n	800b178 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b138:	2300      	movs	r3, #0
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	2300      	movs	r3, #0
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	2100      	movs	r1, #0
 800b142:	6978      	ldr	r0, [r7, #20]
 800b144:	f7ff ff88 	bl	800b058 <xTimerGenericCommand>
 800b148:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d113      	bne.n	800b178 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	60fb      	str	r3, [r7, #12]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b16c:	f023 0301 	bic.w	r3, r3, #1
 800b170:	b2da      	uxtb	r2, r3
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	6a1b      	ldr	r3, [r3, #32]
 800b17c:	6978      	ldr	r0, [r7, #20]
 800b17e:	4798      	blx	r3
}
 800b180:	bf00      	nop
 800b182:	3718      	adds	r7, #24
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	20000e88 	.word	0x20000e88

0800b18c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b194:	f107 0308 	add.w	r3, r7, #8
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 f857 	bl	800b24c <prvGetNextExpireTime>
 800b19e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f000 f803 	bl	800b1b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b1aa:	f000 f8d5 	bl	800b358 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1ae:	e7f1      	b.n	800b194 <prvTimerTask+0x8>

0800b1b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b1ba:	f7ff f8a3 	bl	800a304 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1be:	f107 0308 	add.w	r3, r7, #8
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f000 f866 	bl	800b294 <prvSampleTimeNow>
 800b1c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d130      	bne.n	800b232 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10a      	bne.n	800b1ec <prvProcessTimerOrBlockTask+0x3c>
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d806      	bhi.n	800b1ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b1de:	f7ff f89f 	bl	800a320 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b1e2:	68f9      	ldr	r1, [r7, #12]
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7ff ff85 	bl	800b0f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b1ea:	e024      	b.n	800b236 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d008      	beq.n	800b204 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b1f2:	4b13      	ldr	r3, [pc, #76]	; (800b240 <prvProcessTimerOrBlockTask+0x90>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <prvProcessTimerOrBlockTask+0x50>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e000      	b.n	800b202 <prvProcessTimerOrBlockTask+0x52>
 800b200:	2300      	movs	r3, #0
 800b202:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b204:	4b0f      	ldr	r3, [pc, #60]	; (800b244 <prvProcessTimerOrBlockTask+0x94>)
 800b206:	6818      	ldr	r0, [r3, #0]
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	4619      	mov	r1, r3
 800b212:	f7fe fd77 	bl	8009d04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b216:	f7ff f883 	bl	800a320 <xTaskResumeAll>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d10a      	bne.n	800b236 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b220:	4b09      	ldr	r3, [pc, #36]	; (800b248 <prvProcessTimerOrBlockTask+0x98>)
 800b222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	f3bf 8f6f 	isb	sy
}
 800b230:	e001      	b.n	800b236 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b232:	f7ff f875 	bl	800a320 <xTaskResumeAll>
}
 800b236:	bf00      	nop
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20000e8c 	.word	0x20000e8c
 800b244:	20000e90 	.word	0x20000e90
 800b248:	e000ed04 	.word	0xe000ed04

0800b24c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b254:	4b0e      	ldr	r3, [pc, #56]	; (800b290 <prvGetNextExpireTime+0x44>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d101      	bne.n	800b262 <prvGetNextExpireTime+0x16>
 800b25e:	2201      	movs	r2, #1
 800b260:	e000      	b.n	800b264 <prvGetNextExpireTime+0x18>
 800b262:	2200      	movs	r2, #0
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d105      	bne.n	800b27c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b270:	4b07      	ldr	r3, [pc, #28]	; (800b290 <prvGetNextExpireTime+0x44>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	60fb      	str	r3, [r7, #12]
 800b27a:	e001      	b.n	800b280 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b27c:	2300      	movs	r3, #0
 800b27e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b280:	68fb      	ldr	r3, [r7, #12]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3714      	adds	r7, #20
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	20000e88 	.word	0x20000e88

0800b294 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b29c:	f7ff f8dc 	bl	800a458 <xTaskGetTickCount>
 800b2a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b2a2:	4b0b      	ldr	r3, [pc, #44]	; (800b2d0 <prvSampleTimeNow+0x3c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d205      	bcs.n	800b2b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b2ac:	f000 f91a 	bl	800b4e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	e002      	b.n	800b2be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b2be:	4a04      	ldr	r2, [pc, #16]	; (800b2d0 <prvSampleTimeNow+0x3c>)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000e98 	.word	0x20000e98

0800b2d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d812      	bhi.n	800b320 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	1ad2      	subs	r2, r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	429a      	cmp	r2, r3
 800b306:	d302      	bcc.n	800b30e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b308:	2301      	movs	r3, #1
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	e01b      	b.n	800b346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b30e:	4b10      	ldr	r3, [pc, #64]	; (800b350 <prvInsertTimerInActiveList+0x7c>)
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3304      	adds	r3, #4
 800b316:	4619      	mov	r1, r3
 800b318:	4610      	mov	r0, r2
 800b31a:	f7fd fe4c 	bl	8008fb6 <vListInsert>
 800b31e:	e012      	b.n	800b346 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	429a      	cmp	r2, r3
 800b326:	d206      	bcs.n	800b336 <prvInsertTimerInActiveList+0x62>
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d302      	bcc.n	800b336 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b330:	2301      	movs	r3, #1
 800b332:	617b      	str	r3, [r7, #20]
 800b334:	e007      	b.n	800b346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b336:	4b07      	ldr	r3, [pc, #28]	; (800b354 <prvInsertTimerInActiveList+0x80>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3304      	adds	r3, #4
 800b33e:	4619      	mov	r1, r3
 800b340:	4610      	mov	r0, r2
 800b342:	f7fd fe38 	bl	8008fb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b346:	697b      	ldr	r3, [r7, #20]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20000e8c 	.word	0x20000e8c
 800b354:	20000e88 	.word	0x20000e88

0800b358 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08c      	sub	sp, #48	; 0x30
 800b35c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b35e:	e0ae      	b.n	800b4be <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	2b00      	cmp	r3, #0
 800b364:	f2c0 80aa 	blt.w	800b4bc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d004      	beq.n	800b37e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	3304      	adds	r3, #4
 800b378:	4618      	mov	r0, r3
 800b37a:	f7fd fe55 	bl	8009028 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b37e:	1d3b      	adds	r3, r7, #4
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff ff87 	bl	800b294 <prvSampleTimeNow>
 800b386:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2b09      	cmp	r3, #9
 800b38c:	f200 8097 	bhi.w	800b4be <prvProcessReceivedCommands+0x166>
 800b390:	a201      	add	r2, pc, #4	; (adr r2, 800b398 <prvProcessReceivedCommands+0x40>)
 800b392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b396:	bf00      	nop
 800b398:	0800b3c1 	.word	0x0800b3c1
 800b39c:	0800b3c1 	.word	0x0800b3c1
 800b3a0:	0800b3c1 	.word	0x0800b3c1
 800b3a4:	0800b435 	.word	0x0800b435
 800b3a8:	0800b449 	.word	0x0800b449
 800b3ac:	0800b493 	.word	0x0800b493
 800b3b0:	0800b3c1 	.word	0x0800b3c1
 800b3b4:	0800b3c1 	.word	0x0800b3c1
 800b3b8:	0800b435 	.word	0x0800b435
 800b3bc:	0800b449 	.word	0x0800b449
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b3c6:	f043 0301 	orr.w	r3, r3, #1
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	18d1      	adds	r1, r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6a3a      	ldr	r2, [r7, #32]
 800b3de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3e0:	f7ff ff78 	bl	800b2d4 <prvInsertTimerInActiveList>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d069      	beq.n	800b4be <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	6a1b      	ldr	r3, [r3, #32]
 800b3ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b3f8:	f003 0304 	and.w	r3, r3, #4
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d05e      	beq.n	800b4be <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	441a      	add	r2, r3
 800b408:	2300      	movs	r3, #0
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	2300      	movs	r3, #0
 800b40e:	2100      	movs	r1, #0
 800b410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b412:	f7ff fe21 	bl	800b058 <xTimerGenericCommand>
 800b416:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d14f      	bne.n	800b4be <prvProcessReceivedCommands+0x166>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	61bb      	str	r3, [r7, #24]
}
 800b430:	bf00      	nop
 800b432:	e7fe      	b.n	800b432 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b43a:	f023 0301 	bic.w	r3, r3, #1
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800b446:	e03a      	b.n	800b4be <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b44e:	f043 0301 	orr.w	r3, r3, #1
 800b452:	b2da      	uxtb	r2, r3
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d10a      	bne.n	800b47e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	617b      	str	r3, [r7, #20]
}
 800b47a:	bf00      	nop
 800b47c:	e7fe      	b.n	800b47c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b480:	699a      	ldr	r2, [r3, #24]
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	18d1      	adds	r1, r2, r3
 800b486:	6a3b      	ldr	r3, [r7, #32]
 800b488:	6a3a      	ldr	r2, [r7, #32]
 800b48a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b48c:	f7ff ff22 	bl	800b2d4 <prvInsertTimerInActiveList>
					break;
 800b490:	e015      	b.n	800b4be <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b498:	f003 0302 	and.w	r3, r3, #2
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d103      	bne.n	800b4a8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800b4a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4a2:	f000 fbdd 	bl	800bc60 <vPortFree>
 800b4a6:	e00a      	b.n	800b4be <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4ae:	f023 0301 	bic.w	r3, r3, #1
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b4ba:	e000      	b.n	800b4be <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b4bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4be:	4b08      	ldr	r3, [pc, #32]	; (800b4e0 <prvProcessReceivedCommands+0x188>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f107 0108 	add.w	r1, r7, #8
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fe f8dd 	bl	8009688 <xQueueReceive>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f47f af45 	bne.w	800b360 <prvProcessReceivedCommands+0x8>
	}
}
 800b4d6:	bf00      	nop
 800b4d8:	bf00      	nop
 800b4da:	3728      	adds	r7, #40	; 0x28
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20000e90 	.word	0x20000e90

0800b4e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b088      	sub	sp, #32
 800b4e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b4ea:	e048      	b.n	800b57e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4ec:	4b2d      	ldr	r3, [pc, #180]	; (800b5a4 <prvSwitchTimerLists+0xc0>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4f6:	4b2b      	ldr	r3, [pc, #172]	; (800b5a4 <prvSwitchTimerLists+0xc0>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	3304      	adds	r3, #4
 800b504:	4618      	mov	r0, r3
 800b506:	f7fd fd8f 	bl	8009028 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6a1b      	ldr	r3, [r3, #32]
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b518:	f003 0304 	and.w	r3, r3, #4
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d02e      	beq.n	800b57e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	699b      	ldr	r3, [r3, #24]
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	4413      	add	r3, r2
 800b528:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d90e      	bls.n	800b550 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b53e:	4b19      	ldr	r3, [pc, #100]	; (800b5a4 <prvSwitchTimerLists+0xc0>)
 800b540:	681a      	ldr	r2, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3304      	adds	r3, #4
 800b546:	4619      	mov	r1, r3
 800b548:	4610      	mov	r0, r2
 800b54a:	f7fd fd34 	bl	8008fb6 <vListInsert>
 800b54e:	e016      	b.n	800b57e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b550:	2300      	movs	r3, #0
 800b552:	9300      	str	r3, [sp, #0]
 800b554:	2300      	movs	r3, #0
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	2100      	movs	r1, #0
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f7ff fd7c 	bl	800b058 <xTimerGenericCommand>
 800b560:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d10a      	bne.n	800b57e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	603b      	str	r3, [r7, #0]
}
 800b57a:	bf00      	nop
 800b57c:	e7fe      	b.n	800b57c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b57e:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <prvSwitchTimerLists+0xc0>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1b1      	bne.n	800b4ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b588:	4b06      	ldr	r3, [pc, #24]	; (800b5a4 <prvSwitchTimerLists+0xc0>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b58e:	4b06      	ldr	r3, [pc, #24]	; (800b5a8 <prvSwitchTimerLists+0xc4>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a04      	ldr	r2, [pc, #16]	; (800b5a4 <prvSwitchTimerLists+0xc0>)
 800b594:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b596:	4a04      	ldr	r2, [pc, #16]	; (800b5a8 <prvSwitchTimerLists+0xc4>)
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	6013      	str	r3, [r2, #0]
}
 800b59c:	bf00      	nop
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	20000e88 	.word	0x20000e88
 800b5a8:	20000e8c 	.word	0x20000e8c

0800b5ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b5b2:	f000 f967 	bl	800b884 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b5b6:	4b15      	ldr	r3, [pc, #84]	; (800b60c <prvCheckForValidListAndQueue+0x60>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d120      	bne.n	800b600 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b5be:	4814      	ldr	r0, [pc, #80]	; (800b610 <prvCheckForValidListAndQueue+0x64>)
 800b5c0:	f7fd fca8 	bl	8008f14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b5c4:	4813      	ldr	r0, [pc, #76]	; (800b614 <prvCheckForValidListAndQueue+0x68>)
 800b5c6:	f7fd fca5 	bl	8008f14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b5ca:	4b13      	ldr	r3, [pc, #76]	; (800b618 <prvCheckForValidListAndQueue+0x6c>)
 800b5cc:	4a10      	ldr	r2, [pc, #64]	; (800b610 <prvCheckForValidListAndQueue+0x64>)
 800b5ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b5d0:	4b12      	ldr	r3, [pc, #72]	; (800b61c <prvCheckForValidListAndQueue+0x70>)
 800b5d2:	4a10      	ldr	r2, [pc, #64]	; (800b614 <prvCheckForValidListAndQueue+0x68>)
 800b5d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	4b11      	ldr	r3, [pc, #68]	; (800b620 <prvCheckForValidListAndQueue+0x74>)
 800b5dc:	4a11      	ldr	r2, [pc, #68]	; (800b624 <prvCheckForValidListAndQueue+0x78>)
 800b5de:	210c      	movs	r1, #12
 800b5e0:	200a      	movs	r0, #10
 800b5e2:	f7fd fdb3 	bl	800914c <xQueueGenericCreateStatic>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	4a08      	ldr	r2, [pc, #32]	; (800b60c <prvCheckForValidListAndQueue+0x60>)
 800b5ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b5ec:	4b07      	ldr	r3, [pc, #28]	; (800b60c <prvCheckForValidListAndQueue+0x60>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d005      	beq.n	800b600 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b5f4:	4b05      	ldr	r3, [pc, #20]	; (800b60c <prvCheckForValidListAndQueue+0x60>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	490b      	ldr	r1, [pc, #44]	; (800b628 <prvCheckForValidListAndQueue+0x7c>)
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe fb58 	bl	8009cb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b600:	f000 f970 	bl	800b8e4 <vPortExitCritical>
}
 800b604:	bf00      	nop
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	20000e90 	.word	0x20000e90
 800b610:	20000e60 	.word	0x20000e60
 800b614:	20000e74 	.word	0x20000e74
 800b618:	20000e88 	.word	0x20000e88
 800b61c:	20000e8c 	.word	0x20000e8c
 800b620:	20000f14 	.word	0x20000f14
 800b624:	20000e9c 	.word	0x20000e9c
 800b628:	0800c9b8 	.word	0x0800c9b8

0800b62c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	3b04      	subs	r3, #4
 800b63c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3b04      	subs	r3, #4
 800b64a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f023 0201 	bic.w	r2, r3, #1
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	3b04      	subs	r3, #4
 800b65a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b65c:	4a0c      	ldr	r2, [pc, #48]	; (800b690 <pxPortInitialiseStack+0x64>)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	3b14      	subs	r3, #20
 800b666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3b04      	subs	r3, #4
 800b672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f06f 0202 	mvn.w	r2, #2
 800b67a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3b20      	subs	r3, #32
 800b680:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b682:	68fb      	ldr	r3, [r7, #12]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr
 800b690:	0800b695 	.word	0x0800b695

0800b694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b69e:	4b12      	ldr	r3, [pc, #72]	; (800b6e8 <prvTaskExitError+0x54>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6a6:	d00a      	beq.n	800b6be <prvTaskExitError+0x2a>
	__asm volatile
 800b6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	60fb      	str	r3, [r7, #12]
}
 800b6ba:	bf00      	nop
 800b6bc:	e7fe      	b.n	800b6bc <prvTaskExitError+0x28>
	__asm volatile
 800b6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c2:	f383 8811 	msr	BASEPRI, r3
 800b6c6:	f3bf 8f6f 	isb	sy
 800b6ca:	f3bf 8f4f 	dsb	sy
 800b6ce:	60bb      	str	r3, [r7, #8]
}
 800b6d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6d2:	bf00      	nop
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d0fc      	beq.n	800b6d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6da:	bf00      	nop
 800b6dc:	bf00      	nop
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	20000240 	.word	0x20000240
 800b6ec:	00000000 	.word	0x00000000

0800b6f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b6f0:	4b07      	ldr	r3, [pc, #28]	; (800b710 <pxCurrentTCBConst2>)
 800b6f2:	6819      	ldr	r1, [r3, #0]
 800b6f4:	6808      	ldr	r0, [r1, #0]
 800b6f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fa:	f380 8809 	msr	PSP, r0
 800b6fe:	f3bf 8f6f 	isb	sy
 800b702:	f04f 0000 	mov.w	r0, #0
 800b706:	f380 8811 	msr	BASEPRI, r0
 800b70a:	4770      	bx	lr
 800b70c:	f3af 8000 	nop.w

0800b710 <pxCurrentTCBConst2>:
 800b710:	20000d34 	.word	0x20000d34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b714:	bf00      	nop
 800b716:	bf00      	nop

0800b718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b718:	4808      	ldr	r0, [pc, #32]	; (800b73c <prvPortStartFirstTask+0x24>)
 800b71a:	6800      	ldr	r0, [r0, #0]
 800b71c:	6800      	ldr	r0, [r0, #0]
 800b71e:	f380 8808 	msr	MSP, r0
 800b722:	f04f 0000 	mov.w	r0, #0
 800b726:	f380 8814 	msr	CONTROL, r0
 800b72a:	b662      	cpsie	i
 800b72c:	b661      	cpsie	f
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	df00      	svc	0
 800b738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b73a:	bf00      	nop
 800b73c:	e000ed08 	.word	0xe000ed08

0800b740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b746:	4b46      	ldr	r3, [pc, #280]	; (800b860 <xPortStartScheduler+0x120>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a46      	ldr	r2, [pc, #280]	; (800b864 <xPortStartScheduler+0x124>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d10a      	bne.n	800b766 <xPortStartScheduler+0x26>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	613b      	str	r3, [r7, #16]
}
 800b762:	bf00      	nop
 800b764:	e7fe      	b.n	800b764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b766:	4b3e      	ldr	r3, [pc, #248]	; (800b860 <xPortStartScheduler+0x120>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a3f      	ldr	r2, [pc, #252]	; (800b868 <xPortStartScheduler+0x128>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d10a      	bne.n	800b786 <xPortStartScheduler+0x46>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b774:	f383 8811 	msr	BASEPRI, r3
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	60fb      	str	r3, [r7, #12]
}
 800b782:	bf00      	nop
 800b784:	e7fe      	b.n	800b784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b786:	4b39      	ldr	r3, [pc, #228]	; (800b86c <xPortStartScheduler+0x12c>)
 800b788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	22ff      	movs	r2, #255	; 0xff
 800b796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7a0:	78fb      	ldrb	r3, [r7, #3]
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	4b31      	ldr	r3, [pc, #196]	; (800b870 <xPortStartScheduler+0x130>)
 800b7ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7ae:	4b31      	ldr	r3, [pc, #196]	; (800b874 <xPortStartScheduler+0x134>)
 800b7b0:	2207      	movs	r2, #7
 800b7b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7b4:	e009      	b.n	800b7ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b7b6:	4b2f      	ldr	r3, [pc, #188]	; (800b874 <xPortStartScheduler+0x134>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	4a2d      	ldr	r2, [pc, #180]	; (800b874 <xPortStartScheduler+0x134>)
 800b7be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7c0:	78fb      	ldrb	r3, [r7, #3]
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7ca:	78fb      	ldrb	r3, [r7, #3]
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7d2:	2b80      	cmp	r3, #128	; 0x80
 800b7d4:	d0ef      	beq.n	800b7b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7d6:	4b27      	ldr	r3, [pc, #156]	; (800b874 <xPortStartScheduler+0x134>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f1c3 0307 	rsb	r3, r3, #7
 800b7de:	2b04      	cmp	r3, #4
 800b7e0:	d00a      	beq.n	800b7f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e6:	f383 8811 	msr	BASEPRI, r3
 800b7ea:	f3bf 8f6f 	isb	sy
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	60bb      	str	r3, [r7, #8]
}
 800b7f4:	bf00      	nop
 800b7f6:	e7fe      	b.n	800b7f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7f8:	4b1e      	ldr	r3, [pc, #120]	; (800b874 <xPortStartScheduler+0x134>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	021b      	lsls	r3, r3, #8
 800b7fe:	4a1d      	ldr	r2, [pc, #116]	; (800b874 <xPortStartScheduler+0x134>)
 800b800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b802:	4b1c      	ldr	r3, [pc, #112]	; (800b874 <xPortStartScheduler+0x134>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b80a:	4a1a      	ldr	r2, [pc, #104]	; (800b874 <xPortStartScheduler+0x134>)
 800b80c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	b2da      	uxtb	r2, r3
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b816:	4b18      	ldr	r3, [pc, #96]	; (800b878 <xPortStartScheduler+0x138>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a17      	ldr	r2, [pc, #92]	; (800b878 <xPortStartScheduler+0x138>)
 800b81c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b822:	4b15      	ldr	r3, [pc, #84]	; (800b878 <xPortStartScheduler+0x138>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a14      	ldr	r2, [pc, #80]	; (800b878 <xPortStartScheduler+0x138>)
 800b828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b82c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b82e:	f000 f8dd 	bl	800b9ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b832:	4b12      	ldr	r3, [pc, #72]	; (800b87c <xPortStartScheduler+0x13c>)
 800b834:	2200      	movs	r2, #0
 800b836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b838:	f000 f8fc 	bl	800ba34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b83c:	4b10      	ldr	r3, [pc, #64]	; (800b880 <xPortStartScheduler+0x140>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a0f      	ldr	r2, [pc, #60]	; (800b880 <xPortStartScheduler+0x140>)
 800b842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b848:	f7ff ff66 	bl	800b718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b84c:	f7fe fecc 	bl	800a5e8 <vTaskSwitchContext>
	prvTaskExitError();
 800b850:	f7ff ff20 	bl	800b694 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	e000ed00 	.word	0xe000ed00
 800b864:	410fc271 	.word	0x410fc271
 800b868:	410fc270 	.word	0x410fc270
 800b86c:	e000e400 	.word	0xe000e400
 800b870:	20000f5c 	.word	0x20000f5c
 800b874:	20000f60 	.word	0x20000f60
 800b878:	e000ed20 	.word	0xe000ed20
 800b87c:	20000240 	.word	0x20000240
 800b880:	e000ef34 	.word	0xe000ef34

0800b884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
	__asm volatile
 800b88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88e:	f383 8811 	msr	BASEPRI, r3
 800b892:	f3bf 8f6f 	isb	sy
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	607b      	str	r3, [r7, #4]
}
 800b89c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b89e:	4b0f      	ldr	r3, [pc, #60]	; (800b8dc <vPortEnterCritical+0x58>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	4a0d      	ldr	r2, [pc, #52]	; (800b8dc <vPortEnterCritical+0x58>)
 800b8a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b8a8:	4b0c      	ldr	r3, [pc, #48]	; (800b8dc <vPortEnterCritical+0x58>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d10f      	bne.n	800b8d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8b0:	4b0b      	ldr	r3, [pc, #44]	; (800b8e0 <vPortEnterCritical+0x5c>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	603b      	str	r3, [r7, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <vPortEnterCritical+0x4a>
	}
}
 800b8d0:	bf00      	nop
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	20000240 	.word	0x20000240
 800b8e0:	e000ed04 	.word	0xe000ed04

0800b8e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8ea:	4b12      	ldr	r3, [pc, #72]	; (800b934 <vPortExitCritical+0x50>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10a      	bne.n	800b908 <vPortExitCritical+0x24>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	607b      	str	r3, [r7, #4]
}
 800b904:	bf00      	nop
 800b906:	e7fe      	b.n	800b906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b908:	4b0a      	ldr	r3, [pc, #40]	; (800b934 <vPortExitCritical+0x50>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	3b01      	subs	r3, #1
 800b90e:	4a09      	ldr	r2, [pc, #36]	; (800b934 <vPortExitCritical+0x50>)
 800b910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b912:	4b08      	ldr	r3, [pc, #32]	; (800b934 <vPortExitCritical+0x50>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d105      	bne.n	800b926 <vPortExitCritical+0x42>
 800b91a:	2300      	movs	r3, #0
 800b91c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	f383 8811 	msr	BASEPRI, r3
}
 800b924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b926:	bf00      	nop
 800b928:	370c      	adds	r7, #12
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	20000240 	.word	0x20000240
	...

0800b940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b940:	f3ef 8009 	mrs	r0, PSP
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	4b15      	ldr	r3, [pc, #84]	; (800b9a0 <pxCurrentTCBConst>)
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	f01e 0f10 	tst.w	lr, #16
 800b950:	bf08      	it	eq
 800b952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95a:	6010      	str	r0, [r2, #0]
 800b95c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b960:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b964:	f380 8811 	msr	BASEPRI, r0
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f7fe fe3a 	bl	800a5e8 <vTaskSwitchContext>
 800b974:	f04f 0000 	mov.w	r0, #0
 800b978:	f380 8811 	msr	BASEPRI, r0
 800b97c:	bc09      	pop	{r0, r3}
 800b97e:	6819      	ldr	r1, [r3, #0]
 800b980:	6808      	ldr	r0, [r1, #0]
 800b982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b986:	f01e 0f10 	tst.w	lr, #16
 800b98a:	bf08      	it	eq
 800b98c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b990:	f380 8809 	msr	PSP, r0
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop
 800b99c:	f3af 8000 	nop.w

0800b9a0 <pxCurrentTCBConst>:
 800b9a0:	20000d34 	.word	0x20000d34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop

0800b9a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	607b      	str	r3, [r7, #4]
}
 800b9c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b9c2:	f7fe fd59 	bl	800a478 <xTaskIncrementTick>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9cc:	4b06      	ldr	r3, [pc, #24]	; (800b9e8 <SysTick_Handler+0x40>)
 800b9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	f383 8811 	msr	BASEPRI, r3
}
 800b9de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9e0:	bf00      	nop
 800b9e2:	3708      	adds	r7, #8
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	e000ed04 	.word	0xe000ed04

0800b9ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <vPortSetupTimerInterrupt+0x34>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ba24 <vPortSetupTimerInterrupt+0x38>)
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <vPortSetupTimerInterrupt+0x3c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a0a      	ldr	r2, [pc, #40]	; (800ba2c <vPortSetupTimerInterrupt+0x40>)
 800ba02:	fba2 2303 	umull	r2, r3, r2, r3
 800ba06:	099b      	lsrs	r3, r3, #6
 800ba08:	4a09      	ldr	r2, [pc, #36]	; (800ba30 <vPortSetupTimerInterrupt+0x44>)
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba0e:	4b04      	ldr	r3, [pc, #16]	; (800ba20 <vPortSetupTimerInterrupt+0x34>)
 800ba10:	2207      	movs	r2, #7
 800ba12:	601a      	str	r2, [r3, #0]
}
 800ba14:	bf00      	nop
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	e000e010 	.word	0xe000e010
 800ba24:	e000e018 	.word	0xe000e018
 800ba28:	20000174 	.word	0x20000174
 800ba2c:	10624dd3 	.word	0x10624dd3
 800ba30:	e000e014 	.word	0xe000e014

0800ba34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ba44 <vPortEnableVFP+0x10>
 800ba38:	6801      	ldr	r1, [r0, #0]
 800ba3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ba3e:	6001      	str	r1, [r0, #0]
 800ba40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba42:	bf00      	nop
 800ba44:	e000ed88 	.word	0xe000ed88

0800ba48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba4e:	f3ef 8305 	mrs	r3, IPSR
 800ba52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b0f      	cmp	r3, #15
 800ba58:	d914      	bls.n	800ba84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba5a:	4a17      	ldr	r2, [pc, #92]	; (800bab8 <vPortValidateInterruptPriority+0x70>)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4413      	add	r3, r2
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba64:	4b15      	ldr	r3, [pc, #84]	; (800babc <vPortValidateInterruptPriority+0x74>)
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	7afa      	ldrb	r2, [r7, #11]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d20a      	bcs.n	800ba84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	607b      	str	r3, [r7, #4]
}
 800ba80:	bf00      	nop
 800ba82:	e7fe      	b.n	800ba82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba84:	4b0e      	ldr	r3, [pc, #56]	; (800bac0 <vPortValidateInterruptPriority+0x78>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba8c:	4b0d      	ldr	r3, [pc, #52]	; (800bac4 <vPortValidateInterruptPriority+0x7c>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d90a      	bls.n	800baaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	603b      	str	r3, [r7, #0]
}
 800baa6:	bf00      	nop
 800baa8:	e7fe      	b.n	800baa8 <vPortValidateInterruptPriority+0x60>
	}
 800baaa:	bf00      	nop
 800baac:	3714      	adds	r7, #20
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	e000e3f0 	.word	0xe000e3f0
 800babc:	20000f5c 	.word	0x20000f5c
 800bac0:	e000ed0c 	.word	0xe000ed0c
 800bac4:	20000f60 	.word	0x20000f60

0800bac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b08a      	sub	sp, #40	; 0x28
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bad0:	2300      	movs	r3, #0
 800bad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bad4:	f7fe fc16 	bl	800a304 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bad8:	4b5b      	ldr	r3, [pc, #364]	; (800bc48 <pvPortMalloc+0x180>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bae0:	f000 f920 	bl	800bd24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bae4:	4b59      	ldr	r3, [pc, #356]	; (800bc4c <pvPortMalloc+0x184>)
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4013      	ands	r3, r2
 800baec:	2b00      	cmp	r3, #0
 800baee:	f040 8093 	bne.w	800bc18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d01d      	beq.n	800bb34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800baf8:	2208      	movs	r2, #8
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4413      	add	r3, r2
 800bafe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f003 0307 	and.w	r3, r3, #7
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d014      	beq.n	800bb34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f023 0307 	bic.w	r3, r3, #7
 800bb10:	3308      	adds	r3, #8
 800bb12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f003 0307 	and.w	r3, r3, #7
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00a      	beq.n	800bb34 <pvPortMalloc+0x6c>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	617b      	str	r3, [r7, #20]
}
 800bb30:	bf00      	nop
 800bb32:	e7fe      	b.n	800bb32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d06e      	beq.n	800bc18 <pvPortMalloc+0x150>
 800bb3a:	4b45      	ldr	r3, [pc, #276]	; (800bc50 <pvPortMalloc+0x188>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d869      	bhi.n	800bc18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb44:	4b43      	ldr	r3, [pc, #268]	; (800bc54 <pvPortMalloc+0x18c>)
 800bb46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb48:	4b42      	ldr	r3, [pc, #264]	; (800bc54 <pvPortMalloc+0x18c>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb4e:	e004      	b.n	800bb5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d903      	bls.n	800bb6c <pvPortMalloc+0xa4>
 800bb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1f1      	bne.n	800bb50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb6c:	4b36      	ldr	r3, [pc, #216]	; (800bc48 <pvPortMalloc+0x180>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d050      	beq.n	800bc18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2208      	movs	r2, #8
 800bb7c:	4413      	add	r3, r2
 800bb7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	1ad2      	subs	r2, r2, r3
 800bb90:	2308      	movs	r3, #8
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d91f      	bls.n	800bbd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	f003 0307 	and.w	r3, r3, #7
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00a      	beq.n	800bbc0 <pvPortMalloc+0xf8>
	__asm volatile
 800bbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbae:	f383 8811 	msr	BASEPRI, r3
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	f3bf 8f4f 	dsb	sy
 800bbba:	613b      	str	r3, [r7, #16]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	1ad2      	subs	r2, r2, r3
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bbd2:	69b8      	ldr	r0, [r7, #24]
 800bbd4:	f000 f908 	bl	800bde8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bbd8:	4b1d      	ldr	r3, [pc, #116]	; (800bc50 <pvPortMalloc+0x188>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	4a1b      	ldr	r2, [pc, #108]	; (800bc50 <pvPortMalloc+0x188>)
 800bbe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbe6:	4b1a      	ldr	r3, [pc, #104]	; (800bc50 <pvPortMalloc+0x188>)
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	4b1b      	ldr	r3, [pc, #108]	; (800bc58 <pvPortMalloc+0x190>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d203      	bcs.n	800bbfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbf2:	4b17      	ldr	r3, [pc, #92]	; (800bc50 <pvPortMalloc+0x188>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a18      	ldr	r2, [pc, #96]	; (800bc58 <pvPortMalloc+0x190>)
 800bbf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfc:	685a      	ldr	r2, [r3, #4]
 800bbfe:	4b13      	ldr	r3, [pc, #76]	; (800bc4c <pvPortMalloc+0x184>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	431a      	orrs	r2, r3
 800bc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bc0e:	4b13      	ldr	r3, [pc, #76]	; (800bc5c <pvPortMalloc+0x194>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3301      	adds	r3, #1
 800bc14:	4a11      	ldr	r2, [pc, #68]	; (800bc5c <pvPortMalloc+0x194>)
 800bc16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc18:	f7fe fb82 	bl	800a320 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	f003 0307 	and.w	r3, r3, #7
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00a      	beq.n	800bc3c <pvPortMalloc+0x174>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	60fb      	str	r3, [r7, #12]
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <pvPortMalloc+0x172>
	return pvReturn;
 800bc3c:	69fb      	ldr	r3, [r7, #28]
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3728      	adds	r7, #40	; 0x28
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20004b6c 	.word	0x20004b6c
 800bc4c:	20004b80 	.word	0x20004b80
 800bc50:	20004b70 	.word	0x20004b70
 800bc54:	20004b64 	.word	0x20004b64
 800bc58:	20004b74 	.word	0x20004b74
 800bc5c:	20004b78 	.word	0x20004b78

0800bc60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d04d      	beq.n	800bd0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc72:	2308      	movs	r3, #8
 800bc74:	425b      	negs	r3, r3
 800bc76:	697a      	ldr	r2, [r7, #20]
 800bc78:	4413      	add	r3, r2
 800bc7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	4b24      	ldr	r3, [pc, #144]	; (800bd18 <vPortFree+0xb8>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4013      	ands	r3, r2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10a      	bne.n	800bca4 <vPortFree+0x44>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	60fb      	str	r3, [r7, #12]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00a      	beq.n	800bcc2 <vPortFree+0x62>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	60bb      	str	r3, [r7, #8]
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	4b14      	ldr	r3, [pc, #80]	; (800bd18 <vPortFree+0xb8>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4013      	ands	r3, r2
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d01e      	beq.n	800bd0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d11a      	bne.n	800bd0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	4b0e      	ldr	r3, [pc, #56]	; (800bd18 <vPortFree+0xb8>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	43db      	mvns	r3, r3
 800bce2:	401a      	ands	r2, r3
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bce8:	f7fe fb0c 	bl	800a304 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	4b0a      	ldr	r3, [pc, #40]	; (800bd1c <vPortFree+0xbc>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	4a09      	ldr	r2, [pc, #36]	; (800bd1c <vPortFree+0xbc>)
 800bcf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bcfa:	6938      	ldr	r0, [r7, #16]
 800bcfc:	f000 f874 	bl	800bde8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bd00:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <vPortFree+0xc0>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	3301      	adds	r3, #1
 800bd06:	4a06      	ldr	r2, [pc, #24]	; (800bd20 <vPortFree+0xc0>)
 800bd08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bd0a:	f7fe fb09 	bl	800a320 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bd0e:	bf00      	nop
 800bd10:	3718      	adds	r7, #24
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	20004b80 	.word	0x20004b80
 800bd1c:	20004b70 	.word	0x20004b70
 800bd20:	20004b7c 	.word	0x20004b7c

0800bd24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bd2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd30:	4b27      	ldr	r3, [pc, #156]	; (800bdd0 <prvHeapInit+0xac>)
 800bd32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f003 0307 	and.w	r3, r3, #7
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00c      	beq.n	800bd58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	3307      	adds	r3, #7
 800bd42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f023 0307 	bic.w	r3, r3, #7
 800bd4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd4c:	68ba      	ldr	r2, [r7, #8]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	4a1f      	ldr	r2, [pc, #124]	; (800bdd0 <prvHeapInit+0xac>)
 800bd54:	4413      	add	r3, r2
 800bd56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd5c:	4a1d      	ldr	r2, [pc, #116]	; (800bdd4 <prvHeapInit+0xb0>)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd62:	4b1c      	ldr	r3, [pc, #112]	; (800bdd4 <prvHeapInit+0xb0>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd70:	2208      	movs	r2, #8
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	1a9b      	subs	r3, r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f023 0307 	bic.w	r3, r3, #7
 800bd7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	4a15      	ldr	r2, [pc, #84]	; (800bdd8 <prvHeapInit+0xb4>)
 800bd84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd86:	4b14      	ldr	r3, [pc, #80]	; (800bdd8 <prvHeapInit+0xb4>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd8e:	4b12      	ldr	r3, [pc, #72]	; (800bdd8 <prvHeapInit+0xb4>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2200      	movs	r2, #0
 800bd94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	1ad2      	subs	r2, r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bda4:	4b0c      	ldr	r3, [pc, #48]	; (800bdd8 <prvHeapInit+0xb4>)
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	4a0a      	ldr	r2, [pc, #40]	; (800bddc <prvHeapInit+0xb8>)
 800bdb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	4a09      	ldr	r2, [pc, #36]	; (800bde0 <prvHeapInit+0xbc>)
 800bdba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bdbc:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <prvHeapInit+0xc0>)
 800bdbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bdc2:	601a      	str	r2, [r3, #0]
}
 800bdc4:	bf00      	nop
 800bdc6:	3714      	adds	r7, #20
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	20000f64 	.word	0x20000f64
 800bdd4:	20004b64 	.word	0x20004b64
 800bdd8:	20004b6c 	.word	0x20004b6c
 800bddc:	20004b74 	.word	0x20004b74
 800bde0:	20004b70 	.word	0x20004b70
 800bde4:	20004b80 	.word	0x20004b80

0800bde8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bdf0:	4b28      	ldr	r3, [pc, #160]	; (800be94 <prvInsertBlockIntoFreeList+0xac>)
 800bdf2:	60fb      	str	r3, [r7, #12]
 800bdf4:	e002      	b.n	800bdfc <prvInsertBlockIntoFreeList+0x14>
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	60fb      	str	r3, [r7, #12]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	429a      	cmp	r2, r3
 800be04:	d8f7      	bhi.n	800bdf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	4413      	add	r3, r2
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	429a      	cmp	r2, r3
 800be16:	d108      	bne.n	800be2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	685a      	ldr	r2, [r3, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	441a      	add	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	441a      	add	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d118      	bne.n	800be70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	4b15      	ldr	r3, [pc, #84]	; (800be98 <prvInsertBlockIntoFreeList+0xb0>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	429a      	cmp	r2, r3
 800be48:	d00d      	beq.n	800be66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	441a      	add	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	601a      	str	r2, [r3, #0]
 800be64:	e008      	b.n	800be78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be66:	4b0c      	ldr	r3, [pc, #48]	; (800be98 <prvInsertBlockIntoFreeList+0xb0>)
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	e003      	b.n	800be78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d002      	beq.n	800be86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be86:	bf00      	nop
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	20004b64 	.word	0x20004b64
 800be98:	20004b6c 	.word	0x20004b6c

0800be9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bea0:	2200      	movs	r2, #0
 800bea2:	490e      	ldr	r1, [pc, #56]	; (800bedc <MX_USB_DEVICE_Init+0x40>)
 800bea4:	480e      	ldr	r0, [pc, #56]	; (800bee0 <MX_USB_DEVICE_Init+0x44>)
 800bea6:	f7fb fce1 	bl	800786c <USBD_Init>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d001      	beq.n	800beb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800beb0:	f7f5 fa16 	bl	80012e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800beb4:	490b      	ldr	r1, [pc, #44]	; (800bee4 <MX_USB_DEVICE_Init+0x48>)
 800beb6:	480a      	ldr	r0, [pc, #40]	; (800bee0 <MX_USB_DEVICE_Init+0x44>)
 800beb8:	f7fb fd08 	bl	80078cc <USBD_RegisterClass>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bec2:	f7f5 fa0d 	bl	80012e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bec6:	4806      	ldr	r0, [pc, #24]	; (800bee0 <MX_USB_DEVICE_Init+0x44>)
 800bec8:	f7fb fd36 	bl	8007938 <USBD_Start>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800bed2:	f7f5 fa05 	bl	80012e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bed6:	bf00      	nop
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20000244 	.word	0x20000244
 800bee0:	20004b84 	.word	0x20004b84
 800bee4:	20000180 	.word	0x20000180

0800bee8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	6039      	str	r1, [r7, #0]
 800bef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2212      	movs	r2, #18
 800bef8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800befa:	4b03      	ldr	r3, [pc, #12]	; (800bf08 <USBD_FS_DeviceDescriptor+0x20>)
}
 800befc:	4618      	mov	r0, r3
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr
 800bf08:	20000260 	.word	0x20000260

0800bf0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	4603      	mov	r3, r0
 800bf14:	6039      	str	r1, [r7, #0]
 800bf16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	2204      	movs	r2, #4
 800bf1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bf1e:	4b03      	ldr	r3, [pc, #12]	; (800bf2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	20000274 	.word	0x20000274

0800bf30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	4603      	mov	r3, r0
 800bf38:	6039      	str	r1, [r7, #0]
 800bf3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf3c:	79fb      	ldrb	r3, [r7, #7]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d105      	bne.n	800bf4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	4907      	ldr	r1, [pc, #28]	; (800bf64 <USBD_FS_ProductStrDescriptor+0x34>)
 800bf46:	4808      	ldr	r0, [pc, #32]	; (800bf68 <USBD_FS_ProductStrDescriptor+0x38>)
 800bf48:	f7fc fea2 	bl	8008c90 <USBD_GetString>
 800bf4c:	e004      	b.n	800bf58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf4e:	683a      	ldr	r2, [r7, #0]
 800bf50:	4904      	ldr	r1, [pc, #16]	; (800bf64 <USBD_FS_ProductStrDescriptor+0x34>)
 800bf52:	4805      	ldr	r0, [pc, #20]	; (800bf68 <USBD_FS_ProductStrDescriptor+0x38>)
 800bf54:	f7fc fe9c 	bl	8008c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf58:	4b02      	ldr	r3, [pc, #8]	; (800bf64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	20004e60 	.word	0x20004e60
 800bf68:	0800c9c0 	.word	0x0800c9c0

0800bf6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	4603      	mov	r3, r0
 800bf74:	6039      	str	r1, [r7, #0]
 800bf76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	4904      	ldr	r1, [pc, #16]	; (800bf8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bf7c:	4804      	ldr	r0, [pc, #16]	; (800bf90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bf7e:	f7fc fe87 	bl	8008c90 <USBD_GetString>
  return USBD_StrDesc;
 800bf82:	4b02      	ldr	r3, [pc, #8]	; (800bf8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	20004e60 	.word	0x20004e60
 800bf90:	0800c9d4 	.word	0x0800c9d4

0800bf94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	6039      	str	r1, [r7, #0]
 800bf9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	221a      	movs	r2, #26
 800bfa4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bfa6:	f000 f843 	bl	800c030 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bfaa:	4b02      	ldr	r3, [pc, #8]	; (800bfb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	20000278 	.word	0x20000278

0800bfb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	6039      	str	r1, [r7, #0]
 800bfc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d105      	bne.n	800bfd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bfca:	683a      	ldr	r2, [r7, #0]
 800bfcc:	4907      	ldr	r1, [pc, #28]	; (800bfec <USBD_FS_ConfigStrDescriptor+0x34>)
 800bfce:	4808      	ldr	r0, [pc, #32]	; (800bff0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bfd0:	f7fc fe5e 	bl	8008c90 <USBD_GetString>
 800bfd4:	e004      	b.n	800bfe0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	4904      	ldr	r1, [pc, #16]	; (800bfec <USBD_FS_ConfigStrDescriptor+0x34>)
 800bfda:	4805      	ldr	r0, [pc, #20]	; (800bff0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bfdc:	f7fc fe58 	bl	8008c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfe0:	4b02      	ldr	r3, [pc, #8]	; (800bfec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	20004e60 	.word	0x20004e60
 800bff0:	0800c9e8 	.word	0x0800c9e8

0800bff4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	4603      	mov	r3, r0
 800bffc:	6039      	str	r1, [r7, #0]
 800bffe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c000:	79fb      	ldrb	r3, [r7, #7]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d105      	bne.n	800c012 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c006:	683a      	ldr	r2, [r7, #0]
 800c008:	4907      	ldr	r1, [pc, #28]	; (800c028 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c00a:	4808      	ldr	r0, [pc, #32]	; (800c02c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c00c:	f7fc fe40 	bl	8008c90 <USBD_GetString>
 800c010:	e004      	b.n	800c01c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	4904      	ldr	r1, [pc, #16]	; (800c028 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c016:	4805      	ldr	r0, [pc, #20]	; (800c02c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c018:	f7fc fe3a 	bl	8008c90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c01c:	4b02      	ldr	r3, [pc, #8]	; (800c028 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	20004e60 	.word	0x20004e60
 800c02c:	0800c9f4 	.word	0x0800c9f4

0800c030 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c036:	4b0f      	ldr	r3, [pc, #60]	; (800c074 <Get_SerialNum+0x44>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c03c:	4b0e      	ldr	r3, [pc, #56]	; (800c078 <Get_SerialNum+0x48>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c042:	4b0e      	ldr	r3, [pc, #56]	; (800c07c <Get_SerialNum+0x4c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4413      	add	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d009      	beq.n	800c06a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c056:	2208      	movs	r2, #8
 800c058:	4909      	ldr	r1, [pc, #36]	; (800c080 <Get_SerialNum+0x50>)
 800c05a:	68f8      	ldr	r0, [r7, #12]
 800c05c:	f000 f814 	bl	800c088 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c060:	2204      	movs	r2, #4
 800c062:	4908      	ldr	r1, [pc, #32]	; (800c084 <Get_SerialNum+0x54>)
 800c064:	68b8      	ldr	r0, [r7, #8]
 800c066:	f000 f80f 	bl	800c088 <IntToUnicode>
  }
}
 800c06a:	bf00      	nop
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	1fff7a10 	.word	0x1fff7a10
 800c078:	1fff7a14 	.word	0x1fff7a14
 800c07c:	1fff7a18 	.word	0x1fff7a18
 800c080:	2000027a 	.word	0x2000027a
 800c084:	2000028a 	.word	0x2000028a

0800c088 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c088:	b480      	push	{r7}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	4613      	mov	r3, r2
 800c094:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c096:	2300      	movs	r3, #0
 800c098:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c09a:	2300      	movs	r3, #0
 800c09c:	75fb      	strb	r3, [r7, #23]
 800c09e:	e027      	b.n	800c0f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	0f1b      	lsrs	r3, r3, #28
 800c0a4:	2b09      	cmp	r3, #9
 800c0a6:	d80b      	bhi.n	800c0c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	0f1b      	lsrs	r3, r3, #28
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	7dfb      	ldrb	r3, [r7, #23]
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	440b      	add	r3, r1
 800c0b8:	3230      	adds	r2, #48	; 0x30
 800c0ba:	b2d2      	uxtb	r2, r2
 800c0bc:	701a      	strb	r2, [r3, #0]
 800c0be:	e00a      	b.n	800c0d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	0f1b      	lsrs	r3, r3, #28
 800c0c4:	b2da      	uxtb	r2, r3
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
 800c0c8:	005b      	lsls	r3, r3, #1
 800c0ca:	4619      	mov	r1, r3
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	440b      	add	r3, r1
 800c0d0:	3237      	adds	r2, #55	; 0x37
 800c0d2:	b2d2      	uxtb	r2, r2
 800c0d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	011b      	lsls	r3, r3, #4
 800c0da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
 800c0de:	005b      	lsls	r3, r3, #1
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c0ea:	7dfb      	ldrb	r3, [r7, #23]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	75fb      	strb	r3, [r7, #23]
 800c0f0:	7dfa      	ldrb	r2, [r7, #23]
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d3d3      	bcc.n	800c0a0 <IntToUnicode+0x18>
  }
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop
 800c0fc:	371c      	adds	r7, #28
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
	...

0800c108 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08a      	sub	sp, #40	; 0x28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c110:	f107 0314 	add.w	r3, r7, #20
 800c114:	2200      	movs	r2, #0
 800c116:	601a      	str	r2, [r3, #0]
 800c118:	605a      	str	r2, [r3, #4]
 800c11a:	609a      	str	r2, [r3, #8]
 800c11c:	60da      	str	r2, [r3, #12]
 800c11e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c128:	d147      	bne.n	800c1ba <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c12a:	2300      	movs	r3, #0
 800c12c:	613b      	str	r3, [r7, #16]
 800c12e:	4b25      	ldr	r3, [pc, #148]	; (800c1c4 <HAL_PCD_MspInit+0xbc>)
 800c130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c132:	4a24      	ldr	r2, [pc, #144]	; (800c1c4 <HAL_PCD_MspInit+0xbc>)
 800c134:	f043 0301 	orr.w	r3, r3, #1
 800c138:	6313      	str	r3, [r2, #48]	; 0x30
 800c13a:	4b22      	ldr	r3, [pc, #136]	; (800c1c4 <HAL_PCD_MspInit+0xbc>)
 800c13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c13e:	f003 0301 	and.w	r3, r3, #1
 800c142:	613b      	str	r3, [r7, #16]
 800c144:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c146:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800c14a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c14c:	2302      	movs	r3, #2
 800c14e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c150:	2300      	movs	r3, #0
 800c152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c154:	2303      	movs	r3, #3
 800c156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c158:	230a      	movs	r3, #10
 800c15a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c15c:	f107 0314 	add.w	r3, r7, #20
 800c160:	4619      	mov	r1, r3
 800c162:	4819      	ldr	r0, [pc, #100]	; (800c1c8 <HAL_PCD_MspInit+0xc0>)
 800c164:	f7f6 faba 	bl	80026dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c16c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c16e:	2300      	movs	r3, #0
 800c170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c172:	2300      	movs	r3, #0
 800c174:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c176:	f107 0314 	add.w	r3, r7, #20
 800c17a:	4619      	mov	r1, r3
 800c17c:	4812      	ldr	r0, [pc, #72]	; (800c1c8 <HAL_PCD_MspInit+0xc0>)
 800c17e:	f7f6 faad 	bl	80026dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c182:	4b10      	ldr	r3, [pc, #64]	; (800c1c4 <HAL_PCD_MspInit+0xbc>)
 800c184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c186:	4a0f      	ldr	r2, [pc, #60]	; (800c1c4 <HAL_PCD_MspInit+0xbc>)
 800c188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c18c:	6353      	str	r3, [r2, #52]	; 0x34
 800c18e:	2300      	movs	r3, #0
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	4b0c      	ldr	r3, [pc, #48]	; (800c1c4 <HAL_PCD_MspInit+0xbc>)
 800c194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c196:	4a0b      	ldr	r2, [pc, #44]	; (800c1c4 <HAL_PCD_MspInit+0xbc>)
 800c198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c19c:	6453      	str	r3, [r2, #68]	; 0x44
 800c19e:	4b09      	ldr	r3, [pc, #36]	; (800c1c4 <HAL_PCD_MspInit+0xbc>)
 800c1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1a6:	60fb      	str	r3, [r7, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2105      	movs	r1, #5
 800c1ae:	2043      	movs	r0, #67	; 0x43
 800c1b0:	f7f5 ff2c 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c1b4:	2043      	movs	r0, #67	; 0x43
 800c1b6:	f7f5 ff45 	bl	8002044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c1ba:	bf00      	nop
 800c1bc:	3728      	adds	r7, #40	; 0x28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	40023800 	.word	0x40023800
 800c1c8:	40020000 	.word	0x40020000

0800c1cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	f7fb fbf5 	bl	80079d2 <USBD_LL_SetupStage>
}
 800c1e8:	bf00      	nop
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c202:	78fa      	ldrb	r2, [r7, #3]
 800c204:	6879      	ldr	r1, [r7, #4]
 800c206:	4613      	mov	r3, r2
 800c208:	00db      	lsls	r3, r3, #3
 800c20a:	4413      	add	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	440b      	add	r3, r1
 800c210:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	78fb      	ldrb	r3, [r7, #3]
 800c218:	4619      	mov	r1, r3
 800c21a:	f7fb fc2f 	bl	8007a7c <USBD_LL_DataOutStage>
}
 800c21e:	bf00      	nop
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	460b      	mov	r3, r1
 800c230:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c238:	78fa      	ldrb	r2, [r7, #3]
 800c23a:	6879      	ldr	r1, [r7, #4]
 800c23c:	4613      	mov	r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	4413      	add	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	440b      	add	r3, r1
 800c246:	334c      	adds	r3, #76	; 0x4c
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	78fb      	ldrb	r3, [r7, #3]
 800c24c:	4619      	mov	r1, r3
 800c24e:	f7fb fcc8 	bl	8007be2 <USBD_LL_DataInStage>
}
 800c252:	bf00      	nop
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b082      	sub	sp, #8
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c268:	4618      	mov	r0, r3
 800c26a:	f7fb fdfc 	bl	8007e66 <USBD_LL_SOF>
}
 800c26e:	bf00      	nop
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b084      	sub	sp, #16
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c27e:	2301      	movs	r3, #1
 800c280:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d102      	bne.n	800c290 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c28a:	2300      	movs	r3, #0
 800c28c:	73fb      	strb	r3, [r7, #15]
 800c28e:	e008      	b.n	800c2a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	2b02      	cmp	r3, #2
 800c296:	d102      	bne.n	800c29e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c298:	2301      	movs	r3, #1
 800c29a:	73fb      	strb	r3, [r7, #15]
 800c29c:	e001      	b.n	800c2a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c29e:	f7f5 f81f 	bl	80012e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2a8:	7bfa      	ldrb	r2, [r7, #15]
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fb fd9c 	bl	8007dea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fb fd44 	bl	8007d46 <USBD_LL_Reset>
}
 800c2be:	bf00      	nop
 800c2c0:	3710      	adds	r7, #16
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
	...

0800c2c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fb fd97 	bl	8007e0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	6812      	ldr	r2, [r2, #0]
 800c2ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c2ee:	f043 0301 	orr.w	r3, r3, #1
 800c2f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6a1b      	ldr	r3, [r3, #32]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d005      	beq.n	800c308 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2fc:	4b04      	ldr	r3, [pc, #16]	; (800c310 <HAL_PCD_SuspendCallback+0x48>)
 800c2fe:	691b      	ldr	r3, [r3, #16]
 800c300:	4a03      	ldr	r2, [pc, #12]	; (800c310 <HAL_PCD_SuspendCallback+0x48>)
 800c302:	f043 0306 	orr.w	r3, r3, #6
 800c306:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c308:	bf00      	nop
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	e000ed00 	.word	0xe000ed00

0800c314 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c322:	4618      	mov	r0, r3
 800c324:	f7fb fd87 	bl	8007e36 <USBD_LL_Resume>
}
 800c328:	bf00      	nop
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	460b      	mov	r3, r1
 800c33a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c342:	78fa      	ldrb	r2, [r7, #3]
 800c344:	4611      	mov	r1, r2
 800c346:	4618      	mov	r0, r3
 800c348:	f7fb fddf 	bl	8007f0a <USBD_LL_IsoOUTIncomplete>
}
 800c34c:	bf00      	nop
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	460b      	mov	r3, r1
 800c35e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c366:	78fa      	ldrb	r2, [r7, #3]
 800c368:	4611      	mov	r1, r2
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fb fd9b 	bl	8007ea6 <USBD_LL_IsoINIncomplete>
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c386:	4618      	mov	r0, r3
 800c388:	f7fb fdf1 	bl	8007f6e <USBD_LL_DevConnected>
}
 800c38c:	bf00      	nop
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fb fdee 	bl	8007f84 <USBD_LL_DevDisconnected>
}
 800c3a8:	bf00      	nop
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d13c      	bne.n	800c43a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c3c0:	4a20      	ldr	r2, [pc, #128]	; (800c444 <USBD_LL_Init+0x94>)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a1e      	ldr	r2, [pc, #120]	; (800c444 <USBD_LL_Init+0x94>)
 800c3cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c3d0:	4b1c      	ldr	r3, [pc, #112]	; (800c444 <USBD_LL_Init+0x94>)
 800c3d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c3d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c3d8:	4b1a      	ldr	r3, [pc, #104]	; (800c444 <USBD_LL_Init+0x94>)
 800c3da:	2204      	movs	r2, #4
 800c3dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c3de:	4b19      	ldr	r3, [pc, #100]	; (800c444 <USBD_LL_Init+0x94>)
 800c3e0:	2202      	movs	r2, #2
 800c3e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c3e4:	4b17      	ldr	r3, [pc, #92]	; (800c444 <USBD_LL_Init+0x94>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c3ea:	4b16      	ldr	r3, [pc, #88]	; (800c444 <USBD_LL_Init+0x94>)
 800c3ec:	2202      	movs	r2, #2
 800c3ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800c3f0:	4b14      	ldr	r3, [pc, #80]	; (800c444 <USBD_LL_Init+0x94>)
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c3f6:	4b13      	ldr	r3, [pc, #76]	; (800c444 <USBD_LL_Init+0x94>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c3fc:	4b11      	ldr	r3, [pc, #68]	; (800c444 <USBD_LL_Init+0x94>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c402:	4b10      	ldr	r3, [pc, #64]	; (800c444 <USBD_LL_Init+0x94>)
 800c404:	2201      	movs	r2, #1
 800c406:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c408:	4b0e      	ldr	r3, [pc, #56]	; (800c444 <USBD_LL_Init+0x94>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c40e:	480d      	ldr	r0, [pc, #52]	; (800c444 <USBD_LL_Init+0x94>)
 800c410:	f7f6 fd1b 	bl	8002e4a <HAL_PCD_Init>
 800c414:	4603      	mov	r3, r0
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c41a:	f7f4 ff61 	bl	80012e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c41e:	2180      	movs	r1, #128	; 0x80
 800c420:	4808      	ldr	r0, [pc, #32]	; (800c444 <USBD_LL_Init+0x94>)
 800c422:	f7f7 ff5a 	bl	80042da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c426:	2240      	movs	r2, #64	; 0x40
 800c428:	2100      	movs	r1, #0
 800c42a:	4806      	ldr	r0, [pc, #24]	; (800c444 <USBD_LL_Init+0x94>)
 800c42c:	f7f7 ff0e 	bl	800424c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c430:	2280      	movs	r2, #128	; 0x80
 800c432:	2101      	movs	r1, #1
 800c434:	4803      	ldr	r0, [pc, #12]	; (800c444 <USBD_LL_Init+0x94>)
 800c436:	f7f7 ff09 	bl	800424c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3708      	adds	r7, #8
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	20005060 	.word	0x20005060

0800c448 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c454:	2300      	movs	r3, #0
 800c456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f6 fe10 	bl	8003084 <HAL_PCD_Start>
 800c464:	4603      	mov	r3, r0
 800c466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c468:	7bfb      	ldrb	r3, [r7, #15]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 f930 	bl	800c6d0 <USBD_Get_USB_Status>
 800c470:	4603      	mov	r3, r0
 800c472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c474:	7bbb      	ldrb	r3, [r7, #14]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	4608      	mov	r0, r1
 800c488:	4611      	mov	r1, r2
 800c48a:	461a      	mov	r2, r3
 800c48c:	4603      	mov	r3, r0
 800c48e:	70fb      	strb	r3, [r7, #3]
 800c490:	460b      	mov	r3, r1
 800c492:	70bb      	strb	r3, [r7, #2]
 800c494:	4613      	mov	r3, r2
 800c496:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c498:	2300      	movs	r3, #0
 800c49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c4a6:	78bb      	ldrb	r3, [r7, #2]
 800c4a8:	883a      	ldrh	r2, [r7, #0]
 800c4aa:	78f9      	ldrb	r1, [r7, #3]
 800c4ac:	f7f7 fae1 	bl	8003a72 <HAL_PCD_EP_Open>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f000 f90a 	bl	800c6d0 <USBD_Get_USB_Status>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b084      	sub	sp, #16
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4e4:	78fa      	ldrb	r2, [r7, #3]
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7f7 fb2a 	bl	8003b42 <HAL_PCD_EP_Close>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4f2:	7bfb      	ldrb	r3, [r7, #15]
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 f8eb 	bl	800c6d0 <USBD_Get_USB_Status>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	460b      	mov	r3, r1
 800c512:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c518:	2300      	movs	r3, #0
 800c51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c522:	78fa      	ldrb	r2, [r7, #3]
 800c524:	4611      	mov	r1, r2
 800c526:	4618      	mov	r0, r3
 800c528:	f7f7 fbea 	bl	8003d00 <HAL_PCD_EP_SetStall>
 800c52c:	4603      	mov	r3, r0
 800c52e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c530:	7bfb      	ldrb	r3, [r7, #15]
 800c532:	4618      	mov	r0, r3
 800c534:	f000 f8cc 	bl	800c6d0 <USBD_Get_USB_Status>
 800c538:	4603      	mov	r3, r0
 800c53a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c53c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b084      	sub	sp, #16
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	460b      	mov	r3, r1
 800c550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c556:	2300      	movs	r3, #0
 800c558:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c560:	78fa      	ldrb	r2, [r7, #3]
 800c562:	4611      	mov	r1, r2
 800c564:	4618      	mov	r0, r3
 800c566:	f7f7 fc2f 	bl	8003dc8 <HAL_PCD_EP_ClrStall>
 800c56a:	4603      	mov	r3, r0
 800c56c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c56e:	7bfb      	ldrb	r3, [r7, #15]
 800c570:	4618      	mov	r0, r3
 800c572:	f000 f8ad 	bl	800c6d0 <USBD_Get_USB_Status>
 800c576:	4603      	mov	r3, r0
 800c578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c57a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c596:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	da0b      	bge.n	800c5b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c5a0:	78fb      	ldrb	r3, [r7, #3]
 800c5a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5a6:	68f9      	ldr	r1, [r7, #12]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	00db      	lsls	r3, r3, #3
 800c5ac:	4413      	add	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	440b      	add	r3, r1
 800c5b2:	333e      	adds	r3, #62	; 0x3e
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	e00b      	b.n	800c5d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c5b8:	78fb      	ldrb	r3, [r7, #3]
 800c5ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5be:	68f9      	ldr	r1, [r7, #12]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	00db      	lsls	r3, r3, #3
 800c5c4:	4413      	add	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	440b      	add	r3, r1
 800c5ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c5ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3714      	adds	r7, #20
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5f6:	78fa      	ldrb	r2, [r7, #3]
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7f7 fa14 	bl	8003a28 <HAL_PCD_SetAddress>
 800c600:	4603      	mov	r3, r0
 800c602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c604:	7bfb      	ldrb	r3, [r7, #15]
 800c606:	4618      	mov	r0, r3
 800c608:	f000 f862 	bl	800c6d0 <USBD_Get_USB_Status>
 800c60c:	4603      	mov	r3, r0
 800c60e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c610:	7bbb      	ldrb	r3, [r7, #14]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b086      	sub	sp, #24
 800c61e:	af00      	add	r7, sp, #0
 800c620:	60f8      	str	r0, [r7, #12]
 800c622:	607a      	str	r2, [r7, #4]
 800c624:	603b      	str	r3, [r7, #0]
 800c626:	460b      	mov	r3, r1
 800c628:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c62e:	2300      	movs	r3, #0
 800c630:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c638:	7af9      	ldrb	r1, [r7, #11]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	f7f7 fb15 	bl	8003c6c <HAL_PCD_EP_Transmit>
 800c642:	4603      	mov	r3, r0
 800c644:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c646:	7dfb      	ldrb	r3, [r7, #23]
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 f841 	bl	800c6d0 <USBD_Get_USB_Status>
 800c64e:	4603      	mov	r3, r0
 800c650:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c652:	7dbb      	ldrb	r3, [r7, #22]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	607a      	str	r2, [r7, #4]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	460b      	mov	r3, r1
 800c66a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c66c:	2300      	movs	r3, #0
 800c66e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c670:	2300      	movs	r3, #0
 800c672:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c67a:	7af9      	ldrb	r1, [r7, #11]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	f7f7 faa9 	bl	8003bd6 <HAL_PCD_EP_Receive>
 800c684:	4603      	mov	r3, r0
 800c686:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c688:	7dfb      	ldrb	r3, [r7, #23]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 f820 	bl	800c6d0 <USBD_Get_USB_Status>
 800c690:	4603      	mov	r3, r0
 800c692:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c694:	7dbb      	ldrb	r3, [r7, #22]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3718      	adds	r7, #24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
	...

0800c6a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c6a8:	4b03      	ldr	r3, [pc, #12]	; (800c6b8 <USBD_static_malloc+0x18>)
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	370c      	adds	r7, #12
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	2000556c 	.word	0x2000556c

0800c6bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]

}
 800c6c4:	bf00      	nop
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c6de:	79fb      	ldrb	r3, [r7, #7]
 800c6e0:	2b03      	cmp	r3, #3
 800c6e2:	d817      	bhi.n	800c714 <USBD_Get_USB_Status+0x44>
 800c6e4:	a201      	add	r2, pc, #4	; (adr r2, 800c6ec <USBD_Get_USB_Status+0x1c>)
 800c6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ea:	bf00      	nop
 800c6ec:	0800c6fd 	.word	0x0800c6fd
 800c6f0:	0800c703 	.word	0x0800c703
 800c6f4:	0800c709 	.word	0x0800c709
 800c6f8:	0800c70f 	.word	0x0800c70f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c700:	e00b      	b.n	800c71a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c702:	2303      	movs	r3, #3
 800c704:	73fb      	strb	r3, [r7, #15]
    break;
 800c706:	e008      	b.n	800c71a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c708:	2301      	movs	r3, #1
 800c70a:	73fb      	strb	r3, [r7, #15]
    break;
 800c70c:	e005      	b.n	800c71a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c70e:	2303      	movs	r3, #3
 800c710:	73fb      	strb	r3, [r7, #15]
    break;
 800c712:	e002      	b.n	800c71a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c714:	2303      	movs	r3, #3
 800c716:	73fb      	strb	r3, [r7, #15]
    break;
 800c718:	bf00      	nop
  }
  return usb_status;
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3714      	adds	r7, #20
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <__libc_init_array>:
 800c728:	b570      	push	{r4, r5, r6, lr}
 800c72a:	4d0d      	ldr	r5, [pc, #52]	; (800c760 <__libc_init_array+0x38>)
 800c72c:	4c0d      	ldr	r4, [pc, #52]	; (800c764 <__libc_init_array+0x3c>)
 800c72e:	1b64      	subs	r4, r4, r5
 800c730:	10a4      	asrs	r4, r4, #2
 800c732:	2600      	movs	r6, #0
 800c734:	42a6      	cmp	r6, r4
 800c736:	d109      	bne.n	800c74c <__libc_init_array+0x24>
 800c738:	4d0b      	ldr	r5, [pc, #44]	; (800c768 <__libc_init_array+0x40>)
 800c73a:	4c0c      	ldr	r4, [pc, #48]	; (800c76c <__libc_init_array+0x44>)
 800c73c:	f000 f8f2 	bl	800c924 <_init>
 800c740:	1b64      	subs	r4, r4, r5
 800c742:	10a4      	asrs	r4, r4, #2
 800c744:	2600      	movs	r6, #0
 800c746:	42a6      	cmp	r6, r4
 800c748:	d105      	bne.n	800c756 <__libc_init_array+0x2e>
 800c74a:	bd70      	pop	{r4, r5, r6, pc}
 800c74c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c750:	4798      	blx	r3
 800c752:	3601      	adds	r6, #1
 800c754:	e7ee      	b.n	800c734 <__libc_init_array+0xc>
 800c756:	f855 3b04 	ldr.w	r3, [r5], #4
 800c75a:	4798      	blx	r3
 800c75c:	3601      	adds	r6, #1
 800c75e:	e7f2      	b.n	800c746 <__libc_init_array+0x1e>
 800c760:	0800ca8c 	.word	0x0800ca8c
 800c764:	0800ca8c 	.word	0x0800ca8c
 800c768:	0800ca8c 	.word	0x0800ca8c
 800c76c:	0800ca90 	.word	0x0800ca90

0800c770 <__retarget_lock_acquire_recursive>:
 800c770:	4770      	bx	lr

0800c772 <__retarget_lock_release_recursive>:
 800c772:	4770      	bx	lr

0800c774 <memcpy>:
 800c774:	440a      	add	r2, r1
 800c776:	4291      	cmp	r1, r2
 800c778:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c77c:	d100      	bne.n	800c780 <memcpy+0xc>
 800c77e:	4770      	bx	lr
 800c780:	b510      	push	{r4, lr}
 800c782:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c78a:	4291      	cmp	r1, r2
 800c78c:	d1f9      	bne.n	800c782 <memcpy+0xe>
 800c78e:	bd10      	pop	{r4, pc}

0800c790 <memset>:
 800c790:	4402      	add	r2, r0
 800c792:	4603      	mov	r3, r0
 800c794:	4293      	cmp	r3, r2
 800c796:	d100      	bne.n	800c79a <memset+0xa>
 800c798:	4770      	bx	lr
 800c79a:	f803 1b01 	strb.w	r1, [r3], #1
 800c79e:	e7f9      	b.n	800c794 <memset+0x4>

0800c7a0 <_free_r>:
 800c7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7a2:	2900      	cmp	r1, #0
 800c7a4:	d044      	beq.n	800c830 <_free_r+0x90>
 800c7a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7aa:	9001      	str	r0, [sp, #4]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f1a1 0404 	sub.w	r4, r1, #4
 800c7b2:	bfb8      	it	lt
 800c7b4:	18e4      	addlt	r4, r4, r3
 800c7b6:	f000 f8a9 	bl	800c90c <__malloc_lock>
 800c7ba:	4a1e      	ldr	r2, [pc, #120]	; (800c834 <_free_r+0x94>)
 800c7bc:	9801      	ldr	r0, [sp, #4]
 800c7be:	6813      	ldr	r3, [r2, #0]
 800c7c0:	b933      	cbnz	r3, 800c7d0 <_free_r+0x30>
 800c7c2:	6063      	str	r3, [r4, #4]
 800c7c4:	6014      	str	r4, [r2, #0]
 800c7c6:	b003      	add	sp, #12
 800c7c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7cc:	f000 b8a4 	b.w	800c918 <__malloc_unlock>
 800c7d0:	42a3      	cmp	r3, r4
 800c7d2:	d908      	bls.n	800c7e6 <_free_r+0x46>
 800c7d4:	6825      	ldr	r5, [r4, #0]
 800c7d6:	1961      	adds	r1, r4, r5
 800c7d8:	428b      	cmp	r3, r1
 800c7da:	bf01      	itttt	eq
 800c7dc:	6819      	ldreq	r1, [r3, #0]
 800c7de:	685b      	ldreq	r3, [r3, #4]
 800c7e0:	1949      	addeq	r1, r1, r5
 800c7e2:	6021      	streq	r1, [r4, #0]
 800c7e4:	e7ed      	b.n	800c7c2 <_free_r+0x22>
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	b10b      	cbz	r3, 800c7f0 <_free_r+0x50>
 800c7ec:	42a3      	cmp	r3, r4
 800c7ee:	d9fa      	bls.n	800c7e6 <_free_r+0x46>
 800c7f0:	6811      	ldr	r1, [r2, #0]
 800c7f2:	1855      	adds	r5, r2, r1
 800c7f4:	42a5      	cmp	r5, r4
 800c7f6:	d10b      	bne.n	800c810 <_free_r+0x70>
 800c7f8:	6824      	ldr	r4, [r4, #0]
 800c7fa:	4421      	add	r1, r4
 800c7fc:	1854      	adds	r4, r2, r1
 800c7fe:	42a3      	cmp	r3, r4
 800c800:	6011      	str	r1, [r2, #0]
 800c802:	d1e0      	bne.n	800c7c6 <_free_r+0x26>
 800c804:	681c      	ldr	r4, [r3, #0]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	6053      	str	r3, [r2, #4]
 800c80a:	4421      	add	r1, r4
 800c80c:	6011      	str	r1, [r2, #0]
 800c80e:	e7da      	b.n	800c7c6 <_free_r+0x26>
 800c810:	d902      	bls.n	800c818 <_free_r+0x78>
 800c812:	230c      	movs	r3, #12
 800c814:	6003      	str	r3, [r0, #0]
 800c816:	e7d6      	b.n	800c7c6 <_free_r+0x26>
 800c818:	6825      	ldr	r5, [r4, #0]
 800c81a:	1961      	adds	r1, r4, r5
 800c81c:	428b      	cmp	r3, r1
 800c81e:	bf04      	itt	eq
 800c820:	6819      	ldreq	r1, [r3, #0]
 800c822:	685b      	ldreq	r3, [r3, #4]
 800c824:	6063      	str	r3, [r4, #4]
 800c826:	bf04      	itt	eq
 800c828:	1949      	addeq	r1, r1, r5
 800c82a:	6021      	streq	r1, [r4, #0]
 800c82c:	6054      	str	r4, [r2, #4]
 800c82e:	e7ca      	b.n	800c7c6 <_free_r+0x26>
 800c830:	b003      	add	sp, #12
 800c832:	bd30      	pop	{r4, r5, pc}
 800c834:	20005584 	.word	0x20005584

0800c838 <cleanup_glue>:
 800c838:	b538      	push	{r3, r4, r5, lr}
 800c83a:	460c      	mov	r4, r1
 800c83c:	6809      	ldr	r1, [r1, #0]
 800c83e:	4605      	mov	r5, r0
 800c840:	b109      	cbz	r1, 800c846 <cleanup_glue+0xe>
 800c842:	f7ff fff9 	bl	800c838 <cleanup_glue>
 800c846:	4621      	mov	r1, r4
 800c848:	4628      	mov	r0, r5
 800c84a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c84e:	f7ff bfa7 	b.w	800c7a0 <_free_r>
	...

0800c854 <_reclaim_reent>:
 800c854:	4b2c      	ldr	r3, [pc, #176]	; (800c908 <_reclaim_reent+0xb4>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4283      	cmp	r3, r0
 800c85a:	b570      	push	{r4, r5, r6, lr}
 800c85c:	4604      	mov	r4, r0
 800c85e:	d051      	beq.n	800c904 <_reclaim_reent+0xb0>
 800c860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c862:	b143      	cbz	r3, 800c876 <_reclaim_reent+0x22>
 800c864:	68db      	ldr	r3, [r3, #12]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d14a      	bne.n	800c900 <_reclaim_reent+0xac>
 800c86a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c86c:	6819      	ldr	r1, [r3, #0]
 800c86e:	b111      	cbz	r1, 800c876 <_reclaim_reent+0x22>
 800c870:	4620      	mov	r0, r4
 800c872:	f7ff ff95 	bl	800c7a0 <_free_r>
 800c876:	6961      	ldr	r1, [r4, #20]
 800c878:	b111      	cbz	r1, 800c880 <_reclaim_reent+0x2c>
 800c87a:	4620      	mov	r0, r4
 800c87c:	f7ff ff90 	bl	800c7a0 <_free_r>
 800c880:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c882:	b111      	cbz	r1, 800c88a <_reclaim_reent+0x36>
 800c884:	4620      	mov	r0, r4
 800c886:	f7ff ff8b 	bl	800c7a0 <_free_r>
 800c88a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c88c:	b111      	cbz	r1, 800c894 <_reclaim_reent+0x40>
 800c88e:	4620      	mov	r0, r4
 800c890:	f7ff ff86 	bl	800c7a0 <_free_r>
 800c894:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c896:	b111      	cbz	r1, 800c89e <_reclaim_reent+0x4a>
 800c898:	4620      	mov	r0, r4
 800c89a:	f7ff ff81 	bl	800c7a0 <_free_r>
 800c89e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c8a0:	b111      	cbz	r1, 800c8a8 <_reclaim_reent+0x54>
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f7ff ff7c 	bl	800c7a0 <_free_r>
 800c8a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c8aa:	b111      	cbz	r1, 800c8b2 <_reclaim_reent+0x5e>
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	f7ff ff77 	bl	800c7a0 <_free_r>
 800c8b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c8b4:	b111      	cbz	r1, 800c8bc <_reclaim_reent+0x68>
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f7ff ff72 	bl	800c7a0 <_free_r>
 800c8bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8be:	b111      	cbz	r1, 800c8c6 <_reclaim_reent+0x72>
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f7ff ff6d 	bl	800c7a0 <_free_r>
 800c8c6:	69a3      	ldr	r3, [r4, #24]
 800c8c8:	b1e3      	cbz	r3, 800c904 <_reclaim_reent+0xb0>
 800c8ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	4798      	blx	r3
 800c8d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c8d2:	b1b9      	cbz	r1, 800c904 <_reclaim_reent+0xb0>
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c8da:	f7ff bfad 	b.w	800c838 <cleanup_glue>
 800c8de:	5949      	ldr	r1, [r1, r5]
 800c8e0:	b941      	cbnz	r1, 800c8f4 <_reclaim_reent+0xa0>
 800c8e2:	3504      	adds	r5, #4
 800c8e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8e6:	2d80      	cmp	r5, #128	; 0x80
 800c8e8:	68d9      	ldr	r1, [r3, #12]
 800c8ea:	d1f8      	bne.n	800c8de <_reclaim_reent+0x8a>
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7ff ff57 	bl	800c7a0 <_free_r>
 800c8f2:	e7ba      	b.n	800c86a <_reclaim_reent+0x16>
 800c8f4:	680e      	ldr	r6, [r1, #0]
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f7ff ff52 	bl	800c7a0 <_free_r>
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	e7ef      	b.n	800c8e0 <_reclaim_reent+0x8c>
 800c900:	2500      	movs	r5, #0
 800c902:	e7ef      	b.n	800c8e4 <_reclaim_reent+0x90>
 800c904:	bd70      	pop	{r4, r5, r6, pc}
 800c906:	bf00      	nop
 800c908:	20000294 	.word	0x20000294

0800c90c <__malloc_lock>:
 800c90c:	4801      	ldr	r0, [pc, #4]	; (800c914 <__malloc_lock+0x8>)
 800c90e:	f7ff bf2f 	b.w	800c770 <__retarget_lock_acquire_recursive>
 800c912:	bf00      	nop
 800c914:	20005580 	.word	0x20005580

0800c918 <__malloc_unlock>:
 800c918:	4801      	ldr	r0, [pc, #4]	; (800c920 <__malloc_unlock+0x8>)
 800c91a:	f7ff bf2a 	b.w	800c772 <__retarget_lock_release_recursive>
 800c91e:	bf00      	nop
 800c920:	20005580 	.word	0x20005580

0800c924 <_init>:
 800c924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c926:	bf00      	nop
 800c928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92a:	bc08      	pop	{r3}
 800c92c:	469e      	mov	lr, r3
 800c92e:	4770      	bx	lr

0800c930 <_fini>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	bf00      	nop
 800c934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c936:	bc08      	pop	{r3}
 800c938:	469e      	mov	lr, r3
 800c93a:	4770      	bx	lr
